cmake_minimum_required(VERSION 3.5.1)
# include("/drive/env.cmake")

project(hw_nvmedia_ipc_producer VERSION 1.0.0)

# option(ENABLE_FEATURE_OPENCV "Enable feature openCV" OFF)

#自动查找头文件路径函数(没有去重)
macro(FIND_INCLUDE_DIR result curdir)  #定义函数,2个参数:存放结果result；指定路径curdir；
    file(GLOB_RECURSE children "${curdir}/*.hpp" "${curdir}/*.h" )	#遍历获取{curdir}中*.hpp和*.h文件列表
    # message(STATUS "children= ${children}")								#打印*.hpp和*.h的文件列表
    set(dirlist "")														#定义dirlist中间变量，并初始化
    foreach(child ${children})											#for循环
        string(REGEX REPLACE "(.*)/.*" "\\1" LIB_NAME ${child})			#字符串替换,用/前的字符替换/*h
        if(IS_DIRECTORY ${LIB_NAME})									#判断是否为路径
            LIST(APPEND dirlist ${LIB_NAME})							#将合法的路径加入dirlist变量中
        endif()															#结束判断
    endforeach()														#结束for循环
    set(${result} ${dirlist})											#dirlist结果放入result变量中
endmacro()																#函数结束

FIND_INCLUDE_DIR(INCLUDE_DIR_LIST ${CMAKE_CURRENT_SOURCE_DIR}/../../code)
FIND_INCLUDE_DIR(INCLUDE_TENSORRT_DIR_LIST ${CMAKE_CURRENT_SOURCE_DIR}/../../../TensorRT)

#CUDA
find_package(CUDA REQUIRED)
# Find YOLOv5 include directory
# find_path(YOLOV5_INCLUDE_DIR yololayer.h
#     HINTS ${CMAKE_CURRENT_SOURCE_DIR}/../../code/thirdParty/yolov5/include/
#     PATH_SUFFIXES include)

# # Find GPUUtils include directory
# find_path(GPUUTILS_INCLUDE_DIR gpu_convert.hpp
#     HINTS ${CMAKE_CURRENT_SOURCE_DIR}/../../code/thirdParty/gpuutils/include/
#     PATH_SUFFIXES include)

# configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../../code/thirdParty/yolov5/res/yolov5.engine ${CMAKE_CURRENT_BINARY_DIR}/yolov5.engine COPYONLY)

if(WIN32)
enable_language(CUDA)
endif(WIN32)

set(LIB_DIR ../../code/lib)
set(DRIVE_OS_DIR /home/jiangxing/driveos)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
option(ENABLE_FEATURE_OPENCV "Enable feature openCV" OFF)
if (ENABLE_FEATURE_OPENCV)
    add_definitions(-DFEATURE_OPENCV_ENABLED)
    set(CMAKE_MODULE_PATH /home/orin/80043632/projects/opencv/build)
    set(OpenCV_DIR /home/orin/80043632/projects/opencv/build)
    find_package(OpenCV)
    include_directories(${OpenCV_INCLUDE_DIRS})
endif()

include_directories(
    # /home/jiangxing/driveos/drive/drive-linux/include/nvmedia_6x
    # /home/jiangxing/driveos/drive/drive-linux/include
    # /home/jiangxing/driveos/usr/local/cuda-11.4/targets/aarch64-linux/include
    ${INCLUDE_DIR_LIST}
    # ${INCLUDE_TENSORRT_DIR_LIST}
    #${INCLUDE_DRIVE_OS_DIR_LIST}
    ${CMAKE_CURRENT_SOURCE_DIR}/../../../driveos/v6.0.6/include
    ${CMAKE_CURRENT_SOURCE_DIR}/../../../driveos/v6.0.6/include/nvmedia_6x
    ${CMAKE_CURRENT_SOURCE_DIR}/../../../driveos/v6.0.6/include/cuda
    ${YOLOV5_INCLUDE_DIR}
    ${GPUUTILS_INCLUDE_DIR}
)

file(GLOB_RECURSE HW_NVMEDIA_IPC_CONSUMER_CUDA_SRCS
    "${CMAKE_CURRENT_SOURCE_DIR}/hw_nvmedia_ipc_producer_vs/*.cpp"
    # "${CMAKE_CURRENT_SOURCE_DIR}/../../code/modules/*.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/../../code/modules/devices/video/*.cpp"
)

#link directorie of lib
link_directories(
	# /home/jiangxing/driveos/drive/drive-linux/lib-target
	# /home/jiangxing/driveos/usr/lib/aarch64-linux-gnu
    # /home/jiangxing/driveos/usr/local/cuda-11.4/targets/aarch64-linux/lib
    ${LIB_DIR}
    #    /usr/local/cuda/lib64
    /usr/local/cuda/targets/aarch64-linux/lib
)

# add_library(${PROJECT_NAME} SHARED ${HW_NVMEDIA_IPC_CONSUMER_CUDA_SRCS})
# cuda_add_executable(${PROJECT_NAME} ${HW_NVMEDIA_IPC_CONSUMER_CUDA_SRCS})
add_executable(${PROJECT_NAME} ${HW_NVMEDIA_IPC_CONSUMER_CUDA_SRCS})
set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS "-Wl,-rpath,/lib64 ${LINK_FLAGS_DEF}")

target_link_libraries(${PROJECT_NAME}
    hw_hal_vs
    hw_platform_vs
    nvsipl
    nvsipl_query
    nvmedia_iep_sci
    nvscistream
    nvscibuf
    nvscisync
    nvscievent
    nvsciipc
    nvscicommon
    cuda
    cudart
    pthread
    cudart
    pthread
    # nvinfer
    # myplugins
    nvmedia2d
    gpuutils
    #yolov5
)
if (ENABLE_FEATURE_OPENCV)
target_link_libraries(${PROJECT_NAME}
    ${OpenCV_LIBS}
)
endif()

install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)

add_definitions(-D__HW_NVMEDIA_PROJ_IPC_PRODUCER)

