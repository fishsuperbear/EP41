// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_config.proto

#include "camera_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_camera_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_camera_5fconfig_2eproto;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
class CameraConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraConfig> _instance;
} _CameraConfig_default_instance_;
static void InitDefaultsscc_info_CameraConfig_camera_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CameraConfig_default_instance_;
    new (ptr) ::CameraConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraConfig_camera_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraConfig_camera_5fconfig_2eproto}, {
      &scc_info_Config_camera_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_Config_camera_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Config_default_instance_;
    new (ptr) ::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_camera_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_camera_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_camera_5fconfig_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_camera_5fconfig_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_camera_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_camera_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config, no_),
  PROTOBUF_FIELD_OFFSET(::Config, open_type_),
  PROTOBUF_FIELD_OFFSET(::Config, block_type_),
  PROTOBUF_FIELD_OFFSET(::Config, sensor_type_),
  PROTOBUF_FIELD_OFFSET(::Config, sensor_index_),
  PROTOBUF_FIELD_OFFSET(::Config, gpu_image_type_),
  PROTOBUF_FIELD_OFFSET(::Config, inter_polation_),
  PROTOBUF_FIELD_OFFSET(::Config, buse_capture_resolution_),
  PROTOBUF_FIELD_OFFSET(::Config, custom_width_),
  PROTOBUF_FIELD_OFFSET(::Config, custom_height_),
  PROTOBUF_FIELD_OFFSET(::Config, buse_capture_framerate_),
  PROTOBUF_FIELD_OFFSET(::Config, rotate_degrees_),
  0,
  8,
  9,
  10,
  1,
  11,
  7,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CameraConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CameraConfig, config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::Config)},
  { 29, -1, sizeof(::CameraConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CameraConfig_default_instance_),
};

const char descriptor_table_protodef_camera_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023camera_config.proto\"\337\002\n\006Config\022\n\n\002no\030\001"
  " \002(\r\022\034\n\topen_type\030\002 \002(\0162\t.OpenType\022\036\n\nbl"
  "ock_type\030\003 \002(\0162\n.BlockType\022 \n\013sensor_typ"
  "e\030\004 \002(\0162\013.SensorType\022\024\n\014sensor_index\030\005 \002"
  "(\r\022%\n\016gpu_image_type\030\006 \002(\0162\r.GpuImageTyp"
  "e\022&\n\016inter_polation\030\007 \002(\0162\016.InterPolatio"
  "n\022\037\n\027buse_capture_resolution\030\010 \002(\r\022\024\n\014cu"
  "stom_width\030\t \002(\r\022\025\n\rcustom_height\030\n \002(\r\022"
  "\036\n\026buse_capture_framerate\030\013 \002(\r\022\026\n\016rotat"
  "e_degrees\030\014 \002(\r\"\'\n\014CameraConfig\022\027\n\006confi"
  "g\030\001 \003(\0132\007.Config*\254\003\n\010OpenType\022%\n!OPENTYP"
  "E_GROUPA_SENSOR_ONE_IMX728\020\001\022%\n!OPENTYPE"
  "_GROUPA_SENSOR_ONE_ISX021\020\002\022%\n!OPENTYPE_"
  "GROUPB_SENSOR_ONE_ISX021\020\003\022%\n!OPENTYPE_G"
  "ROUPC_SENSOR_FOUR_OVXIF\020\004\022,\n(OPENTYPE_GR"
  "OUPC_SENSOR_ONE_OVXIF_INDEX_0\020\005\022,\n(OPENT"
  "YPE_GROUPC_SENSOR_ONE_OVXIF_INDEX_1\020\006\022,\n"
  "(OPENTYPE_GROUPC_SENSOR_ONE_OVXIF_INDEX_"
  "2\020\007\022,\n(OPENTYPE_GROUPC_SENSOR_ONE_OVXIF_"
  "INDEX_3\020\010\022#\n\037OPENTYPE_MULTIROUP_SENSOR_D"
  "ESAY\020\t\022\'\n#OPENTYPE_MULTIROUP_SENSOR_DESA"
  "Y_SUB\020\n*\214\001\n\tBlockType\022\025\n\021BLOCK_TYPE_GROU"
  "PA\020\001\022\025\n\021BLOCK_TYPE_GROUPB\020\002\022\025\n\021BLOCK_TYP"
  "E_GROUPC\020\003\022\025\n\021BLOCK_TYPE_GROUPD\020\004\022#\n\037BLO"
  "CK_TYPE_CURRENT_SINGLE_GROUP\020d*\223\001\n\nSenso"
  "rType\022\026\n\022SENSOR_TYPE_IMX728\020\001\022\026\n\022SENSOR_"
  "TYPE_ISX021\020\002\022\025\n\021SENSOR_TYPE_OVX1F\020\003\022\027\n\023"
  "SENSOR_TYPE_OX08B40\020\004\022%\n!SENSOR_TYPE_CUR"
  "RENT_SINGLE_SENSOR\020d*\210\003\n\014GpuImageType\022%\n"
  "!GPUDATACB_IMGTYPE_RGB888_NHWC_RGB\020\001\022%\n!"
  "GPUDATACB_IMGTYPE_RGB888_NHWC_BGR\020\002\022%\n!G"
  "PUDATACB_IMGTYPE_RGB888_NCHW_RGB\020\003\022%\n!GP"
  "UDATACB_IMGTYPE_RGB888_NCHW_BGR\020\004\022\'\n#GPU"
  "DATACB_IMGTYPE_RGB888_NCHW16_RGB\020\005\022\'\n#GP"
  "UDATACB_IMGTYPE_RGB888_NCHW16_BGR\020\006\022\032\n\026G"
  "PUDATACB_IMGTYPE_NV12\020\007\022\032\n\026GPUDATACB_IMG"
  "TYPE_NV21\020\010\022\032\n\026GPUDATACB_IMGTYPE_YUYV\020\t\022"
  "\032\n\026GPUDATACB_IMGTYPE_YVYU\020\n\022\032\n\026GPUDATACB"
  "_IMGTYPE_VYUY\020\013*Z\n\rInterPolation\022#\n\037GPUD"
  "ATACB_INTERPOLATION_NEAREST\020\001\022$\n GPUDATA"
  "CB_INTERPOLATION_BILINEAR\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_camera_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_camera_5fconfig_2eproto_sccs[2] = {
  &scc_info_CameraConfig_camera_5fconfig_2eproto.base,
  &scc_info_Config_camera_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_camera_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_camera_5fconfig_2eproto, "camera_config.proto", 1627,
  &descriptor_table_camera_5fconfig_2eproto_once, descriptor_table_camera_5fconfig_2eproto_sccs, descriptor_table_camera_5fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_camera_5fconfig_2eproto::offsets,
  file_level_metadata_camera_5fconfig_2eproto, 2, file_level_enum_descriptors_camera_5fconfig_2eproto, file_level_service_descriptors_camera_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_camera_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_camera_5fconfig_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camera_5fconfig_2eproto);
  return file_level_enum_descriptors_camera_5fconfig_2eproto[0];
}
bool OpenType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camera_5fconfig_2eproto);
  return file_level_enum_descriptors_camera_5fconfig_2eproto[1];
}
bool BlockType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camera_5fconfig_2eproto);
  return file_level_enum_descriptors_camera_5fconfig_2eproto[2];
}
bool SensorType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpuImageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camera_5fconfig_2eproto);
  return file_level_enum_descriptors_camera_5fconfig_2eproto[3];
}
bool GpuImageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterPolation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camera_5fconfig_2eproto);
  return file_level_enum_descriptors_camera_5fconfig_2eproto[4];
}
bool InterPolation_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._has_bits_);
  static void set_has_no(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_open_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_block_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sensor_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sensor_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gpu_image_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_inter_polation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_buse_capture_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_buse_capture_framerate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rotate_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000fff) ^ 0x00000fff) != 0;
  }
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&no_, &from.no_,
    static_cast<size_t>(reinterpret_cast<char*>(&gpu_image_type_) -
    reinterpret_cast<char*>(&no_)) + sizeof(gpu_image_type_));
  // @@protoc_insertion_point(copy_constructor:Config)
}

void Config::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&no_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rotate_degrees_) -
      reinterpret_cast<char*>(&no_)) + sizeof(rotate_degrees_));
  inter_polation_ = 1;
  open_type_ = 1;
  block_type_ = 1;
  sensor_type_ = 1;
  gpu_image_type_ = 1;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_camera_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&no_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotate_degrees_) -
        reinterpret_cast<char*>(&no_)) + sizeof(rotate_degrees_));
    inter_polation_ = 1;
  }
  if (cached_has_bits & 0x00000f00u) {
    open_type_ = 1;
    block_type_ = 1;
    sensor_type_ = 1;
    gpu_image_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_no(&has_bits);
          no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .OpenType open_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::OpenType_IsValid(val))) {
            _internal_set_open_type(static_cast<::OpenType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .BlockType block_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::BlockType_IsValid(val))) {
            _internal_set_block_type(static_cast<::BlockType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .SensorType sensor_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SensorType_IsValid(val))) {
            _internal_set_sensor_type(static_cast<::SensorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 sensor_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sensor_index(&has_bits);
          sensor_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .GpuImageType gpu_image_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GpuImageType_IsValid(val))) {
            _internal_set_gpu_image_type(static_cast<::GpuImageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .InterPolation inter_polation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::InterPolation_IsValid(val))) {
            _internal_set_inter_polation(static_cast<::InterPolation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 buse_capture_resolution = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_buse_capture_resolution(&has_bits);
          buse_capture_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 custom_width = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_custom_width(&has_bits);
          custom_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 custom_height = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_custom_height(&has_bits);
          custom_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 buse_capture_framerate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_buse_capture_framerate(&has_bits);
          buse_capture_framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 rotate_degrees = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_rotate_degrees(&has_bits);
          rotate_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 no = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_no(), target);
  }

  // required .OpenType open_type = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_open_type(), target);
  }

  // required .BlockType block_type = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_block_type(), target);
  }

  // required .SensorType sensor_type = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sensor_type(), target);
  }

  // required uint32 sensor_index = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sensor_index(), target);
  }

  // required .GpuImageType gpu_image_type = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_gpu_image_type(), target);
  }

  // required .InterPolation inter_polation = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_inter_polation(), target);
  }

  // required uint32 buse_capture_resolution = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_buse_capture_resolution(), target);
  }

  // required uint32 custom_width = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_custom_width(), target);
  }

  // required uint32 custom_height = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_custom_height(), target);
  }

  // required uint32 buse_capture_framerate = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_buse_capture_framerate(), target);
  }

  // required uint32 rotate_degrees = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_rotate_degrees(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config)
  return target;
}

size_t Config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Config)
  size_t total_size = 0;

  if (_internal_has_no()) {
    // required uint32 no = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_no());
  }

  if (_internal_has_sensor_index()) {
    // required uint32 sensor_index = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sensor_index());
  }

  if (_internal_has_buse_capture_resolution()) {
    // required uint32 buse_capture_resolution = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buse_capture_resolution());
  }

  if (_internal_has_custom_width()) {
    // required uint32 custom_width = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_custom_width());
  }

  if (_internal_has_custom_height()) {
    // required uint32 custom_height = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_custom_height());
  }

  if (_internal_has_buse_capture_framerate()) {
    // required uint32 buse_capture_framerate = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buse_capture_framerate());
  }

  if (_internal_has_rotate_degrees()) {
    // required uint32 rotate_degrees = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rotate_degrees());
  }

  if (_internal_has_inter_polation()) {
    // required .InterPolation inter_polation = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inter_polation());
  }

  if (_internal_has_open_type()) {
    // required .OpenType open_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_open_type());
  }

  if (_internal_has_block_type()) {
    // required .BlockType block_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_block_type());
  }

  if (_internal_has_sensor_type()) {
    // required .SensorType sensor_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensor_type());
  }

  if (_internal_has_gpu_image_type()) {
    // required .GpuImageType gpu_image_type = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gpu_image_type());
  }

  return total_size;
}
size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required uint32 no = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_no());

    // required uint32 sensor_index = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sensor_index());

    // required uint32 buse_capture_resolution = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buse_capture_resolution());

    // required uint32 custom_width = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_custom_width());

    // required uint32 custom_height = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_custom_height());

    // required uint32 buse_capture_framerate = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buse_capture_framerate());

    // required uint32 rotate_degrees = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rotate_degrees());

    // required .InterPolation inter_polation = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inter_polation());

    // required .OpenType open_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_open_type());

    // required .BlockType block_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_block_type());

    // required .SensorType sensor_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensor_type());

    // required .GpuImageType gpu_image_type = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gpu_image_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      no_ = from.no_;
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_index_ = from.sensor_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      buse_capture_resolution_ = from.buse_capture_resolution_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_width_ = from.custom_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      custom_height_ = from.custom_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      buse_capture_framerate_ = from.buse_capture_framerate_;
    }
    if (cached_has_bits & 0x00000040u) {
      rotate_degrees_ = from.rotate_degrees_;
    }
    if (cached_has_bits & 0x00000080u) {
      inter_polation_ = from.inter_polation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      open_type_ = from.open_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      block_type_ = from.block_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      sensor_type_ = from.sensor_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      gpu_image_type_ = from.gpu_image_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, rotate_degrees_)
      + sizeof(Config::rotate_degrees_)
      - PROTOBUF_FIELD_OFFSET(Config, no_)>(
          reinterpret_cast<char*>(&no_),
          reinterpret_cast<char*>(&other->no_));
  swap(inter_polation_, other->inter_polation_);
  swap(open_type_, other->open_type_);
  swap(block_type_, other->block_type_);
  swap(sensor_type_, other->sensor_type_);
  swap(gpu_image_type_, other->gpu_image_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CameraConfig::_Internal {
 public:
};

CameraConfig::CameraConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CameraConfig)
}
CameraConfig::CameraConfig(const CameraConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_(from.config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CameraConfig)
}

void CameraConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraConfig_camera_5fconfig_2eproto.base);
}

CameraConfig::~CameraConfig() {
  // @@protoc_insertion_point(destructor:CameraConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraConfig::ArenaDtor(void* object) {
  CameraConfig* _this = reinterpret_cast< CameraConfig* >(object);
  (void)_this;
}
void CameraConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraConfig& CameraConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraConfig_camera_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void CameraConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CameraConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Config config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CameraConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Config config = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CameraConfig)
  return target;
}

size_t CameraConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CameraConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Config config = 1;
  total_size += 1UL * this->_internal_config_size();
  for (const auto& msg : this->config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CameraConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CameraConfig)
    MergeFrom(*source);
  }
}

void CameraConfig::MergeFrom(const CameraConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
}

void CameraConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraConfig::CopyFrom(const CameraConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraConfig::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(config_)) return false;
  return true;
}

void CameraConfig::InternalSwap(CameraConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_.InternalSwap(&other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Config* Arena::CreateMaybeMessage< ::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::CameraConfig* Arena::CreateMaybeMessage< ::CameraConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CameraConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
