/**

* Copyright @ 2020 - 2027 iAuto Software(Shanghai) Co., Ltd.

* All Rights Reserved.

*

* Redistribution and use in source and binary forms, with or without

* modification, are NOT permitted except as agreed by

* iAuto Software(Shanghai) Co., Ltd.

*

* Unless required by applicable law or agreed to in writing, software

* distributed under the License is distributed on an "AS IS" BASIS,

* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

*/
#include <array>
#include "extend/crc/crc.h"

namespace crc {

namespace {
// clang-format off
constexpr std::array<uint8_t, 256> lookupTableCrc8{
    0x00U, 0x1DU, 0x3AU, 0x27U, 0x74U, 0x69U, 0x4EU, 0x53U, 0xE8U, 0xF5U, 0xD2U, 0xCFU, 0x9CU, 0x81U, 0xA6U, 0xBBU,
    0xCDU, 0xD0U, 0xF7U, 0xEAU, 0xB9U, 0xA4U, 0x83U, 0x9EU, 0x25U, 0x38U, 0x1FU, 0x02U, 0x51U, 0x4CU, 0x6BU, 0x76U,
    0x87U, 0x9AU, 0xBDU, 0xA0U, 0xF3U, 0xEEU, 0xC9U, 0xD4U, 0x6FU, 0x72U, 0x55U, 0x48U, 0x1BU, 0x06U, 0x21U, 0x3CU,
    0x4AU, 0x57U, 0x70U, 0x6DU, 0x3EU, 0x23U, 0x04U, 0x19U, 0xA2U, 0xBFU, 0x98U, 0x85U, 0xD6U, 0xCBU, 0xECU, 0xF1U,
    0x13U, 0x0EU, 0x29U, 0x34U, 0x67U, 0x7AU, 0x5DU, 0x40U, 0xFBU, 0xE6U, 0xC1U, 0xDCU, 0x8FU, 0x92U, 0xB5U, 0xA8U,
    0xDEU, 0xC3U, 0xE4U, 0xF9U, 0xAAU, 0xB7U, 0x90U, 0x8DU, 0x36U, 0x2BU, 0x0CU, 0x11U, 0x42U, 0x5FU, 0x78U, 0x65U,
    0x94U, 0x89U, 0xAEU, 0xB3U, 0xE0U, 0xFDU, 0xDAU, 0xC7U, 0x7CU, 0x61U, 0x46U, 0x5BU, 0x08U, 0x15U, 0x32U, 0x2FU,
    0x59U, 0x44U, 0x63U, 0x7EU, 0x2DU, 0x30U, 0x17U, 0x0AU, 0xB1U, 0xACU, 0x8BU, 0x96U, 0xC5U, 0xD8U, 0xFFU, 0xE2U,
    0x26U, 0x3BU, 0x1CU, 0x01U, 0x52U, 0x4FU, 0x68U, 0x75U, 0xCEU, 0xD3U, 0xF4U, 0xE9U, 0xBAU, 0xA7U, 0x80U, 0x9DU,
    0xEBU, 0xF6U, 0xD1U, 0xCCU, 0x9FU, 0x82U, 0xA5U, 0xB8U, 0x03U, 0x1EU, 0x39U, 0x24U, 0x77U, 0x6AU, 0x4DU, 0x50U,
    0xA1U, 0xBCU, 0x9BU, 0x86U, 0xD5U, 0xC8U, 0xEFU, 0xF2U, 0x49U, 0x54U, 0x73U, 0x6EU, 0x3DU, 0x20U, 0x07U, 0x1AU,
    0x6CU, 0x71U, 0x56U, 0x4BU, 0x18U, 0x05U, 0x22U, 0x3FU, 0x84U, 0x99U, 0xBEU, 0xA3U, 0xF0U, 0xEDU, 0xCAU, 0xD7U,
    0x35U, 0x28U, 0x0FU, 0x12U, 0x41U, 0x5CU, 0x7BU, 0x66U, 0xDDU, 0xC0U, 0xE7U, 0xFAU, 0xA9U, 0xB4U, 0x93U, 0x8EU,
    0xF8U, 0xE5U, 0xC2U, 0xDFU, 0x8CU, 0x91U, 0xB6U, 0xABU, 0x10U, 0x0DU, 0x2AU, 0x37U, 0x64U, 0x79U, 0x5EU, 0x43U,
    0xB2U, 0xAFU, 0x88U, 0x95U, 0xC6U, 0xDBU, 0xFCU, 0xE1U, 0x5AU, 0x47U, 0x60U, 0x7DU, 0x2EU, 0x33U, 0x14U, 0x09U,
    0x7FU, 0x62U, 0x45U, 0x58U, 0x0BU, 0x16U, 0x31U, 0x2CU, 0x97U, 0x8AU, 0xADU, 0xB0U, 0xE3U, 0xFEU, 0xD9U, 0xC4U};

constexpr std::array<uint8_t, 256> lookupTableCrc8H2F{
    0x00U, 0x2fU, 0x5eU, 0x71U, 0xbcU, 0x93U, 0xe2U, 0xcdU, 0x57U, 0x78U, 0x09U, 0x26U, 0xebU, 0xc4U, 0xb5U, 0x9aU,
    0xaeU, 0x81U, 0xf0U, 0xdfU, 0x12U, 0x3dU, 0x4cU, 0x63U, 0xf9U, 0xd6U, 0xa7U, 0x88U, 0x45U, 0x6aU, 0x1bU, 0x34U,
    0x73U, 0x5cU, 0x2dU, 0x02U, 0xcfU, 0xe0U, 0x91U, 0xbeU, 0x24U, 0x0bU, 0x7aU, 0x55U, 0x98U, 0xb7U, 0xc6U, 0xe9U,
    0xddU, 0xf2U, 0x83U, 0xacU, 0x61U, 0x4eU, 0x3fU, 0x10U, 0x8aU, 0xa5U, 0xd4U, 0xfbU, 0x36U, 0x19U, 0x68U, 0x47U,
    0xe6U, 0xc9U, 0xb8U, 0x97U, 0x5aU, 0x75U, 0x04U, 0x2bU, 0xb1U, 0x9eU, 0xefU, 0xc0U, 0x0dU, 0x22U, 0x53U, 0x7cU,
    0x48U, 0x67U, 0x16U, 0x39U, 0xf4U, 0xdbU, 0xaaU, 0x85U, 0x1fU, 0x30U, 0x41U, 0x6eU, 0xa3U, 0x8cU, 0xfdU, 0xd2U,
    0x95U, 0xbaU, 0xcbU, 0xe4U, 0x29U, 0x06U, 0x77U, 0x58U, 0xc2U, 0xedU, 0x9cU, 0xb3U, 0x7eU, 0x51U, 0x20U, 0x0fU,
    0x3bU, 0x14U, 0x65U, 0x4aU, 0x87U, 0xa8U, 0xd9U, 0xf6U, 0x6cU, 0x43U, 0x32U, 0x1dU, 0xd0U, 0xffU, 0x8eU, 0xa1U,
    0xe3U, 0xccU, 0xbdU, 0x92U, 0x5fU, 0x70U, 0x01U, 0x2eU, 0xb4U, 0x9bU, 0xeaU, 0xc5U, 0x08U, 0x27U, 0x56U, 0x79U,
    0x4dU, 0x62U, 0x13U, 0x3cU, 0xf1U, 0xdeU, 0xafU, 0x80U, 0x1aU, 0x35U, 0x44U, 0x6bU, 0xa6U, 0x89U, 0xf8U, 0xd7U,
    0x90U, 0xbfU, 0xceU, 0xe1U, 0x2cU, 0x03U, 0x72U, 0x5dU, 0xc7U, 0xe8U, 0x99U, 0xb6U, 0x7bU, 0x54U, 0x25U, 0x0aU,
    0x3eU, 0x11U, 0x60U, 0x4fU, 0x82U, 0xadU, 0xdcU, 0xf3U, 0x69U, 0x46U, 0x37U, 0x18U, 0xd5U, 0xfaU, 0x8bU, 0xa4U,
    0x05U, 0x2aU, 0x5bU, 0x74U, 0xb9U, 0x96U, 0xe7U, 0xc8U, 0x52U, 0x7dU, 0x0cU, 0x23U, 0xeeU, 0xc1U, 0xb0U, 0x9fU,
    0xabU, 0x84U, 0xf5U, 0xdaU, 0x17U, 0x38U, 0x49U, 0x66U, 0xfcU, 0xd3U, 0xa2U, 0x8dU, 0x40U, 0x6fU, 0x1eU, 0x31U,
    0x76U, 0x59U, 0x28U, 0x07U, 0xcaU, 0xe5U, 0x94U, 0xbbU, 0x21U, 0x0eU, 0x7fU, 0x50U, 0x9dU, 0xb2U, 0xc3U, 0xecU,
    0xd8U, 0xf7U, 0x86U, 0xa9U, 0x64U, 0x4bU, 0x3aU, 0x15U, 0x8fU, 0xa0U, 0xd1U, 0xfeU, 0x33U, 0x1cU, 0x6dU, 0x42U};

constexpr std::array<uint32_t, 256> lookupTableCrc32P4{
    0x00000000U, 0x30850FF5U, 0x610A1FEAU, 0x518F101FU, 0xC2143FD4U, 0xF2913021U, 0xA31E203EU, 0x939B2FCBU, 0x159615F7U,
    0x25131A02U, 0x749C0A1DU, 0x441905E8U, 0xD7822A23U, 0xE70725D6U, 0xB68835C9U, 0x860D3A3CU, 0x2B2C2BEEU, 0x1BA9241BU,
    0x4A263404U, 0x7AA33BF1U, 0xE938143AU, 0xD9BD1BCFU, 0x88320BD0U, 0xB8B70425U, 0x3EBA3E19U, 0x0E3F31ECU, 0x5FB021F3U,
    0x6F352E06U, 0xFCAE01CDU, 0xCC2B0E38U, 0x9DA41E27U, 0xAD2111D2U, 0x565857DCU, 0x66DD5829U, 0x37524836U, 0x07D747C3U,
    0x944C6808U, 0xA4C967FDU, 0xF54677E2U, 0xC5C37817U, 0x43CE422BU, 0x734B4DDEU, 0x22C45DC1U, 0x12415234U, 0x81DA7DFFU,
    0xB15F720AU, 0xE0D06215U, 0xD0556DE0U, 0x7D747C32U, 0x4DF173C7U, 0x1C7E63D8U, 0x2CFB6C2DU, 0xBF6043E6U, 0x8FE54C13U,
    0xDE6A5C0CU, 0xEEEF53F9U, 0x68E269C5U, 0x58676630U, 0x09E8762FU, 0x396D79DAU, 0xAAF65611U, 0x9A7359E4U, 0xCBFC49FBU,
    0xFB79460EU, 0xACB0AFB8U, 0x9C35A04DU, 0xCDBAB052U, 0xFD3FBFA7U, 0x6EA4906CU, 0x5E219F99U, 0x0FAE8F86U, 0x3F2B8073U,
    0xB926BA4FU, 0x89A3B5BAU, 0xD82CA5A5U, 0xE8A9AA50U, 0x7B32859BU, 0x4BB78A6EU, 0x1A389A71U, 0x2ABD9584U, 0x879C8456U,
    0xB7198BA3U, 0xE6969BBCU, 0xD6139449U, 0x4588BB82U, 0x750DB477U, 0x2482A468U, 0x1407AB9DU, 0x920A91A1U, 0xA28F9E54U,
    0xF3008E4BU, 0xC38581BEU, 0x501EAE75U, 0x609BA180U, 0x3114B19FU, 0x0191BE6AU, 0xFAE8F864U, 0xCA6DF791U, 0x9BE2E78EU,
    0xAB67E87BU, 0x38FCC7B0U, 0x0879C845U, 0x59F6D85AU, 0x6973D7AFU, 0xEF7EED93U, 0xDFFBE266U, 0x8E74F279U, 0xBEF1FD8CU,
    0x2D6AD247U, 0x1DEFDDB2U, 0x4C60CDADU, 0x7CE5C258U, 0xD1C4D38AU, 0xE141DC7FU, 0xB0CECC60U, 0x804BC395U, 0x13D0EC5EU,
    0x2355E3ABU, 0x72DAF3B4U, 0x425FFC41U, 0xC452C67DU, 0xF4D7C988U, 0xA558D997U, 0x95DDD662U, 0x0646F9A9U, 0x36C3F65CU,
    0x674CE643U, 0x57C9E9B6U, 0xC8DF352FU, 0xF85A3ADAU, 0xA9D52AC5U, 0x99502530U, 0x0ACB0AFBU, 0x3A4E050EU, 0x6BC11511U,
    0x5B441AE4U, 0xDD4920D8U, 0xEDCC2F2DU, 0xBC433F32U, 0x8CC630C7U, 0x1F5D1F0CU, 0x2FD810F9U, 0x7E5700E6U, 0x4ED20F13U,
    0xE3F31EC1U, 0xD3761134U, 0x82F9012BU, 0xB27C0EDEU, 0x21E72115U, 0x11622EE0U, 0x40ED3EFFU, 0x7068310AU, 0xF6650B36U,
    0xC6E004C3U, 0x976F14DCU, 0xA7EA1B29U, 0x347134E2U, 0x04F43B17U, 0x557B2B08U, 0x65FE24FDU, 0x9E8762F3U, 0xAE026D06U,
    0xFF8D7D19U, 0xCF0872ECU, 0x5C935D27U, 0x6C1652D2U, 0x3D9942CDU, 0x0D1C4D38U, 0x8B117704U, 0xBB9478F1U, 0xEA1B68EEU,
    0xDA9E671BU, 0x490548D0U, 0x79804725U, 0x280F573AU, 0x188A58CFU, 0xB5AB491DU, 0x852E46E8U, 0xD4A156F7U, 0xE4245902U,
    0x77BF76C9U, 0x473A793CU, 0x16B56923U, 0x263066D6U, 0xA03D5CEAU, 0x90B8531FU, 0xC1374300U, 0xF1B24CF5U, 0x6229633EU,
    0x52AC6CCBU, 0x03237CD4U, 0x33A67321U, 0x646F9A97U, 0x54EA9562U, 0x0565857DU, 0x35E08A88U, 0xA67BA543U, 0x96FEAAB6U,
    0xC771BAA9U, 0xF7F4B55CU, 0x71F98F60U, 0x417C8095U, 0x10F3908AU, 0x20769F7FU, 0xB3EDB0B4U, 0x8368BF41U, 0xD2E7AF5EU,
    0xE262A0ABU, 0x4F43B179U, 0x7FC6BE8CU, 0x2E49AE93U, 0x1ECCA166U, 0x8D578EADU, 0xBDD28158U, 0xEC5D9147U, 0xDCD89EB2U,
    0x5AD5A48EU, 0x6A50AB7BU, 0x3BDFBB64U, 0x0B5AB491U, 0x98C19B5AU, 0xA84494AFU, 0xF9CB84B0U, 0xC94E8B45U, 0x3237CD4BU,
    0x02B2C2BEU, 0x533DD2A1U, 0x63B8DD54U, 0xF023F29FU, 0xC0A6FD6AU, 0x9129ED75U, 0xA1ACE280U, 0x27A1D8BCU, 0x1724D749U,
    0x46ABC756U, 0x762EC8A3U, 0xE5B5E768U, 0xD530E89DU, 0x84BFF882U, 0xB43AF777U, 0x191BE6A5U, 0x299EE950U, 0x7811F94FU,
    0x4894F6BAU, 0xDB0FD971U, 0xEB8AD684U, 0xBA05C69BU, 0x8A80C96EU, 0x0C8DF352U, 0x3C08FCA7U, 0x6D87ECB8U, 0x5D02E34DU,
    0xCE99CC86U, 0xFE1CC373U, 0xAF93D36CU, 0x9F16DC99U};

constexpr std::array<uint32_t, 256> lookupTableCrc32{
    0x00000000U, 0x77073096U, 0xEE0E612CU, 0x990951BAU, 0x076DC419U, 0x706AF48FU, 0xE963A535U, 0x9E6495A3U, 0x0EDB8832U,
    0x79DCB8A4U, 0xE0D5E91EU, 0x97D2D988U, 0x09B64C2BU, 0x7EB17CBDU, 0xE7B82D07U, 0x90BF1D91U, 0x1DB71064U, 0x6AB020F2U,
    0xF3B97148U, 0x84BE41DEU, 0x1ADAD47DU, 0x6DDDE4EBU, 0xF4D4B551U, 0x83D385C7U, 0x136C9856U, 0x646BA8C0U, 0xFD62F97AU,
    0x8A65C9ECU, 0x14015C4FU, 0x63066CD9U, 0xFA0F3D63U, 0x8D080DF5U, 0x3B6E20C8U, 0x4C69105EU, 0xD56041E4U, 0xA2677172U,
    0x3C03E4D1U, 0x4B04D447U, 0xD20D85FDU, 0xA50AB56BU, 0x35B5A8FAU, 0x42B2986CU, 0xDBBBC9D6U, 0xACBCF940U, 0x32D86CE3U,
    0x45DF5C75U, 0xDCD60DCFU, 0xABD13D59U, 0x26D930ACU, 0x51DE003AU, 0xC8D75180U, 0xBFD06116U, 0x21B4F4B5U, 0x56B3C423U,
    0xCFBA9599U, 0xB8BDA50FU, 0x2802B89EU, 0x5F058808U, 0xC60CD9B2U, 0xB10BE924U, 0x2F6F7C87U, 0x58684C11U, 0xC1611DABU,
    0xB6662D3DU, 0x76DC4190U, 0x01DB7106U, 0x98D220BCU, 0xEFD5102AU, 0x71B18589U, 0x06B6B51FU, 0x9FBFE4A5U, 0xE8B8D433U,
    0x7807C9A2U, 0x0F00F934U, 0x9609A88EU, 0xE10E9818U, 0x7F6A0DBBU, 0x086D3D2DU, 0x91646C97U, 0xE6635C01U, 0x6B6B51F4U,
    0x1C6C6162U, 0x856530D8U, 0xF262004EU, 0x6C0695EDU, 0x1B01A57BU, 0x8208F4C1U, 0xF50FC457U, 0x65B0D9C6U, 0x12B7E950U,
    0x8BBEB8EAU, 0xFCB9887CU, 0x62DD1DDFU, 0x15DA2D49U, 0x8CD37CF3U, 0xFBD44C65U, 0x4DB26158U, 0x3AB551CEU, 0xA3BC0074U,
    0xD4BB30E2U, 0x4ADFA541U, 0x3DD895D7U, 0xA4D1C46DU, 0xD3D6F4FBU, 0x4369E96AU, 0x346ED9FCU, 0xAD678846U, 0xDA60B8D0U,
    0x44042D73U, 0x33031DE5U, 0xAA0A4C5FU, 0xDD0D7CC9U, 0x5005713CU, 0x270241AAU, 0xBE0B1010U, 0xC90C2086U, 0x5768B525U,
    0x206F85B3U, 0xB966D409U, 0xCE61E49FU, 0x5EDEF90EU, 0x29D9C998U, 0xB0D09822U, 0xC7D7A8B4U, 0x59B33D17U, 0x2EB40D81U,
    0xB7BD5C3BU, 0xC0BA6CADU, 0xEDB88320U, 0x9ABFB3B6U, 0x03B6E20CU, 0x74B1D29AU, 0xEAD54739U, 0x9DD277AFU, 0x04DB2615U,
    0x73DC1683U, 0xE3630B12U, 0x94643B84U, 0x0D6D6A3EU, 0x7A6A5AA8U, 0xE40ECF0BU, 0x9309FF9DU, 0x0A00AE27U, 0x7D079EB1U,
    0xF00F9344U, 0x8708A3D2U, 0x1E01F268U, 0x6906C2FEU, 0xF762575DU, 0x806567CBU, 0x196C3671U, 0x6E6B06E7U, 0xFED41B76U,
    0x89D32BE0U, 0x10DA7A5AU, 0x67DD4ACCU, 0xF9B9DF6FU, 0x8EBEEFF9U, 0x17B7BE43U, 0x60B08ED5U, 0xD6D6A3E8U, 0xA1D1937EU,
    0x38D8C2C4U, 0x4FDFF252U, 0xD1BB67F1U, 0xA6BC5767U, 0x3FB506DDU, 0x48B2364BU, 0xD80D2BDAU, 0xAF0A1B4CU, 0x36034AF6U,
    0x41047A60U, 0xDF60EFC3U, 0xA867DF55U, 0x316E8EEFU, 0x4669BE79U, 0xCB61B38CU, 0xBC66831AU, 0x256FD2A0U, 0x5268E236U,
    0xCC0C7795U, 0xBB0B4703U, 0x220216B9U, 0x5505262FU, 0xC5BA3BBEU, 0xB2BD0B28U, 0x2BB45A92U, 0x5CB36A04U, 0xC2D7FFA7U,
    0xB5D0CF31U, 0x2CD99E8BU, 0x5BDEAE1DU, 0x9B64C2B0U, 0xEC63F226U, 0x756AA39CU, 0x026D930AU, 0x9C0906A9U, 0xEB0E363FU,
    0x72076785U, 0x05005713U, 0x95BF4A82U, 0xE2B87A14U, 0x7BB12BAEU, 0x0CB61B38U, 0x92D28E9BU, 0xE5D5BE0DU, 0x7CDCEFB7U,
    0x0BDBDF21U, 0x86D3D2D4U, 0xF1D4E242U, 0x68DDB3F8U, 0x1FDA836EU, 0x81BE16CDU, 0xF6B9265BU, 0x6FB077E1U, 0x18B74777U,
    0x88085AE6U, 0xFF0F6A70U, 0x66063BCAU, 0x11010B5CU, 0x8F659EFFU, 0xF862AE69U, 0x616BFFD3U, 0x166CCF45U, 0xA00AE278U,
    0xD70DD2EEU, 0x4E048354U, 0x3903B3C2U, 0xA7672661U, 0xD06016F7U, 0x4969474DU, 0x3E6E77DBU, 0xAED16A4AU, 0xD9D65ADCU,
    0x40DF0B66U, 0x37D83BF0U, 0xA9BCAE53U, 0xDEBB9EC5U, 0x47B2CF7FU, 0x30B5FFE9U, 0xBDBDF21CU, 0xCABAC28AU, 0x53B39330U,
    0x24B4A3A6U, 0xBAD03605U, 0xCDD70693U, 0x54DE5729U, 0x23D967BFU, 0xB3667A2EU, 0xC4614AB8U, 0x5D681B02U, 0x2A6F2B94U,
    0xB40BBE37U, 0xC30C8EA1U, 0x5A05DF1BU, 0x2D02EF8D};

constexpr std::array<uint16_t, 256> lookupTableCrc16{
    0x0000U, 0x1021U, 0x2042U, 0x3063U, 0x4084U, 0x50a5U, 0x60c6U, 0x70e7U, 0x8108U, 0x9129U, 0xa14aU, 0xb16bU, 0xc18cU,
    0xd1adU, 0xe1ceU, 0xf1efU, 0x1231U, 0x0210U, 0x3273U, 0x2252U, 0x52b5U, 0x4294U, 0x72f7U, 0x62d6U, 0x9339U, 0x8318U,
    0xb37bU, 0xa35aU, 0xd3bdU, 0xc39cU, 0xf3ffU, 0xe3deU, 0x2462U, 0x3443U, 0x0420U, 0x1401U, 0x64e6U, 0x74c7U, 0x44a4U,
    0x5485U, 0xa56aU, 0xb54bU, 0x8528U, 0x9509U, 0xe5eeU, 0xf5cfU, 0xc5acU, 0xd58dU, 0x3653U, 0x2672U, 0x1611U, 0x0630U,
    0x76d7U, 0x66f6U, 0x5695U, 0x46b4U, 0xb75bU, 0xa77aU, 0x9719U, 0x8738U, 0xf7dfU, 0xe7feU, 0xd79dU, 0xc7bcU, 0x48c4U,
    0x58e5U, 0x6886U, 0x78a7U, 0x0840U, 0x1861U, 0x2802U, 0x3823U, 0xc9ccU, 0xd9edU, 0xe98eU, 0xf9afU, 0x8948U, 0x9969U,
    0xa90aU, 0xb92bU, 0x5af5U, 0x4ad4U, 0x7ab7U, 0x6a96U, 0x1a71U, 0x0a50U, 0x3a33U, 0x2a12U, 0xdbfdU, 0xcbdcU, 0xfbbfU,
    0xeb9eU, 0x9b79U, 0x8b58U, 0xbb3bU, 0xab1aU, 0x6ca6U, 0x7c87U, 0x4ce4U, 0x5cc5U, 0x2c22U, 0x3c03U, 0x0c60U, 0x1c41U,
    0xedaeU, 0xfd8fU, 0xcdecU, 0xddcdU, 0xad2aU, 0xbd0bU, 0x8d68U, 0x9d49U, 0x7e97U, 0x6eb6U, 0x5ed5U, 0x4ef4U, 0x3e13U,
    0x2e32U, 0x1e51U, 0x0e70U, 0xff9fU, 0xefbeU, 0xdfddU, 0xcffcU, 0xbf1bU, 0xaf3aU, 0x9f59U, 0x8f78U, 0x9188U, 0x81a9U,
    0xb1caU, 0xa1ebU, 0xd10cU, 0xc12dU, 0xf14eU, 0xe16fU, 0x1080U, 0x00a1U, 0x30c2U, 0x20e3U, 0x5004U, 0x4025U, 0x7046U,
    0x6067U, 0x83b9U, 0x9398U, 0xa3fbU, 0xb3daU, 0xc33dU, 0xd31cU, 0xe37fU, 0xf35eU, 0x02b1U, 0x1290U, 0x22f3U, 0x32d2U,
    0x4235U, 0x5214U, 0x6277U, 0x7256U, 0xb5eaU, 0xa5cbU, 0x95a8U, 0x8589U, 0xf56eU, 0xe54fU, 0xd52cU, 0xc50dU, 0x34e2U,
    0x24c3U, 0x14a0U, 0x0481U, 0x7466U, 0x6447U, 0x5424U, 0x4405U, 0xa7dbU, 0xb7faU, 0x8799U, 0x97b8U, 0xe75fU, 0xf77eU,
    0xc71dU, 0xd73cU, 0x26d3U, 0x36f2U, 0x0691U, 0x16b0U, 0x6657U, 0x7676U, 0x4615U, 0x5634U, 0xd94cU, 0xc96dU, 0xf90eU,
    0xe92fU, 0x99c8U, 0x89e9U, 0xb98aU, 0xa9abU, 0x5844U, 0x4865U, 0x7806U, 0x6827U, 0x18c0U, 0x08e1U, 0x3882U, 0x28a3U,
    0xcb7dU, 0xdb5cU, 0xeb3fU, 0xfb1eU, 0x8bf9U, 0x9bd8U, 0xabbbU, 0xbb9aU, 0x4a75U, 0x5a54U, 0x6a37U, 0x7a16U, 0x0af1U,
    0x1ad0U, 0x2ab3U, 0x3a92U, 0xfd2eU, 0xed0fU, 0xdd6cU, 0xcd4dU, 0xbdaaU, 0xad8bU, 0x9de8U, 0x8dc9U, 0x7c26U, 0x6c07U,
    0x5c64U, 0x4c45U, 0x3ca2U, 0x2c83U, 0x1ce0U, 0x0cc1U, 0xef1fU, 0xff3eU, 0xcf5dU, 0xdf7cU, 0xaf9bU, 0xbfbaU, 0x8fd9U,
    0x9ff8U, 0x6e17U, 0x7e36U, 0x4e55U, 0x5e74U, 0x2e93U, 0x3eb2U, 0x0ed1U, 0x1ef0U};

constexpr std::array<uint64_t, 256> lookupTableCrc64{
    0x0000000000000000U, 0xB32E4CBE03A75F6FU, 0xF4843657A840A05BU, 0x47AA7AE9ABE7FF34U, 0x7BD0C384FF8F5E33U,
    0xC8FE8F3AFC28015CU, 0x8F54F5D357CFFE68U, 0x3C7AB96D5468A107U, 0xF7A18709FF1EBC66U, 0x448FCBB7FCB9E309U,
    0x325B15E575E1C3DU,  0xB00BFDE054F94352U, 0x8C71448D0091E255U, 0x3F5F08330336BD3AU, 0x78F572DAA8D1420EU,
    0xCBDB3E64AB761D61U, 0x7D9BA13851336649U, 0xCEB5ED8652943926U, 0x891F976FF973C612U, 0x3A31DBD1FAD4997DU,
    0x64B62BCAEBC387AU,  0xB5652E02AD1B6715U, 0xF2CF54EB06FC9821U, 0x41E11855055BC74EU, 0x8A3A2631AE2DDA2FU,
    0x39146A8FAD8A8540U, 0x7EBE1066066D7A74U, 0xCD905CD805CA251BU, 0xF1EAE5B551A2841CU, 0x42C4A90B5205DB73U,
    0x56ED3E2F9E22447U,  0xB6409F5CFA457B28U, 0xFB374270A266CC92U, 0x48190ECEA1C193FDU, 0xFB374270A266CC9U,
    0xBC9D3899098133A6U, 0x80E781F45DE992A1U, 0x33C9CD4A5E4ECDCEU, 0x7463B7A3F5A932FAU, 0xC74DFB1DF60E6D95U,
    0xC96C5795D7870F4U,  0xBFB889C75EDF2F9BU, 0xF812F32EF538D0AFU, 0x4B3CBF90F69F8FC0U, 0x774606FDA2F72EC7U,
    0xC4684A43A15071A8U, 0x83C230AA0AB78E9CU, 0x30EC7C140910D1F3U, 0x86ACE348F355AADBU, 0x3582AFF6F0F2F5B4U,
    0x7228D51F5B150A80U, 0xC10699A158B255EFU, 0xFD7C20CC0CDAF4E8U, 0x4E526C720F7DAB87U, 0x9F8169BA49A54B3U,
    0xBAD65A25A73D0BDCU, 0x710D64410C4B16BDU, 0xC22328FF0FEC49D2U, 0x85895216A40BB6E6U, 0x36A71EA8A7ACE989U,
    0xADDA7C5F3C4488EU,  0xB9F3EB7BF06317E1U, 0xFE5991925B84E8D5U, 0x4D77DD2C5823B7BAU, 0x64B62BCAEBC387A1U,
    0xD7986774E864D8CEU, 0x90321D9D438327FAU, 0x231C512340247895U, 0x1F66E84E144CD992U, 0xAC48A4F017EB86FDU,
    0xEBE2DE19BC0C79C9U, 0x58CC92A7BFAB26A6U, 0x9317ACC314DD3BC7U, 0x2039E07D177A64A8U, 0x67939A94BC9D9B9CU,
    0xD4BDD62ABF3AC4F3U, 0xE8C76F47EB5265F4U, 0x5BE923F9E8F53A9BU, 0x1C4359104312C5AFU, 0xAF6D15AE40B59AC0U,
    0x192D8AF2BAF0E1E8U, 0xAA03C64CB957BE87U, 0xEDA9BCA512B041B3U, 0x5E87F01B11171EDCU, 0x62FD4976457FBFDBU,
    0xD1D305C846D8E0B4U, 0x96797F21ED3F1F80U, 0x2557339FEE9840EFU, 0xEE8C0DFB45EE5D8EU, 0x5DA24145464902E1U,
    0x1A083BACEDAEFDD5U, 0xA9267712EE09A2BAU, 0x955CCE7FBA6103BDU, 0x267282C1B9C65CD2U, 0x61D8F8281221A3E6U,
    0xD2F6B4961186FC89U, 0x9F8169BA49A54B33U, 0x2CAF25044A02145CU, 0x6B055FEDE1E5EB68U, 0xD82B1353E242B407U,
    0xE451AA3EB62A1500U, 0x577FE680B58D4A6FU, 0x10D59C691E6AB55BU, 0xA3FBD0D71DCDEA34U, 0x6820EEB3B6BBF755U,
    0xDB0EA20DB51CA83AU, 0x9CA4D8E41EFB570EU, 0x2F8A945A1D5C0861U, 0x13F02D374934A966U, 0xA0DE61894A93F609U,
    0xE7741B60E174093DU, 0x545A57DEE2D35652U, 0xE21AC88218962D7AU, 0x5134843C1B317215U, 0x169EFED5B0D68D21U,
    0xA5B0B26BB371D24EU, 0x99CA0B06E7197349U, 0x2AE447B8E4BE2C26U, 0x6D4E3D514F59D312U, 0xDE6071EF4CFE8C7DU,
    0x15BB4F8BE788911CU, 0xA6950335E42FCE73U, 0xE13F79DC4FC83147U, 0x521135624C6F6E28U, 0x6E6B8C0F1807CF2FU,
    0xDD45C0B11BA09040U, 0x9AEFBA58B0476F74U, 0x29C1F6E6B3E0301BU, 0xC96C5795D7870F42U, 0x7A421B2BD420502DU,
    0x3DE861C27FC7AF19U, 0x8EC62D7C7C60F076U, 0xB2BC941128085171U, 0x192D8AF2BAF0E1EU,  0x4638A2468048F12AU,
    0xF516EEF883EFAE45U, 0x3ECDD09C2899B324U, 0x8DE39C222B3EEC4BU, 0xCA49E6CB80D9137FU, 0x7967AA75837E4C10U,
    0x451D1318D716ED17U, 0xF6335FA6D4B1B278U, 0xB199254F7F564D4CU, 0x2B769F17CF11223U,  0xB4F7F6AD86B4690BU,
    0x7D9BA1385133664U,  0x4073C0FA2EF4C950U, 0xF35D8C442D53963FU, 0xCF273529793B3738U, 0x7C0979977A9C6857U,
    0x3BA3037ED17B9763U, 0x888D4FC0D2DCC80CU, 0x435671A479AAD56DU, 0xF0783D1A7A0D8A02U, 0xB7D247F3D1EA7536U,
    0x4FC0B4DD24D2A59U,  0x3886B22086258B5EU, 0x8BA8FE9E8582D431U, 0xCC0284772E652B05U, 0x7F2CC8C92DC2746AU,
    0x325B15E575E1C3D0U, 0x8175595B76469CBFU, 0xC6DF23B2DDA1638BU, 0x75F16F0CDE063CE4U, 0x498BD6618A6E9DE3U,
    0xFAA59ADF89C9C28CU, 0xBD0FE036222E3DB8U, 0xE21AC88218962D7U,  0xC5FA92EC8AFF7FB6U, 0x76D4DE52895820D9U,
    0x317EA4BB22BFDFEDU, 0x8250E80521188082U, 0xBE2A516875702185U, 0xD041DD676D77EEAU,  0x4AAE673FDD3081DEU,
    0xF9802B81DE97DEB1U, 0x4FC0B4DD24D2A599U, 0xFCEEF8632775FAF6U, 0xBB44828A8C9205C2U, 0x86ACE348F355AADU,
    0x34107759DB5DFBAAU, 0x873E3BE7D8FAA4C5U, 0xC094410E731D5BF1U, 0x73BA0DB070BA049EU, 0xB86133D4DBCC19FFU,
    0xB4F7F6AD86B4690U,  0x4CE50583738CB9A4U, 0xFFCB493D702BE6CBU, 0xC3B1F050244347CCU, 0x709FBCEE27E418A3U,
    0x3735C6078C03E797U, 0x841B8AB98FA4B8F8U, 0xADDA7C5F3C4488E3U, 0x1EF430E13FE3D78CU, 0x595E4A08940428B8U,
    0xEA7006B697A377D7U, 0xD60ABFDBC3CBD6D0U, 0x6524F365C06C89BFU, 0x228E898C6B8B768BU, 0x91A0C532682C29E4U,
    0x5A7BFB56C35A3485U, 0xE955B7E8C0FD6BEAU, 0xAEFFCD016B1A94DEU, 0x1DD181BF68BDCBB1U, 0x21AB38D23CD56AB6U,
    0x9285746C3F7235D9U, 0xD52F0E859495CAEDU, 0x6601423B97329582U, 0xD041DD676D77EEAAU, 0x636F91D96ED0B1C5U,
    0x24C5EB30C5374EF1U, 0x97EBA78EC690119EU, 0xAB911EE392F8B099U, 0x18BF525D915FEFF6U, 0x5F1528B43AB810C2U,
    0xEC3B640A391F4FADU, 0x27E05A6E926952CCU, 0x94CE16D091CE0DA3U, 0xD3646C393A29F297U, 0x604A2087398EADF8U,
    0x5C3099EA6DE60CFFU, 0xEF1ED5546E415390U, 0xA8B4AFBDC5A6ACA4U, 0x1B9AE303C601F3CBU, 0x56ED3E2F9E224471U,
    0xE5C372919D851B1EU, 0xA26908783662E42AU, 0x114744C635C5BB45U, 0x2D3DFDAB61AD1A42U, 0x9E13B115620A452DU,
    0xD9B9CBFCC9EDBA19U, 0x6A978742CA4AE576U, 0xA14CB926613CF817U, 0x1262F598629BA778U, 0x55C88F71C97C584CU,
    0xE6E6C3CFCADB0723U, 0xDA9C7AA29EB3A624U, 0x69B2361C9D14F94BU, 0x2E184CF536F3067FU, 0x9D36004B35545910U,
    0x2B769F17CF112238U, 0x9858D3A9CCB67D57U, 0xDFF2A94067518263U, 0x6CDCE5FE64F6DD0CU, 0x50A65C93309E7C0BU,
    0xE388102D33392364U, 0xA4226AC498DEDC50U, 0x170C267A9B79833FU, 0xDCD7181E300F9E5EU, 0x6FF954A033A8C131U,
    0x28532E49984F3E05U, 0x9B7D62F79BE8616AU, 0xA707DB9ACF80C06DU, 0x14299724CC279F02U, 0x5383EDCD67C06036U,
    0xE0ADA17364673F59U};
// clang-format on
}  // unnamed namespace

uint32_t CRC::CalculateCRC32P4( BufferView bufferView, bool isFirstCall,
                                uint32_t startValue ) noexcept {
    uint32_t crc;
    if ( isFirstCall ) {
        crc = startValueCrc32P4;
    } else {
        crc = startValue ^ xorValueCrc32P4;
    }

    for ( const auto& byte : bufferView ) {
        const uint32_t lookup = lookupTableCrc32P4[ static_cast<uint8_t>( byte ^ crc ) ];
        crc                   = lookup ^ ( crc >> 8U );
    }
    crc ^= xorValueCrc32P4;
    return crc;
}

uint32_t CRC::CalculateCRC32( BufferView bufferView, bool isFirstCall,
                              uint32_t startValue ) noexcept {
    uint32_t crc;
    if ( isFirstCall ) {
        crc = startValueCrc32;
    } else {
        crc = startValue ^ xorValueCrc32;
    }

    for ( const auto& byte : bufferView ) {
        const uint32_t lookup = lookupTableCrc32[ static_cast<uint8_t>( byte ^ crc ) ];
        crc                   = lookup ^ ( crc >> 8U );
    }
    crc ^= xorValueCrc32;
    return crc;
}

uint16_t CRC::CalculateCRC16( BufferView bufferView, bool isFirstCall,
                              uint16_t startValue ) noexcept {
    uint16_t crc;
    if ( isFirstCall ) {
        crc = startValueCrc16;
    } else {
        crc = startValue ^ xorValueCrc16;
    }

    for ( const auto& byte : bufferView ) {
        uint8_t arrIdx{static_cast<uint8_t>( byte ^ static_cast<uint8_t>( crc >> 8U ) )};
        crc = static_cast<uint16_t>( crc << 8U ) ^ lookupTableCrc16[ arrIdx ];
    }
    crc ^= xorValueCrc16;
    return crc;
}

uint64_t CRC::CalculateCRC64( BufferView bufferView, bool isFirstCall,
                              uint64_t startValue ) noexcept {
    uint64_t crc;
    if ( isFirstCall ) {
        crc = startValueCrc64;
    } else {
        crc = startValue ^ xorValueCrc64;
    }

    for ( const auto& byte : bufferView ) {
        uint8_t arrIdx{static_cast<uint8_t>( byte ^ crc )};
        crc = ( ( crc >> 8U ) & 0x00FFFFFFFFFFFFFFU ) ^ lookupTableCrc64[ arrIdx ];
    }
    crc ^= xorValueCrc64;
    return crc;
}

uint8_t CRC::CalculateCRC8( BufferView bufferView, bool isFirstCall, uint8_t startValue ) noexcept {
    uint8_t crc;
    if ( isFirstCall ) {
        crc = startValueCrc8;
    } else {
        crc = startValue ^ xorValueCrc8;
    }

    for ( const auto& byte : bufferView ) {
        uint8_t arrIdx{static_cast<uint8_t>( byte ^ crc )};
        crc = lookupTableCrc8[ arrIdx ];
    }
    crc ^= xorValueCrc8;
    return crc;
}

uint8_t CRC::CalculateCRC8H2F( BufferView bufferView, bool isFirstCall,
                               uint8_t startValue ) noexcept {
    uint8_t crc;
    if ( isFirstCall ) {
        crc = startValueCrc8H2F;
    } else {
        crc = startValue ^ xorValueCrc8H2F;
    }

    for ( const auto& byte : bufferView ) {
        uint8_t arrIdx{static_cast<uint8_t>( byte ^ crc )};
        crc = lookupTableCrc8H2F[ arrIdx ];
    }
    crc ^= xorValueCrc8H2F;
    return crc;
}

uint32_t CRC::Reflect( uint32_t crc ) noexcept {
    uint32_t ret{crc};
    ret = ( ( ret & 0x55555555U ) << 1U ) | ( ( ret & 0xaaaaaaaaU ) >> 1U );
    ret = ( ( ret & 0x33333333U ) << 2U ) | ( ( ret & 0xccccccccU ) >> 2U );
    ret = ( ( ret & 0x0f0f0f0fU ) << 4U ) | ( ( ret & 0xf0f0f0f0U ) >> 4U );
    ret = ( ( ret & 0x00ff00ffU ) << 8U ) | ( ( ret & 0xff00ff00U ) >> 8U );
    ret = ( ( ret & 0x0000ffffU ) << 16U ) | ( ( ret & 0xffff0000U ) >> 16U );
    return ret;
}

uint64_t CRC::Reflect( uint64_t crc ) noexcept {
    uint32_t subCrc0{static_cast<uint32_t>( ( crc & 0xFFFFFFFF00000000U ) >> 32U )};
    uint32_t subCrc1{static_cast<uint32_t>( crc & 0xFFFFFFFFU )};
    uint64_t reflected{static_cast<uint64_t>( Reflect( subCrc0 ) ) +
                       ( static_cast<uint64_t>( Reflect( subCrc1 ) ) << 32U )};
    return reflected;
}

}  // namespace crc