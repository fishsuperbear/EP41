// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: em.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_em_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_em_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_em_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_em_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_em_2eproto;
namespace hozon {
namespace netaos {
namespace zmqipc {
class em_reply;
class em_replyDefaultTypeInternal;
extern em_replyDefaultTypeInternal _em_reply_default_instance_;
class em_request;
class em_requestDefaultTypeInternal;
extern em_requestDefaultTypeInternal _em_request_default_instance_;
}  // namespace zmqipc
}  // namespace netaos
}  // namespace hozon
PROTOBUF_NAMESPACE_OPEN
template<> ::hozon::netaos::zmqipc::em_reply* Arena::CreateMaybeMessage<::hozon::netaos::zmqipc::em_reply>(Arena*);
template<> ::hozon::netaos::zmqipc::em_request* Arena::CreateMaybeMessage<::hozon::netaos::zmqipc::em_request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hozon {
namespace netaos {
namespace zmqipc {

// ===================================================================

class em_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hozon.netaos.zmqipc.em_request) */ {
 public:
  inline em_request() : em_request(nullptr) {};
  virtual ~em_request();

  em_request(const em_request& from);
  em_request(em_request&& from) noexcept
    : em_request() {
    *this = ::std::move(from);
  }

  inline em_request& operator=(const em_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline em_request& operator=(em_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const em_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const em_request* internal_default_instance() {
    return reinterpret_cast<const em_request*>(
               &_em_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(em_request& a, em_request& b) {
    a.Swap(&b);
  }
  inline void Swap(em_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(em_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline em_request* New() const final {
    return CreateMaybeMessage<em_request>(nullptr);
  }

  em_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<em_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const em_request& from);
  void MergeFrom(const em_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(em_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hozon.netaos.zmqipc.em_request";
  }
  protected:
  explicit em_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_em_2eproto);
    return ::descriptor_table_em_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessNameFieldNumber = 2,
    kTargetProcessNameFieldNumber = 3,
    kTypeFieldNumber = 1,
    kStateFieldNumber = 4,
  };
  // string process_name = 2;
  void clear_process_name();
  const std::string& process_name() const;
  void set_process_name(const std::string& value);
  void set_process_name(std::string&& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  std::string* mutable_process_name();
  std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);
  private:
  const std::string& _internal_process_name() const;
  void _internal_set_process_name(const std::string& value);
  std::string* _internal_mutable_process_name();
  public:

  // string target_process_name = 3;
  void clear_target_process_name();
  const std::string& target_process_name() const;
  void set_target_process_name(const std::string& value);
  void set_target_process_name(std::string&& value);
  void set_target_process_name(const char* value);
  void set_target_process_name(const char* value, size_t size);
  std::string* mutable_target_process_name();
  std::string* release_target_process_name();
  void set_allocated_target_process_name(std::string* target_process_name);
  private:
  const std::string& _internal_target_process_name() const;
  void _internal_set_target_process_name(const std::string& value);
  std::string* _internal_mutable_target_process_name();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 state = 4;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hozon.netaos.zmqipc.em_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_process_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_em_2eproto;
};
// -------------------------------------------------------------------

class em_reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hozon.netaos.zmqipc.em_reply) */ {
 public:
  inline em_reply() : em_reply(nullptr) {};
  virtual ~em_reply();

  em_reply(const em_reply& from);
  em_reply(em_reply&& from) noexcept
    : em_reply() {
    *this = ::std::move(from);
  }

  inline em_reply& operator=(const em_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline em_reply& operator=(em_reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const em_reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const em_reply* internal_default_instance() {
    return reinterpret_cast<const em_reply*>(
               &_em_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(em_reply& a, em_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(em_reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(em_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline em_reply* New() const final {
    return CreateMaybeMessage<em_reply>(nullptr);
  }

  em_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<em_reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const em_reply& from);
  void MergeFrom(const em_reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(em_reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hozon.netaos.zmqipc.em_reply";
  }
  protected:
  explicit em_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_em_2eproto);
    return ::descriptor_table_em_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessNameFieldNumber = 2,
    kTypeFieldNumber = 1,
    kStateFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // string process_name = 2;
  void clear_process_name();
  const std::string& process_name() const;
  void set_process_name(const std::string& value);
  void set_process_name(std::string&& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  std::string* mutable_process_name();
  std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);
  private:
  const std::string& _internal_process_name() const;
  void _internal_set_process_name(const std::string& value);
  std::string* _internal_mutable_process_name();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 state = 3;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 4;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hozon.netaos.zmqipc.em_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_em_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// em_request

// uint32 type = 1;
inline void em_request::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 em_request::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 em_request::type() const {
  // @@protoc_insertion_point(field_get:hozon.netaos.zmqipc.em_request.type)
  return _internal_type();
}
inline void em_request::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void em_request::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:hozon.netaos.zmqipc.em_request.type)
}

// string process_name = 2;
inline void em_request::clear_process_name() {
  process_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& em_request::process_name() const {
  // @@protoc_insertion_point(field_get:hozon.netaos.zmqipc.em_request.process_name)
  return _internal_process_name();
}
inline void em_request::set_process_name(const std::string& value) {
  _internal_set_process_name(value);
  // @@protoc_insertion_point(field_set:hozon.netaos.zmqipc.em_request.process_name)
}
inline std::string* em_request::mutable_process_name() {
  // @@protoc_insertion_point(field_mutable:hozon.netaos.zmqipc.em_request.process_name)
  return _internal_mutable_process_name();
}
inline const std::string& em_request::_internal_process_name() const {
  return process_name_.Get();
}
inline void em_request::_internal_set_process_name(const std::string& value) {
  
  process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void em_request::set_process_name(std::string&& value) {
  
  process_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hozon.netaos.zmqipc.em_request.process_name)
}
inline void em_request::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hozon.netaos.zmqipc.em_request.process_name)
}
inline void em_request::set_process_name(const char* value,
    size_t size) {
  
  process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hozon.netaos.zmqipc.em_request.process_name)
}
inline std::string* em_request::_internal_mutable_process_name() {
  
  return process_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* em_request::release_process_name() {
  // @@protoc_insertion_point(field_release:hozon.netaos.zmqipc.em_request.process_name)
  return process_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void em_request::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    
  } else {
    
  }
  process_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hozon.netaos.zmqipc.em_request.process_name)
}

// string target_process_name = 3;
inline void em_request::clear_target_process_name() {
  target_process_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& em_request::target_process_name() const {
  // @@protoc_insertion_point(field_get:hozon.netaos.zmqipc.em_request.target_process_name)
  return _internal_target_process_name();
}
inline void em_request::set_target_process_name(const std::string& value) {
  _internal_set_target_process_name(value);
  // @@protoc_insertion_point(field_set:hozon.netaos.zmqipc.em_request.target_process_name)
}
inline std::string* em_request::mutable_target_process_name() {
  // @@protoc_insertion_point(field_mutable:hozon.netaos.zmqipc.em_request.target_process_name)
  return _internal_mutable_target_process_name();
}
inline const std::string& em_request::_internal_target_process_name() const {
  return target_process_name_.Get();
}
inline void em_request::_internal_set_target_process_name(const std::string& value) {
  
  target_process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void em_request::set_target_process_name(std::string&& value) {
  
  target_process_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hozon.netaos.zmqipc.em_request.target_process_name)
}
inline void em_request::set_target_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hozon.netaos.zmqipc.em_request.target_process_name)
}
inline void em_request::set_target_process_name(const char* value,
    size_t size) {
  
  target_process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hozon.netaos.zmqipc.em_request.target_process_name)
}
inline std::string* em_request::_internal_mutable_target_process_name() {
  
  return target_process_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* em_request::release_target_process_name() {
  // @@protoc_insertion_point(field_release:hozon.netaos.zmqipc.em_request.target_process_name)
  return target_process_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void em_request::set_allocated_target_process_name(std::string* target_process_name) {
  if (target_process_name != nullptr) {
    
  } else {
    
  }
  target_process_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_process_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hozon.netaos.zmqipc.em_request.target_process_name)
}

// int32 state = 4;
inline void em_request::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 em_request::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 em_request::state() const {
  // @@protoc_insertion_point(field_get:hozon.netaos.zmqipc.em_request.state)
  return _internal_state();
}
inline void em_request::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void em_request::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:hozon.netaos.zmqipc.em_request.state)
}

// -------------------------------------------------------------------

// em_reply

// uint32 type = 1;
inline void em_reply::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 em_reply::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 em_reply::type() const {
  // @@protoc_insertion_point(field_get:hozon.netaos.zmqipc.em_reply.type)
  return _internal_type();
}
inline void em_reply::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void em_reply::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:hozon.netaos.zmqipc.em_reply.type)
}

// string process_name = 2;
inline void em_reply::clear_process_name() {
  process_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& em_reply::process_name() const {
  // @@protoc_insertion_point(field_get:hozon.netaos.zmqipc.em_reply.process_name)
  return _internal_process_name();
}
inline void em_reply::set_process_name(const std::string& value) {
  _internal_set_process_name(value);
  // @@protoc_insertion_point(field_set:hozon.netaos.zmqipc.em_reply.process_name)
}
inline std::string* em_reply::mutable_process_name() {
  // @@protoc_insertion_point(field_mutable:hozon.netaos.zmqipc.em_reply.process_name)
  return _internal_mutable_process_name();
}
inline const std::string& em_reply::_internal_process_name() const {
  return process_name_.Get();
}
inline void em_reply::_internal_set_process_name(const std::string& value) {
  
  process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void em_reply::set_process_name(std::string&& value) {
  
  process_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hozon.netaos.zmqipc.em_reply.process_name)
}
inline void em_reply::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hozon.netaos.zmqipc.em_reply.process_name)
}
inline void em_reply::set_process_name(const char* value,
    size_t size) {
  
  process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hozon.netaos.zmqipc.em_reply.process_name)
}
inline std::string* em_reply::_internal_mutable_process_name() {
  
  return process_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* em_reply::release_process_name() {
  // @@protoc_insertion_point(field_release:hozon.netaos.zmqipc.em_reply.process_name)
  return process_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void em_reply::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    
  } else {
    
  }
  process_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hozon.netaos.zmqipc.em_reply.process_name)
}

// int32 state = 3;
inline void em_reply::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 em_reply::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 em_reply::state() const {
  // @@protoc_insertion_point(field_get:hozon.netaos.zmqipc.em_reply.state)
  return _internal_state();
}
inline void em_reply::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void em_reply::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:hozon.netaos.zmqipc.em_reply.state)
}

// int32 result = 4;
inline void em_reply::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 em_reply::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 em_reply::result() const {
  // @@protoc_insertion_point(field_get:hozon.netaos.zmqipc.em_reply.result)
  return _internal_result();
}
inline void em_reply::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void em_reply::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:hozon.netaos.zmqipc.em_reply.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zmqipc
}  // namespace netaos
}  // namespace hozon

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_em_2eproto
