// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sm.proto

#include "sm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_process_info_sm_2eproto;
namespace hozon {
namespace netaos {
namespace zmqipc {
class process_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<process_info> _instance;
} _process_info_default_instance_;
class sm_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sm_request> _instance;
} _sm_request_default_instance_;
class sm_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sm_reply> _instance;
} _sm_reply_default_instance_;
class cm_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cm_request> _instance;
} _cm_request_default_instance_;
class cm_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cm_reply> _instance;
} _cm_reply_default_instance_;
}  // namespace zmqipc
}  // namespace netaos
}  // namespace hozon
static void InitDefaultsscc_info_cm_reply_sm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hozon::netaos::zmqipc::_cm_reply_default_instance_;
    new (ptr) ::hozon::netaos::zmqipc::cm_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hozon::netaos::zmqipc::cm_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cm_reply_sm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cm_reply_sm_2eproto}, {}};

static void InitDefaultsscc_info_cm_request_sm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hozon::netaos::zmqipc::_cm_request_default_instance_;
    new (ptr) ::hozon::netaos::zmqipc::cm_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hozon::netaos::zmqipc::cm_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cm_request_sm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cm_request_sm_2eproto}, {}};

static void InitDefaultsscc_info_process_info_sm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hozon::netaos::zmqipc::_process_info_default_instance_;
    new (ptr) ::hozon::netaos::zmqipc::process_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hozon::netaos::zmqipc::process_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_process_info_sm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_process_info_sm_2eproto}, {}};

static void InitDefaultsscc_info_sm_reply_sm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hozon::netaos::zmqipc::_sm_reply_default_instance_;
    new (ptr) ::hozon::netaos::zmqipc::sm_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hozon::netaos::zmqipc::sm_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_sm_reply_sm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_sm_reply_sm_2eproto}, {
      &scc_info_process_info_sm_2eproto.base,}};

static void InitDefaultsscc_info_sm_request_sm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hozon::netaos::zmqipc::_sm_request_default_instance_;
    new (ptr) ::hozon::netaos::zmqipc::sm_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hozon::netaos::zmqipc::sm_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sm_request_sm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sm_request_sm_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sm_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sm_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::process_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::process_info, group_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::process_info, procname_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::process_info, procstate_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::process_info, mode_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_request, type_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_request, process_name_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_request, old_mode_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_request, new_mode_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_request, succ_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_request, extra_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_reply, type_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_reply, process_name_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_reply, curr_mode_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_reply, data_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_reply, mode_list_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::sm_reply, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::cm_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::cm_request, type_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::cm_request, process_name_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::cm_request, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::cm_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::cm_reply, type_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::cm_reply, process_name_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::cm_reply, state_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::zmqipc::cm_reply, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hozon::netaos::zmqipc::process_info)},
  { 9, -1, sizeof(::hozon::netaos::zmqipc::sm_request)},
  { 20, -1, sizeof(::hozon::netaos::zmqipc::sm_reply)},
  { 31, -1, sizeof(::hozon::netaos::zmqipc::cm_request)},
  { 39, -1, sizeof(::hozon::netaos::zmqipc::cm_reply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hozon::netaos::zmqipc::_process_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hozon::netaos::zmqipc::_sm_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hozon::netaos::zmqipc::_sm_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hozon::netaos::zmqipc::_cm_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hozon::netaos::zmqipc::_cm_reply_default_instance_),
};

const char descriptor_table_protodef_sm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010sm.proto\022\023hozon.netaos.zmqipc\"U\n\014proce"
  "ss_info\022\r\n\005group\030\001 \001(\r\022\020\n\010procname\030\002 \001(\t"
  "\022\021\n\tprocstate\030\003 \001(\r\022\021\n\tmode_name\030\004 \001(\t\"v"
  "\n\nsm_request\022\014\n\004type\030\001 \001(\r\022\024\n\014process_na"
  "me\030\002 \001(\t\022\020\n\010old_mode\030\003 \001(\t\022\020\n\010new_mode\030\004"
  " \001(\t\022\014\n\004succ\030\005 \001(\010\022\022\n\nextra_data\030\006 \001(\t\"\225"
  "\001\n\010sm_reply\022\014\n\004type\030\001 \001(\r\022\024\n\014process_nam"
  "e\030\002 \001(\t\022\021\n\tcurr_mode\030\003 \001(\t\022/\n\004data\030\004 \003(\013"
  "2!.hozon.netaos.zmqipc.process_info\022\021\n\tm"
  "ode_list\030\005 \003(\t\022\016\n\006result\030\006 \001(\005\"\?\n\ncm_req"
  "uest\022\014\n\004type\030\001 \001(\r\022\024\n\014process_name\030\002 \001(\t"
  "\022\r\n\005state\030\003 \001(\005\"M\n\010cm_reply\022\014\n\004type\030\001 \001("
  "\r\022\024\n\014process_name\030\002 \001(\t\022\r\n\005state\030\003 \001(\005\022\016"
  "\n\006result\030\004 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sm_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sm_2eproto_sccs[5] = {
  &scc_info_cm_reply_sm_2eproto.base,
  &scc_info_cm_request_sm_2eproto.base,
  &scc_info_process_info_sm_2eproto.base,
  &scc_info_sm_reply_sm_2eproto.base,
  &scc_info_sm_request_sm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sm_2eproto = {
  false, false, descriptor_table_protodef_sm_2eproto, "sm.proto", 542,
  &descriptor_table_sm_2eproto_once, descriptor_table_sm_2eproto_sccs, descriptor_table_sm_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_sm_2eproto::offsets,
  file_level_metadata_sm_2eproto, 5, file_level_enum_descriptors_sm_2eproto, file_level_service_descriptors_sm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sm_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sm_2eproto)), true);
namespace hozon {
namespace netaos {
namespace zmqipc {

// ===================================================================

void process_info::InitAsDefaultInstance() {
}
class process_info::_Internal {
 public:
};

process_info::process_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hozon.netaos.zmqipc.process_info)
}
process_info::process_info(const process_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  procname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_procname().empty()) {
    procname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_procname(),
      GetArena());
  }
  mode_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode_name().empty()) {
    mode_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mode_name(),
      GetArena());
  }
  ::memcpy(&group_, &from.group_,
    static_cast<size_t>(reinterpret_cast<char*>(&procstate_) -
    reinterpret_cast<char*>(&group_)) + sizeof(procstate_));
  // @@protoc_insertion_point(copy_constructor:hozon.netaos.zmqipc.process_info)
}

void process_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_process_info_sm_2eproto.base);
  procname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&procstate_) -
      reinterpret_cast<char*>(&group_)) + sizeof(procstate_));
}

process_info::~process_info() {
  // @@protoc_insertion_point(destructor:hozon.netaos.zmqipc.process_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void process_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  procname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void process_info::ArenaDtor(void* object) {
  process_info* _this = reinterpret_cast< process_info* >(object);
  (void)_this;
}
void process_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void process_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const process_info& process_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_process_info_sm_2eproto.base);
  return *internal_default_instance();
}


void process_info::Clear() {
// @@protoc_insertion_point(message_clear_start:hozon.netaos.zmqipc.process_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  procname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&procstate_) -
      reinterpret_cast<char*>(&group_)) + sizeof(procstate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* process_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string procname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_procname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.zmqipc.process_info.procname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 procstate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          procstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mode_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mode_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.zmqipc.process_info.mode_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* process_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hozon.netaos.zmqipc.process_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group = 1;
  if (this->group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group(), target);
  }

  // string procname = 2;
  if (this->procname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_procname().data(), static_cast<int>(this->_internal_procname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.zmqipc.process_info.procname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_procname(), target);
  }

  // uint32 procstate = 3;
  if (this->procstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_procstate(), target);
  }

  // string mode_name = 4;
  if (this->mode_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode_name().data(), static_cast<int>(this->_internal_mode_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.zmqipc.process_info.mode_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mode_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hozon.netaos.zmqipc.process_info)
  return target;
}

size_t process_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hozon.netaos.zmqipc.process_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string procname = 2;
  if (this->procname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_procname());
  }

  // string mode_name = 4;
  if (this->mode_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode_name());
  }

  // uint32 group = 1;
  if (this->group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group());
  }

  // uint32 procstate = 3;
  if (this->procstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_procstate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void process_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hozon.netaos.zmqipc.process_info)
  GOOGLE_DCHECK_NE(&from, this);
  const process_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<process_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hozon.netaos.zmqipc.process_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hozon.netaos.zmqipc.process_info)
    MergeFrom(*source);
  }
}

void process_info::MergeFrom(const process_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hozon.netaos.zmqipc.process_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.procname().size() > 0) {
    _internal_set_procname(from._internal_procname());
  }
  if (from.mode_name().size() > 0) {
    _internal_set_mode_name(from._internal_mode_name());
  }
  if (from.group() != 0) {
    _internal_set_group(from._internal_group());
  }
  if (from.procstate() != 0) {
    _internal_set_procstate(from._internal_procstate());
  }
}

void process_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hozon.netaos.zmqipc.process_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void process_info::CopyFrom(const process_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hozon.netaos.zmqipc.process_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool process_info::IsInitialized() const {
  return true;
}

void process_info::InternalSwap(process_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  procname_.Swap(&other->procname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_name_.Swap(&other->mode_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(process_info, procstate_)
      + sizeof(process_info::procstate_)
      - PROTOBUF_FIELD_OFFSET(process_info, group_)>(
          reinterpret_cast<char*>(&group_),
          reinterpret_cast<char*>(&other->group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata process_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sm_request::InitAsDefaultInstance() {
}
class sm_request::_Internal {
 public:
};

sm_request::sm_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hozon.netaos.zmqipc.sm_request)
}
sm_request::sm_request(const sm_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_process_name().empty()) {
    process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_process_name(),
      GetArena());
  }
  old_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_mode().empty()) {
    old_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_mode(),
      GetArena());
  }
  new_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_mode().empty()) {
    new_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_mode(),
      GetArena());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_extra_data(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&succ_) -
    reinterpret_cast<char*>(&type_)) + sizeof(succ_));
  // @@protoc_insertion_point(copy_constructor:hozon.netaos.zmqipc.sm_request)
}

void sm_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sm_request_sm_2eproto.base);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&succ_) -
      reinterpret_cast<char*>(&type_)) + sizeof(succ_));
}

sm_request::~sm_request() {
  // @@protoc_insertion_point(destructor:hozon.netaos.zmqipc.sm_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sm_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sm_request::ArenaDtor(void* object) {
  sm_request* _this = reinterpret_cast< sm_request* >(object);
  (void)_this;
}
void sm_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sm_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sm_request& sm_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sm_request_sm_2eproto.base);
  return *internal_default_instance();
}


void sm_request::Clear() {
// @@protoc_insertion_point(message_clear_start:hozon.netaos.zmqipc.sm_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  extra_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&succ_) -
      reinterpret_cast<char*>(&type_)) + sizeof(succ_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sm_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string process_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_process_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.zmqipc.sm_request.process_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string old_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_old_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.zmqipc.sm_request.old_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_new_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.zmqipc.sm_request.new_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool succ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          succ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string extra_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.zmqipc.sm_request.extra_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sm_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hozon.netaos.zmqipc.sm_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string process_name = 2;
  if (this->process_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process_name().data(), static_cast<int>(this->_internal_process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.zmqipc.sm_request.process_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_process_name(), target);
  }

  // string old_mode = 3;
  if (this->old_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_mode().data(), static_cast<int>(this->_internal_old_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.zmqipc.sm_request.old_mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_old_mode(), target);
  }

  // string new_mode = 4;
  if (this->new_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_mode().data(), static_cast<int>(this->_internal_new_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.zmqipc.sm_request.new_mode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_new_mode(), target);
  }

  // bool succ = 5;
  if (this->succ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_succ(), target);
  }

  // string extra_data = 6;
  if (this->extra_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra_data().data(), static_cast<int>(this->_internal_extra_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.zmqipc.sm_request.extra_data");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_extra_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hozon.netaos.zmqipc.sm_request)
  return target;
}

size_t sm_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hozon.netaos.zmqipc.sm_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string process_name = 2;
  if (this->process_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_name());
  }

  // string old_mode = 3;
  if (this->old_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_mode());
  }

  // string new_mode = 4;
  if (this->new_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_mode());
  }

  // string extra_data = 6;
  if (this->extra_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra_data());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // bool succ = 5;
  if (this->succ() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sm_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hozon.netaos.zmqipc.sm_request)
  GOOGLE_DCHECK_NE(&from, this);
  const sm_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sm_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hozon.netaos.zmqipc.sm_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hozon.netaos.zmqipc.sm_request)
    MergeFrom(*source);
  }
}

void sm_request::MergeFrom(const sm_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hozon.netaos.zmqipc.sm_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_name().size() > 0) {
    _internal_set_process_name(from._internal_process_name());
  }
  if (from.old_mode().size() > 0) {
    _internal_set_old_mode(from._internal_old_mode());
  }
  if (from.new_mode().size() > 0) {
    _internal_set_new_mode(from._internal_new_mode());
  }
  if (from.extra_data().size() > 0) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.succ() != 0) {
    _internal_set_succ(from._internal_succ());
  }
}

void sm_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hozon.netaos.zmqipc.sm_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sm_request::CopyFrom(const sm_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hozon.netaos.zmqipc.sm_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sm_request::IsInitialized() const {
  return true;
}

void sm_request::InternalSwap(sm_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_mode_.Swap(&other->old_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_mode_.Swap(&other->new_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  extra_data_.Swap(&other->extra_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sm_request, succ_)
      + sizeof(sm_request::succ_)
      - PROTOBUF_FIELD_OFFSET(sm_request, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sm_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sm_reply::InitAsDefaultInstance() {
}
class sm_reply::_Internal {
 public:
};

sm_reply::sm_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena),
  mode_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hozon.netaos.zmqipc.sm_reply)
}
sm_reply::sm_reply(const sm_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_),
      mode_list_(from.mode_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_process_name().empty()) {
    process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_process_name(),
      GetArena());
  }
  curr_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_curr_mode().empty()) {
    curr_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_curr_mode(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&type_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:hozon.netaos.zmqipc.sm_reply)
}

void sm_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sm_reply_sm_2eproto.base);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curr_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&type_)) + sizeof(result_));
}

sm_reply::~sm_reply() {
  // @@protoc_insertion_point(destructor:hozon.netaos.zmqipc.sm_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sm_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curr_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sm_reply::ArenaDtor(void* object) {
  sm_reply* _this = reinterpret_cast< sm_reply* >(object);
  (void)_this;
}
void sm_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sm_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sm_reply& sm_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sm_reply_sm_2eproto.base);
  return *internal_default_instance();
}


void sm_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:hozon.netaos.zmqipc.sm_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  mode_list_.Clear();
  process_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  curr_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&type_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sm_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string process_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_process_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.zmqipc.sm_reply.process_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string curr_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_curr_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.zmqipc.sm_reply.curr_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hozon.netaos.zmqipc.process_info data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string mode_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mode_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.zmqipc.sm_reply.mode_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sm_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hozon.netaos.zmqipc.sm_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string process_name = 2;
  if (this->process_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process_name().data(), static_cast<int>(this->_internal_process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.zmqipc.sm_reply.process_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_process_name(), target);
  }

  // string curr_mode = 3;
  if (this->curr_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_curr_mode().data(), static_cast<int>(this->_internal_curr_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.zmqipc.sm_reply.curr_mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_curr_mode(), target);
  }

  // repeated .hozon.netaos.zmqipc.process_info data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_data(i), target, stream);
  }

  // repeated string mode_list = 5;
  for (int i = 0, n = this->_internal_mode_list_size(); i < n; i++) {
    const auto& s = this->_internal_mode_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.zmqipc.sm_reply.mode_list");
    target = stream->WriteString(5, s, target);
  }

  // int32 result = 6;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hozon.netaos.zmqipc.sm_reply)
  return target;
}

size_t sm_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hozon.netaos.zmqipc.sm_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hozon.netaos.zmqipc.process_info data = 4;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string mode_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mode_list_.size());
  for (int i = 0, n = mode_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mode_list_.Get(i));
  }

  // string process_name = 2;
  if (this->process_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_name());
  }

  // string curr_mode = 3;
  if (this->curr_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_curr_mode());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // int32 result = 6;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sm_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hozon.netaos.zmqipc.sm_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const sm_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sm_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hozon.netaos.zmqipc.sm_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hozon.netaos.zmqipc.sm_reply)
    MergeFrom(*source);
  }
}

void sm_reply::MergeFrom(const sm_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hozon.netaos.zmqipc.sm_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  mode_list_.MergeFrom(from.mode_list_);
  if (from.process_name().size() > 0) {
    _internal_set_process_name(from._internal_process_name());
  }
  if (from.curr_mode().size() > 0) {
    _internal_set_curr_mode(from._internal_curr_mode());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void sm_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hozon.netaos.zmqipc.sm_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sm_reply::CopyFrom(const sm_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hozon.netaos.zmqipc.sm_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sm_reply::IsInitialized() const {
  return true;
}

void sm_reply::InternalSwap(sm_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  mode_list_.InternalSwap(&other->mode_list_);
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  curr_mode_.Swap(&other->curr_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sm_reply, result_)
      + sizeof(sm_reply::result_)
      - PROTOBUF_FIELD_OFFSET(sm_reply, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sm_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cm_request::InitAsDefaultInstance() {
}
class cm_request::_Internal {
 public:
};

cm_request::cm_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hozon.netaos.zmqipc.cm_request)
}
cm_request::cm_request(const cm_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_process_name().empty()) {
    process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_process_name(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:hozon.netaos.zmqipc.cm_request)
}

void cm_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cm_request_sm_2eproto.base);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(state_));
}

cm_request::~cm_request() {
  // @@protoc_insertion_point(destructor:hozon.netaos.zmqipc.cm_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cm_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cm_request::ArenaDtor(void* object) {
  cm_request* _this = reinterpret_cast< cm_request* >(object);
  (void)_this;
}
void cm_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cm_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cm_request& cm_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cm_request_sm_2eproto.base);
  return *internal_default_instance();
}


void cm_request::Clear() {
// @@protoc_insertion_point(message_clear_start:hozon.netaos.zmqipc.cm_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cm_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string process_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_process_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.zmqipc.cm_request.process_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cm_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hozon.netaos.zmqipc.cm_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string process_name = 2;
  if (this->process_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process_name().data(), static_cast<int>(this->_internal_process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.zmqipc.cm_request.process_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_process_name(), target);
  }

  // int32 state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hozon.netaos.zmqipc.cm_request)
  return target;
}

size_t cm_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hozon.netaos.zmqipc.cm_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string process_name = 2;
  if (this->process_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_name());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // int32 state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cm_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hozon.netaos.zmqipc.cm_request)
  GOOGLE_DCHECK_NE(&from, this);
  const cm_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cm_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hozon.netaos.zmqipc.cm_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hozon.netaos.zmqipc.cm_request)
    MergeFrom(*source);
  }
}

void cm_request::MergeFrom(const cm_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hozon.netaos.zmqipc.cm_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_name().size() > 0) {
    _internal_set_process_name(from._internal_process_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void cm_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hozon.netaos.zmqipc.cm_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cm_request::CopyFrom(const cm_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hozon.netaos.zmqipc.cm_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cm_request::IsInitialized() const {
  return true;
}

void cm_request::InternalSwap(cm_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cm_request, state_)
      + sizeof(cm_request::state_)
      - PROTOBUF_FIELD_OFFSET(cm_request, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cm_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cm_reply::InitAsDefaultInstance() {
}
class cm_reply::_Internal {
 public:
};

cm_reply::cm_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hozon.netaos.zmqipc.cm_reply)
}
cm_reply::cm_reply(const cm_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_process_name().empty()) {
    process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_process_name(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&type_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:hozon.netaos.zmqipc.cm_reply)
}

void cm_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cm_reply_sm_2eproto.base);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&type_)) + sizeof(result_));
}

cm_reply::~cm_reply() {
  // @@protoc_insertion_point(destructor:hozon.netaos.zmqipc.cm_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cm_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cm_reply::ArenaDtor(void* object) {
  cm_reply* _this = reinterpret_cast< cm_reply* >(object);
  (void)_this;
}
void cm_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cm_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cm_reply& cm_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cm_reply_sm_2eproto.base);
  return *internal_default_instance();
}


void cm_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:hozon.netaos.zmqipc.cm_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&type_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cm_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string process_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_process_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.zmqipc.cm_reply.process_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cm_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hozon.netaos.zmqipc.cm_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string process_name = 2;
  if (this->process_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process_name().data(), static_cast<int>(this->_internal_process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.zmqipc.cm_reply.process_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_process_name(), target);
  }

  // int32 state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  // int32 result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hozon.netaos.zmqipc.cm_reply)
  return target;
}

size_t cm_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hozon.netaos.zmqipc.cm_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string process_name = 2;
  if (this->process_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_name());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // int32 state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cm_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hozon.netaos.zmqipc.cm_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const cm_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cm_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hozon.netaos.zmqipc.cm_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hozon.netaos.zmqipc.cm_reply)
    MergeFrom(*source);
  }
}

void cm_reply::MergeFrom(const cm_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hozon.netaos.zmqipc.cm_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_name().size() > 0) {
    _internal_set_process_name(from._internal_process_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void cm_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hozon.netaos.zmqipc.cm_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cm_reply::CopyFrom(const cm_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hozon.netaos.zmqipc.cm_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cm_reply::IsInitialized() const {
  return true;
}

void cm_reply::InternalSwap(cm_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cm_reply, result_)
      + sizeof(cm_reply::result_)
      - PROTOBUF_FIELD_OFFSET(cm_reply, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cm_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zmqipc
}  // namespace netaos
}  // namespace hozon
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hozon::netaos::zmqipc::process_info* Arena::CreateMaybeMessage< ::hozon::netaos::zmqipc::process_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hozon::netaos::zmqipc::process_info >(arena);
}
template<> PROTOBUF_NOINLINE ::hozon::netaos::zmqipc::sm_request* Arena::CreateMaybeMessage< ::hozon::netaos::zmqipc::sm_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hozon::netaos::zmqipc::sm_request >(arena);
}
template<> PROTOBUF_NOINLINE ::hozon::netaos::zmqipc::sm_reply* Arena::CreateMaybeMessage< ::hozon::netaos::zmqipc::sm_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hozon::netaos::zmqipc::sm_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::hozon::netaos::zmqipc::cm_request* Arena::CreateMaybeMessage< ::hozon::netaos::zmqipc::cm_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hozon::netaos::zmqipc::cm_request >(arena);
}
template<> PROTOBUF_NOINLINE ::hozon::netaos::zmqipc::cm_reply* Arena::CreateMaybeMessage< ::hozon::netaos::zmqipc::cm_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hozon::netaos::zmqipc::cm_reply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
