// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diag.proto

#include "diag.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_diag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UdsDataMethod_MetaInfoEntry_DoNotUse_diag_2eproto;
class UdsDataMethod_MetaInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UdsDataMethod_MetaInfoEntry_DoNotUse> _instance;
} _UdsDataMethod_MetaInfoEntry_DoNotUse_default_instance_;
class UdsDataMethodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UdsDataMethod> _instance;
} _UdsDataMethod_default_instance_;
class UpdateStatusMethodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateStatusMethod> _instance;
} _UpdateStatusMethod_default_instance_;
class UdsRawDataReqMethodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UdsRawDataReqMethod> _instance;
} _UdsRawDataReqMethod_default_instance_;
class UdsRawDataRespMethodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UdsRawDataRespMethod> _instance;
} _UdsRawDataRespMethod_default_instance_;
static void InitDefaultsscc_info_UdsDataMethod_diag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UdsDataMethod_default_instance_;
    new (ptr) ::UdsDataMethod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UdsDataMethod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UdsDataMethod_diag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UdsDataMethod_diag_2eproto}, {
      &scc_info_UdsDataMethod_MetaInfoEntry_DoNotUse_diag_2eproto.base,}};

static void InitDefaultsscc_info_UdsDataMethod_MetaInfoEntry_DoNotUse_diag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UdsDataMethod_MetaInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::UdsDataMethod_MetaInfoEntry_DoNotUse();
  }
  ::UdsDataMethod_MetaInfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UdsDataMethod_MetaInfoEntry_DoNotUse_diag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UdsDataMethod_MetaInfoEntry_DoNotUse_diag_2eproto}, {}};

static void InitDefaultsscc_info_UdsRawDataReqMethod_diag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UdsRawDataReqMethod_default_instance_;
    new (ptr) ::UdsRawDataReqMethod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UdsRawDataReqMethod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UdsRawDataReqMethod_diag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UdsRawDataReqMethod_diag_2eproto}, {}};

static void InitDefaultsscc_info_UdsRawDataRespMethod_diag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UdsRawDataRespMethod_default_instance_;
    new (ptr) ::UdsRawDataRespMethod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UdsRawDataRespMethod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UdsRawDataRespMethod_diag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UdsRawDataRespMethod_diag_2eproto}, {}};

static void InitDefaultsscc_info_UpdateStatusMethod_diag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdateStatusMethod_default_instance_;
    new (ptr) ::UpdateStatusMethod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateStatusMethod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateStatusMethod_diag_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateStatusMethod_diag_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_diag_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_diag_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_diag_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_diag_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::UdsDataMethod_MetaInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::UdsDataMethod_MetaInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UdsDataMethod_MetaInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::UdsDataMethod_MetaInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UdsDataMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UdsDataMethod, meta_info_),
  PROTOBUF_FIELD_OFFSET(::UdsDataMethod, sid_),
  PROTOBUF_FIELD_OFFSET(::UdsDataMethod, subid_),
  PROTOBUF_FIELD_OFFSET(::UdsDataMethod, resp_ack_),
  PROTOBUF_FIELD_OFFSET(::UdsDataMethod, data_len_),
  PROTOBUF_FIELD_OFFSET(::UdsDataMethod, data_vec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateStatusMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateStatusMethod, update_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UdsRawDataReqMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UdsRawDataReqMethod, sa_),
  PROTOBUF_FIELD_OFFSET(::UdsRawDataReqMethod, ta_),
  PROTOBUF_FIELD_OFFSET(::UdsRawDataReqMethod, bus_type_),
  PROTOBUF_FIELD_OFFSET(::UdsRawDataReqMethod, data_vec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UdsRawDataRespMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UdsRawDataRespMethod, sa_),
  PROTOBUF_FIELD_OFFSET(::UdsRawDataRespMethod, ta_),
  PROTOBUF_FIELD_OFFSET(::UdsRawDataRespMethod, bus_type_),
  PROTOBUF_FIELD_OFFSET(::UdsRawDataRespMethod, result_),
  PROTOBUF_FIELD_OFFSET(::UdsRawDataRespMethod, data_vec_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::UdsDataMethod_MetaInfoEntry_DoNotUse)},
  { 9, -1, sizeof(::UdsDataMethod)},
  { 20, -1, sizeof(::UpdateStatusMethod)},
  { 26, -1, sizeof(::UdsRawDataReqMethod)},
  { 35, -1, sizeof(::UdsRawDataRespMethod)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UdsDataMethod_MetaInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UdsDataMethod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateStatusMethod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UdsRawDataReqMethod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UdsRawDataRespMethod_default_instance_),
};

const char descriptor_table_protodef_diag_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndiag.proto\"\303\001\n\rUdsDataMethod\022/\n\tmeta_i"
  "nfo\030\001 \003(\0132\034.UdsDataMethod.MetaInfoEntry\022"
  "\013\n\003sid\030\002 \001(\r\022\r\n\005subid\030\003 \001(\r\022\020\n\010resp_ack\030"
  "\004 \001(\r\022\020\n\010data_len\030\005 \001(\r\022\020\n\010data_vec\030\006 \001("
  "\014\032/\n\rMetaInfoEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"+\n\022UpdateStatusMethod\022\025\n\rupda"
  "te_status\030\001 \001(\r\"Q\n\023UdsRawDataReqMethod\022\n"
  "\n\002sa\030\001 \001(\r\022\n\n\002ta\030\002 \001(\r\022\020\n\010bus_type\030\003 \001(\r"
  "\022\020\n\010data_vec\030\004 \001(\014\"b\n\024UdsRawDataRespMeth"
  "od\022\n\n\002sa\030\001 \001(\r\022\n\n\002ta\030\002 \001(\r\022\020\n\010bus_type\030\003"
  " \001(\r\022\016\n\006result\030\004 \001(\r\022\020\n\010data_vec\030\005 \001(\014b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_diag_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_diag_2eproto_sccs[5] = {
  &scc_info_UdsDataMethod_diag_2eproto.base,
  &scc_info_UdsDataMethod_MetaInfoEntry_DoNotUse_diag_2eproto.base,
  &scc_info_UdsRawDataReqMethod_diag_2eproto.base,
  &scc_info_UdsRawDataRespMethod_diag_2eproto.base,
  &scc_info_UpdateStatusMethod_diag_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_diag_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_diag_2eproto = {
  false, false, descriptor_table_protodef_diag_2eproto, "diag.proto", 446,
  &descriptor_table_diag_2eproto_once, descriptor_table_diag_2eproto_sccs, descriptor_table_diag_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_diag_2eproto::offsets,
  file_level_metadata_diag_2eproto, 5, file_level_enum_descriptors_diag_2eproto, file_level_service_descriptors_diag_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_diag_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_diag_2eproto)), true);

// ===================================================================

UdsDataMethod_MetaInfoEntry_DoNotUse::UdsDataMethod_MetaInfoEntry_DoNotUse() {}
UdsDataMethod_MetaInfoEntry_DoNotUse::UdsDataMethod_MetaInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UdsDataMethod_MetaInfoEntry_DoNotUse::MergeFrom(const UdsDataMethod_MetaInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UdsDataMethod_MetaInfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UdsDataMethod_MetaInfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void UdsDataMethod::InitAsDefaultInstance() {
}
class UdsDataMethod::_Internal {
 public:
};

UdsDataMethod::UdsDataMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  meta_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UdsDataMethod)
}
UdsDataMethod::UdsDataMethod(const UdsDataMethod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  meta_info_.MergeFrom(from.meta_info_);
  data_vec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_vec().empty()) {
    data_vec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data_vec(),
      GetArena());
  }
  ::memcpy(&sid_, &from.sid_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_len_) -
    reinterpret_cast<char*>(&sid_)) + sizeof(data_len_));
  // @@protoc_insertion_point(copy_constructor:UdsDataMethod)
}

void UdsDataMethod::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UdsDataMethod_diag_2eproto.base);
  data_vec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_len_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(data_len_));
}

UdsDataMethod::~UdsDataMethod() {
  // @@protoc_insertion_point(destructor:UdsDataMethod)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UdsDataMethod::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_vec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UdsDataMethod::ArenaDtor(void* object) {
  UdsDataMethod* _this = reinterpret_cast< UdsDataMethod* >(object);
  (void)_this;
}
void UdsDataMethod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UdsDataMethod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UdsDataMethod& UdsDataMethod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UdsDataMethod_diag_2eproto.base);
  return *internal_default_instance();
}


void UdsDataMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:UdsDataMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meta_info_.Clear();
  data_vec_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_len_) -
      reinterpret_cast<char*>(&sid_)) + sizeof(data_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UdsDataMethod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> meta_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&meta_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 subid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          subid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 resp_ack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          resp_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_vec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_data_vec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UdsDataMethod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UdsDataMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> meta_info = 1;
  if (!this->_internal_meta_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "UdsDataMethod.MetaInfoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "UdsDataMethod.MetaInfoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_meta_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_meta_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_meta_info().begin();
          it != this->_internal_meta_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UdsDataMethod_MetaInfoEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_meta_info().begin();
          it != this->_internal_meta_info().end(); ++it) {
        target = UdsDataMethod_MetaInfoEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint32 sid = 2;
  if (this->sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sid(), target);
  }

  // uint32 subid = 3;
  if (this->subid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_subid(), target);
  }

  // uint32 resp_ack = 4;
  if (this->resp_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_resp_ack(), target);
  }

  // uint32 data_len = 5;
  if (this->data_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_len(), target);
  }

  // bytes data_vec = 6;
  if (this->data_vec().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data_vec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UdsDataMethod)
  return target;
}

size_t UdsDataMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UdsDataMethod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> meta_info = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_meta_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_meta_info().begin();
      it != this->_internal_meta_info().end(); ++it) {
    total_size += UdsDataMethod_MetaInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes data_vec = 6;
  if (this->data_vec().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_vec());
  }

  // uint32 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sid());
  }

  // uint32 subid = 3;
  if (this->subid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subid());
  }

  // uint32 resp_ack = 4;
  if (this->resp_ack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_resp_ack());
  }

  // uint32 data_len = 5;
  if (this->data_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UdsDataMethod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UdsDataMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const UdsDataMethod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UdsDataMethod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UdsDataMethod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UdsDataMethod)
    MergeFrom(*source);
  }
}

void UdsDataMethod::MergeFrom(const UdsDataMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UdsDataMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  meta_info_.MergeFrom(from.meta_info_);
  if (from.data_vec().size() > 0) {
    _internal_set_data_vec(from._internal_data_vec());
  }
  if (from.sid() != 0) {
    _internal_set_sid(from._internal_sid());
  }
  if (from.subid() != 0) {
    _internal_set_subid(from._internal_subid());
  }
  if (from.resp_ack() != 0) {
    _internal_set_resp_ack(from._internal_resp_ack());
  }
  if (from.data_len() != 0) {
    _internal_set_data_len(from._internal_data_len());
  }
}

void UdsDataMethod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UdsDataMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdsDataMethod::CopyFrom(const UdsDataMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UdsDataMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdsDataMethod::IsInitialized() const {
  return true;
}

void UdsDataMethod::InternalSwap(UdsDataMethod* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  meta_info_.Swap(&other->meta_info_);
  data_vec_.Swap(&other->data_vec_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UdsDataMethod, data_len_)
      + sizeof(UdsDataMethod::data_len_)
      - PROTOBUF_FIELD_OFFSET(UdsDataMethod, sid_)>(
          reinterpret_cast<char*>(&sid_),
          reinterpret_cast<char*>(&other->sid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UdsDataMethod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateStatusMethod::InitAsDefaultInstance() {
}
class UpdateStatusMethod::_Internal {
 public:
};

UpdateStatusMethod::UpdateStatusMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UpdateStatusMethod)
}
UpdateStatusMethod::UpdateStatusMethod(const UpdateStatusMethod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  update_status_ = from.update_status_;
  // @@protoc_insertion_point(copy_constructor:UpdateStatusMethod)
}

void UpdateStatusMethod::SharedCtor() {
  update_status_ = 0u;
}

UpdateStatusMethod::~UpdateStatusMethod() {
  // @@protoc_insertion_point(destructor:UpdateStatusMethod)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateStatusMethod::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateStatusMethod::ArenaDtor(void* object) {
  UpdateStatusMethod* _this = reinterpret_cast< UpdateStatusMethod* >(object);
  (void)_this;
}
void UpdateStatusMethod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateStatusMethod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateStatusMethod& UpdateStatusMethod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateStatusMethod_diag_2eproto.base);
  return *internal_default_instance();
}


void UpdateStatusMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateStatusMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateStatusMethod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 update_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          update_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateStatusMethod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateStatusMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 update_status = 1;
  if (this->update_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_update_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateStatusMethod)
  return target;
}

size_t UpdateStatusMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateStatusMethod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 update_status = 1;
  if (this->update_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_update_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateStatusMethod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateStatusMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateStatusMethod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateStatusMethod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateStatusMethod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateStatusMethod)
    MergeFrom(*source);
  }
}

void UpdateStatusMethod::MergeFrom(const UpdateStatusMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateStatusMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update_status() != 0) {
    _internal_set_update_status(from._internal_update_status());
  }
}

void UpdateStatusMethod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateStatusMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStatusMethod::CopyFrom(const UpdateStatusMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateStatusMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStatusMethod::IsInitialized() const {
  return true;
}

void UpdateStatusMethod::InternalSwap(UpdateStatusMethod* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(update_status_, other->update_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateStatusMethod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UdsRawDataReqMethod::InitAsDefaultInstance() {
}
class UdsRawDataReqMethod::_Internal {
 public:
};

UdsRawDataReqMethod::UdsRawDataReqMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UdsRawDataReqMethod)
}
UdsRawDataReqMethod::UdsRawDataReqMethod(const UdsRawDataReqMethod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_vec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_vec().empty()) {
    data_vec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data_vec(),
      GetArena());
  }
  ::memcpy(&sa_, &from.sa_,
    static_cast<size_t>(reinterpret_cast<char*>(&bus_type_) -
    reinterpret_cast<char*>(&sa_)) + sizeof(bus_type_));
  // @@protoc_insertion_point(copy_constructor:UdsRawDataReqMethod)
}

void UdsRawDataReqMethod::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UdsRawDataReqMethod_diag_2eproto.base);
  data_vec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_type_) -
      reinterpret_cast<char*>(&sa_)) + sizeof(bus_type_));
}

UdsRawDataReqMethod::~UdsRawDataReqMethod() {
  // @@protoc_insertion_point(destructor:UdsRawDataReqMethod)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UdsRawDataReqMethod::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_vec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UdsRawDataReqMethod::ArenaDtor(void* object) {
  UdsRawDataReqMethod* _this = reinterpret_cast< UdsRawDataReqMethod* >(object);
  (void)_this;
}
void UdsRawDataReqMethod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UdsRawDataReqMethod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UdsRawDataReqMethod& UdsRawDataReqMethod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UdsRawDataReqMethod_diag_2eproto.base);
  return *internal_default_instance();
}


void UdsRawDataReqMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:UdsRawDataReqMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_vec_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_type_) -
      reinterpret_cast<char*>(&sa_)) + sizeof(bus_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UdsRawDataReqMethod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sa = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bus_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bus_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_vec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data_vec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UdsRawDataReqMethod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UdsRawDataReqMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sa = 1;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sa(), target);
  }

  // uint32 ta = 2;
  if (this->ta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ta(), target);
  }

  // uint32 bus_type = 3;
  if (this->bus_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bus_type(), target);
  }

  // bytes data_vec = 4;
  if (this->data_vec().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data_vec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UdsRawDataReqMethod)
  return target;
}

size_t UdsRawDataReqMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UdsRawDataReqMethod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_vec = 4;
  if (this->data_vec().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_vec());
  }

  // uint32 sa = 1;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sa());
  }

  // uint32 ta = 2;
  if (this->ta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ta());
  }

  // uint32 bus_type = 3;
  if (this->bus_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bus_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UdsRawDataReqMethod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UdsRawDataReqMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const UdsRawDataReqMethod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UdsRawDataReqMethod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UdsRawDataReqMethod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UdsRawDataReqMethod)
    MergeFrom(*source);
  }
}

void UdsRawDataReqMethod::MergeFrom(const UdsRawDataReqMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UdsRawDataReqMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_vec().size() > 0) {
    _internal_set_data_vec(from._internal_data_vec());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.ta() != 0) {
    _internal_set_ta(from._internal_ta());
  }
  if (from.bus_type() != 0) {
    _internal_set_bus_type(from._internal_bus_type());
  }
}

void UdsRawDataReqMethod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UdsRawDataReqMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdsRawDataReqMethod::CopyFrom(const UdsRawDataReqMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UdsRawDataReqMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdsRawDataReqMethod::IsInitialized() const {
  return true;
}

void UdsRawDataReqMethod::InternalSwap(UdsRawDataReqMethod* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_vec_.Swap(&other->data_vec_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UdsRawDataReqMethod, bus_type_)
      + sizeof(UdsRawDataReqMethod::bus_type_)
      - PROTOBUF_FIELD_OFFSET(UdsRawDataReqMethod, sa_)>(
          reinterpret_cast<char*>(&sa_),
          reinterpret_cast<char*>(&other->sa_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UdsRawDataReqMethod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UdsRawDataRespMethod::InitAsDefaultInstance() {
}
class UdsRawDataRespMethod::_Internal {
 public:
};

UdsRawDataRespMethod::UdsRawDataRespMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UdsRawDataRespMethod)
}
UdsRawDataRespMethod::UdsRawDataRespMethod(const UdsRawDataRespMethod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_vec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_vec().empty()) {
    data_vec_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data_vec(),
      GetArena());
  }
  ::memcpy(&sa_, &from.sa_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&sa_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:UdsRawDataRespMethod)
}

void UdsRawDataRespMethod::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UdsRawDataRespMethod_diag_2eproto.base);
  data_vec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&sa_)) + sizeof(result_));
}

UdsRawDataRespMethod::~UdsRawDataRespMethod() {
  // @@protoc_insertion_point(destructor:UdsRawDataRespMethod)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UdsRawDataRespMethod::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_vec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UdsRawDataRespMethod::ArenaDtor(void* object) {
  UdsRawDataRespMethod* _this = reinterpret_cast< UdsRawDataRespMethod* >(object);
  (void)_this;
}
void UdsRawDataRespMethod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UdsRawDataRespMethod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UdsRawDataRespMethod& UdsRawDataRespMethod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UdsRawDataRespMethod_diag_2eproto.base);
  return *internal_default_instance();
}


void UdsRawDataRespMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:UdsRawDataRespMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_vec_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&sa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&sa_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UdsRawDataRespMethod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sa = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bus_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bus_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_vec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data_vec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UdsRawDataRespMethod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UdsRawDataRespMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sa = 1;
  if (this->sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sa(), target);
  }

  // uint32 ta = 2;
  if (this->ta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ta(), target);
  }

  // uint32 bus_type = 3;
  if (this->bus_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bus_type(), target);
  }

  // uint32 result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_result(), target);
  }

  // bytes data_vec = 5;
  if (this->data_vec().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data_vec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UdsRawDataRespMethod)
  return target;
}

size_t UdsRawDataRespMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UdsRawDataRespMethod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_vec = 5;
  if (this->data_vec().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_vec());
  }

  // uint32 sa = 1;
  if (this->sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sa());
  }

  // uint32 ta = 2;
  if (this->ta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ta());
  }

  // uint32 bus_type = 3;
  if (this->bus_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bus_type());
  }

  // uint32 result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UdsRawDataRespMethod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UdsRawDataRespMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const UdsRawDataRespMethod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UdsRawDataRespMethod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UdsRawDataRespMethod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UdsRawDataRespMethod)
    MergeFrom(*source);
  }
}

void UdsRawDataRespMethod::MergeFrom(const UdsRawDataRespMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UdsRawDataRespMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_vec().size() > 0) {
    _internal_set_data_vec(from._internal_data_vec());
  }
  if (from.sa() != 0) {
    _internal_set_sa(from._internal_sa());
  }
  if (from.ta() != 0) {
    _internal_set_ta(from._internal_ta());
  }
  if (from.bus_type() != 0) {
    _internal_set_bus_type(from._internal_bus_type());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void UdsRawDataRespMethod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UdsRawDataRespMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdsRawDataRespMethod::CopyFrom(const UdsRawDataRespMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UdsRawDataRespMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdsRawDataRespMethod::IsInitialized() const {
  return true;
}

void UdsRawDataRespMethod::InternalSwap(UdsRawDataRespMethod* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_vec_.Swap(&other->data_vec_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UdsRawDataRespMethod, result_)
      + sizeof(UdsRawDataRespMethod::result_)
      - PROTOBUF_FIELD_OFFSET(UdsRawDataRespMethod, sa_)>(
          reinterpret_cast<char*>(&sa_),
          reinterpret_cast<char*>(&other->sa_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UdsRawDataRespMethod::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UdsDataMethod_MetaInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::UdsDataMethod_MetaInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UdsDataMethod_MetaInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::UdsDataMethod* Arena::CreateMaybeMessage< ::UdsDataMethod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UdsDataMethod >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateStatusMethod* Arena::CreateMaybeMessage< ::UpdateStatusMethod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateStatusMethod >(arena);
}
template<> PROTOBUF_NOINLINE ::UdsRawDataReqMethod* Arena::CreateMaybeMessage< ::UdsRawDataReqMethod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UdsRawDataReqMethod >(arena);
}
template<> PROTOBUF_NOINLINE ::UdsRawDataRespMethod* Arena::CreateMaybeMessage< ::UdsRawDataRespMethod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UdsRawDataRespMethod >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
