// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BagDataType.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

// #include "BagDataType.h"
// #include "BagDataTypeTypeObject.h"
#include "bag_data_type.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>
#include "data_tools_logger.hpp"

BagDataType::BagDataType() {
    m_payload = std::make_shared<eprosima::fastrtps::rtps::SerializedPayload_t>();
    // Just to register all known types
    // registerBagDataTypeTypes();
}

BagDataType::~BagDataType() {}

BagDataType::BagDataType(const BagDataType& x) {
    // m_index = x.m_index;
    // m_message = x.m_message;
    m_payload = x.m_payload;
    CONCLE_BAG_LOG_INFO << "BagDataType::BagDataType be called1.";
}

BagDataType::BagDataType(BagDataType&& x) noexcept {
    // m_index = x.m_index;
    // m_message = std::move(x.m_message);
    m_payload = x.m_payload;
    CONCLE_BAG_LOG_ERROR << "BagDataType::operator= can't be called2.";
}

BagDataType& BagDataType::operator=(const BagDataType& x) {
    // m_index = x.m_index;
    // m_message = x.m_message;
    m_payload = x.m_payload;
    CONCLE_BAG_LOG_INFO << "BagDataType::operator= be called3.";
    return *this;
}

BagDataType& BagDataType::operator=(BagDataType&& x) noexcept {
    // m_index = x.m_index;
    // m_message = std::move(x.m_message);
    m_payload = std::move(x.m_payload);
    CONCLE_BAG_LOG_ERROR << "BagDataType::operator= can't be called4.";
    return *this;
}

bool BagDataType::operator==(const BagDataType& x) const {
    // return (m_index == x.m_index && m_message == x.m_message);
    CONCLE_BAG_LOG_ERROR << "BagDataType::operator== can't be called.";
    return false;
}

bool BagDataType::operator!=(const BagDataType& x) const {
    CONCLE_BAG_LOG_ERROR << "BagDataType::operator!= can't be called. ";
    return !(*this == x);
}

// /*!
//  * @brief This function sets a value in member index
//  * @param _index New value for member index
//  */
// void BagDataType::index(uint32_t _index) {
//     // m_index = _index;
//     std::cout << "BagDataType::index(uint32_t _index) can't be called. " << std::endl;
// }

// /*!
//  * @brief This function returns the value of member index
//  * @return Value of member index
//  */
// uint32_t BagDataType::index() const {
//     std::cout << "BagDataType::index() can't be called. " << std::endl;
//     return 0;
// }

// /*!
//  * @brief This function returns a reference to member index
//  * @return Reference to member index
//  */
// uint32_t& BagDataType::index() {
//     std::cout << "int32_t& BagDataType::index() can't be called. " << std::endl;
//     uint32_t res = 0;
//     return res;
// }

// /*!
//  * @brief This function copies the value in member message
//  * @param _message New value to be copied in member message
//  */
// void BagDataType::message(const std::string& _message) {
//     std::cout << "BagDataType::message(const std::string& _message) can't be called." << std::endl;
//     // m_message = _message;
// }

// /*!
//  * @brief This function moves the value in member message
//  * @param _message New value to be moved in member message
//  */
// void BagDataType::message(std::string&& _message) {
//     // m_message = std::move(_message);
//     std::cout << "BagDataType::message(std::string&& _message) can't be called." << std::endl;
// }

// /*!
//  * @brief This function returns a constant reference to member message
//  * @return Constant reference to member message
//  */
// const std::string& BagDataType::message() const {
//     std::cout << "std::string& BagDataType::message() can't be called." << std::endl;
//     // return m_message;
// }

// /*!
//  * @brief This function returns a reference to member message
//  * @return Reference to member message
//  */
// std::string& BagDataType::message() {
//     std::cout << "std::string& BagDataType::message() can't be called." << std::endl;
//     std::string res = "";
//     return res;
// }

// Include auxiliary functions like for serializing/deserializing.
// #include "BagDataTypeCdrAux.ipp"
