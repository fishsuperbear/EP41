/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2023. All rights reserved.
 */

#ifndef HOZON_SOC2MCU_IMPL_TYPE_HAFCAN3BUS_RX_H
#define HOZON_SOC2MCU_IMPL_TYPE_HAFCAN3BUS_RX_H
#include <cfloat>
#include <cmath>
#include "impl_type_uint8.h"
#include "impl_type_boolean.h"
#include "impl_type_float.h"
#include "impl_type_uint8_t.h"
#include "impl_type_uint16.h"

namespace hozon {
namespace soc2mcu {
struct HafCan3Bus_Rx {
    ::UInt8 ACU1_Driver_Buckle;
    ::Boolean ACU2_LatAccSensorValueV;
    ::Float ACU2_LatAccSensorValue;
    ::Boolean ACU2_VehicleDynYawRateV;
    ::Boolean ACU2_LongAccSensorValueV;
    ::Float ACU2_LongAccSensorValue;
    ::Float ACU2_VehicleDynYawRat;
    ::uint8_t BDCS1_PowerMode;
    ::Boolean BDCS1_LeftTurnLightSt;
    ::Boolean BDCS1_RightTurnLightSt;
    ::Boolean BDCS1_HazardLampSt;
    ::Boolean BDCS1_TrunkLockSts;
    ::Boolean BDCS1_HoodAjarSts;
    ::UInt8 BDCS6_FrontWiperSts;
    ::UInt8 CDCS11_FCW_OnOffSet;
    ::UInt8 CDCS11_AEB_OnOffSet;
    ::UInt8 CDCS11_FCW_WarnTiming;
    ::UInt8 CDCS5_FactoryReset;
    ::UInt8 CDCS5_ResetAllSetup;
    ::UInt8 DDCU1_FLDoorAjar;
    ::UInt8 DDCU1_RLDoorAjar;
    ::Boolean EPS1_SteeringAngleValid;
    ::Boolean EPS1_SteerAngleSpdValid;
    ::Boolean EPS1_HSTWCalibrated;
    ::Float EPS1_SteeringAngle;
    ::Float EPS1_SteerAngleSpd;
    ::Boolean EPS2_ADAS_Available;
    ::Boolean EPS1_WarningLampRed;
    ::Boolean EPS1_WarningLampYellow;
    ::Float ICU2_Odometer;
    ::Boolean IDB1_BrakePedalApplied;
    ::Boolean IDB1_BrakePedalAppliedV;
    ::UInt8 IDB1_FailedState;
    ::Float IDB2_FLWhlPulCnt;
    ::Float IDB2_FRWhlPulCnt;
    ::Float IDB3_MasterCylPressure;
    ::Boolean IDB3_MasterCylPressureInvalid;
    ::Boolean IDB3_VehicleSpdValid;
    ::Float IDB3_VehicleSpd;
    ::Boolean IDB4_FLWhlVelocityValid;
    ::Float IDB4_FLWhlVelocity;
    ::Boolean IDB4_FRWhlVelocityValid;
    ::Float IDB4_FRWhlVelocity;
    ::UInt8 IDB4_RRWhlDir;
    ::UInt8 IDB4_RLWhlDir;
    ::UInt8 IDB4_FRWhlDir;
    ::UInt8 IDB4_FLWhlDir;
    ::Boolean IDB4_RRWhlVelocityValid;
    ::Boolean IDB4_RLWhlVelocityValid;
    ::Float IDB4_RLWhlVelocity;
    ::Float IDB4_RRWhlVelocity;
    ::Float IDB4_RLWhlPulCnt;
    ::Float IDB4_RRWhlPulCnt;
    ::Boolean IDB4_RLWhlPulCntValid;
    ::Boolean IDB4_RRWhlPulCntValid;
    ::Boolean IDB5_BrakeDiscTempSts;
    ::UInt8 IDB5_VehicleStanstill;
    ::Boolean IDB5_JerkActive;
    ::Boolean IDB5_Jerkfail;
    ::UInt8 IDB5_ADAS_PrefillSts;
    ::Boolean IDB5_DBSavailable;
    ::Boolean IDB5_Prefillavailable;
    ::Boolean IDB5_ABAactive;
    ::Boolean IDB5_AEBactive;
    ::UInt8 IDB5_AEB_Enable;
    ::UInt8 IDB6_EPBStatus;
    ::UInt8 IDB6_EPBAvailable;
    ::Boolean IDB7_ESCFail;
    ::Boolean IDB7_ESCActive;
    ::Boolean IDB7_ABSActive;
    ::Boolean IDB7_EBD_Fail;
    ::Boolean IDB7_HBAActive;
    ::Boolean IDB7_HBAFail;
    ::Boolean IDB7_TCSActive;
    ::Boolean IDB7_TCSDisable;
    ::Boolean IDB7_TCSFail;
    ::Boolean IDB7_ARPACTIVE;
    ::Boolean IDB7_ARPFailure;
    ::Boolean IDB7_ABSFail;
    ::Boolean ICU1_VehicleSpdDisplayValid;
    ::Float ICU1_VehicleSpdDisplay;
    ::UInt8 VCU5_ActGear;
    ::Boolean VCU5_ActGearValid;
    ::UInt8 VCU5_PwrTrainFailureLevel;
    ::UInt8 VCU5_READYLightSts;
    ::Boolean VCU5_AccelPositionValid;
    ::UInt8 VCU5_AccelPosition;
    ::UInt8 PDCU1_FRDoorAjar;
    ::UInt8 PDCU1_RRDoorAjar;
    ::UInt16 CalendarYear;
    ::UInt8 CalendarMonth;
    ::UInt8 CalendarDay;
    ::UInt8 HourOfDay;
    ::UInt8 MinuteOfHour;
    ::UInt8 SecsOfMinute;
    ::Boolean TimeDspFmt;

    static bool IsPlane()
    {
        return true;
    }


    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun)
    {
        fun(ACU1_Driver_Buckle);
        fun(ACU2_LatAccSensorValueV);
        fun(ACU2_LatAccSensorValue);
        fun(ACU2_VehicleDynYawRateV);
        fun(ACU2_LongAccSensorValueV);
        fun(ACU2_LongAccSensorValue);
        fun(ACU2_VehicleDynYawRat);
        fun(BDCS1_PowerMode);
        fun(BDCS1_LeftTurnLightSt);
        fun(BDCS1_RightTurnLightSt);
        fun(BDCS1_HazardLampSt);
        fun(BDCS1_TrunkLockSts);
        fun(BDCS1_HoodAjarSts);
        fun(BDCS6_FrontWiperSts);
        fun(CDCS11_FCW_OnOffSet);
        fun(CDCS11_AEB_OnOffSet);
        fun(CDCS11_FCW_WarnTiming);
        fun(CDCS5_FactoryReset);
        fun(CDCS5_ResetAllSetup);
        fun(DDCU1_FLDoorAjar);
        fun(DDCU1_RLDoorAjar);
        fun(EPS1_SteeringAngleValid);
        fun(EPS1_SteerAngleSpdValid);
        fun(EPS1_HSTWCalibrated);
        fun(EPS1_SteeringAngle);
        fun(EPS1_SteerAngleSpd);
        fun(EPS2_ADAS_Available);
        fun(EPS1_WarningLampRed);
        fun(EPS1_WarningLampYellow);
        fun(ICU2_Odometer);
        fun(IDB1_BrakePedalApplied);
        fun(IDB1_BrakePedalAppliedV);
        fun(IDB1_FailedState);
        fun(IDB2_FLWhlPulCnt);
        fun(IDB2_FRWhlPulCnt);
        fun(IDB3_MasterCylPressure);
        fun(IDB3_MasterCylPressureInvalid);
        fun(IDB3_VehicleSpdValid);
        fun(IDB3_VehicleSpd);
        fun(IDB4_FLWhlVelocityValid);
        fun(IDB4_FLWhlVelocity);
        fun(IDB4_FRWhlVelocityValid);
        fun(IDB4_FRWhlVelocity);
        fun(IDB4_RRWhlDir);
        fun(IDB4_RLWhlDir);
        fun(IDB4_FRWhlDir);
        fun(IDB4_FLWhlDir);
        fun(IDB4_RRWhlVelocityValid);
        fun(IDB4_RLWhlVelocityValid);
        fun(IDB4_RLWhlVelocity);
        fun(IDB4_RRWhlVelocity);
        fun(IDB4_RLWhlPulCnt);
        fun(IDB4_RRWhlPulCnt);
        fun(IDB4_RLWhlPulCntValid);
        fun(IDB4_RRWhlPulCntValid);
        fun(IDB5_BrakeDiscTempSts);
        fun(IDB5_VehicleStanstill);
        fun(IDB5_JerkActive);
        fun(IDB5_Jerkfail);
        fun(IDB5_ADAS_PrefillSts);
        fun(IDB5_DBSavailable);
        fun(IDB5_Prefillavailable);
        fun(IDB5_ABAactive);
        fun(IDB5_AEBactive);
        fun(IDB5_AEB_Enable);
        fun(IDB6_EPBStatus);
        fun(IDB6_EPBAvailable);
        fun(IDB7_ESCFail);
        fun(IDB7_ESCActive);
        fun(IDB7_ABSActive);
        fun(IDB7_EBD_Fail);
        fun(IDB7_HBAActive);
        fun(IDB7_HBAFail);
        fun(IDB7_TCSActive);
        fun(IDB7_TCSDisable);
        fun(IDB7_TCSFail);
        fun(IDB7_ARPACTIVE);
        fun(IDB7_ARPFailure);
        fun(IDB7_ABSFail);
        fun(ICU1_VehicleSpdDisplayValid);
        fun(ICU1_VehicleSpdDisplay);
        fun(VCU5_ActGear);
        fun(VCU5_ActGearValid);
        fun(VCU5_PwrTrainFailureLevel);
        fun(VCU5_READYLightSts);
        fun(VCU5_AccelPositionValid);
        fun(VCU5_AccelPosition);
        fun(PDCU1_FRDoorAjar);
        fun(PDCU1_RRDoorAjar);
        fun(CalendarYear);
        fun(CalendarMonth);
        fun(CalendarDay);
        fun(HourOfDay);
        fun(MinuteOfHour);
        fun(SecsOfMinute);
        fun(TimeDspFmt);
    }

    template<typename F>
    void enumerate(F& fun) const
    {
        fun(ACU1_Driver_Buckle);
        fun(ACU2_LatAccSensorValueV);
        fun(ACU2_LatAccSensorValue);
        fun(ACU2_VehicleDynYawRateV);
        fun(ACU2_LongAccSensorValueV);
        fun(ACU2_LongAccSensorValue);
        fun(ACU2_VehicleDynYawRat);
        fun(BDCS1_PowerMode);
        fun(BDCS1_LeftTurnLightSt);
        fun(BDCS1_RightTurnLightSt);
        fun(BDCS1_HazardLampSt);
        fun(BDCS1_TrunkLockSts);
        fun(BDCS1_HoodAjarSts);
        fun(BDCS6_FrontWiperSts);
        fun(CDCS11_FCW_OnOffSet);
        fun(CDCS11_AEB_OnOffSet);
        fun(CDCS11_FCW_WarnTiming);
        fun(CDCS5_FactoryReset);
        fun(CDCS5_ResetAllSetup);
        fun(DDCU1_FLDoorAjar);
        fun(DDCU1_RLDoorAjar);
        fun(EPS1_SteeringAngleValid);
        fun(EPS1_SteerAngleSpdValid);
        fun(EPS1_HSTWCalibrated);
        fun(EPS1_SteeringAngle);
        fun(EPS1_SteerAngleSpd);
        fun(EPS2_ADAS_Available);
        fun(EPS1_WarningLampRed);
        fun(EPS1_WarningLampYellow);
        fun(ICU2_Odometer);
        fun(IDB1_BrakePedalApplied);
        fun(IDB1_BrakePedalAppliedV);
        fun(IDB1_FailedState);
        fun(IDB2_FLWhlPulCnt);
        fun(IDB2_FRWhlPulCnt);
        fun(IDB3_MasterCylPressure);
        fun(IDB3_MasterCylPressureInvalid);
        fun(IDB3_VehicleSpdValid);
        fun(IDB3_VehicleSpd);
        fun(IDB4_FLWhlVelocityValid);
        fun(IDB4_FLWhlVelocity);
        fun(IDB4_FRWhlVelocityValid);
        fun(IDB4_FRWhlVelocity);
        fun(IDB4_RRWhlDir);
        fun(IDB4_RLWhlDir);
        fun(IDB4_FRWhlDir);
        fun(IDB4_FLWhlDir);
        fun(IDB4_RRWhlVelocityValid);
        fun(IDB4_RLWhlVelocityValid);
        fun(IDB4_RLWhlVelocity);
        fun(IDB4_RRWhlVelocity);
        fun(IDB4_RLWhlPulCnt);
        fun(IDB4_RRWhlPulCnt);
        fun(IDB4_RLWhlPulCntValid);
        fun(IDB4_RRWhlPulCntValid);
        fun(IDB5_BrakeDiscTempSts);
        fun(IDB5_VehicleStanstill);
        fun(IDB5_JerkActive);
        fun(IDB5_Jerkfail);
        fun(IDB5_ADAS_PrefillSts);
        fun(IDB5_DBSavailable);
        fun(IDB5_Prefillavailable);
        fun(IDB5_ABAactive);
        fun(IDB5_AEBactive);
        fun(IDB5_AEB_Enable);
        fun(IDB6_EPBStatus);
        fun(IDB6_EPBAvailable);
        fun(IDB7_ESCFail);
        fun(IDB7_ESCActive);
        fun(IDB7_ABSActive);
        fun(IDB7_EBD_Fail);
        fun(IDB7_HBAActive);
        fun(IDB7_HBAFail);
        fun(IDB7_TCSActive);
        fun(IDB7_TCSDisable);
        fun(IDB7_TCSFail);
        fun(IDB7_ARPACTIVE);
        fun(IDB7_ARPFailure);
        fun(IDB7_ABSFail);
        fun(ICU1_VehicleSpdDisplayValid);
        fun(ICU1_VehicleSpdDisplay);
        fun(VCU5_ActGear);
        fun(VCU5_ActGearValid);
        fun(VCU5_PwrTrainFailureLevel);
        fun(VCU5_READYLightSts);
        fun(VCU5_AccelPositionValid);
        fun(VCU5_AccelPosition);
        fun(PDCU1_FRDoorAjar);
        fun(PDCU1_RRDoorAjar);
        fun(CalendarYear);
        fun(CalendarMonth);
        fun(CalendarDay);
        fun(HourOfDay);
        fun(MinuteOfHour);
        fun(SecsOfMinute);
        fun(TimeDspFmt);
    }

    template<typename F>
    void enumerate_internal(F& fun)
    {
        fun("ACU1_Driver_Buckle", ACU1_Driver_Buckle);
        fun("ACU2_LatAccSensorValueV", ACU2_LatAccSensorValueV);
        fun("ACU2_LatAccSensorValue", ACU2_LatAccSensorValue);
        fun("ACU2_VehicleDynYawRateV", ACU2_VehicleDynYawRateV);
        fun("ACU2_LongAccSensorValueV", ACU2_LongAccSensorValueV);
        fun("ACU2_LongAccSensorValue", ACU2_LongAccSensorValue);
        fun("ACU2_VehicleDynYawRat", ACU2_VehicleDynYawRat);
        fun("BDCS1_PowerMode", BDCS1_PowerMode);
        fun("BDCS1_LeftTurnLightSt", BDCS1_LeftTurnLightSt);
        fun("BDCS1_RightTurnLightSt", BDCS1_RightTurnLightSt);
        fun("BDCS1_HazardLampSt", BDCS1_HazardLampSt);
        fun("BDCS1_TrunkLockSts", BDCS1_TrunkLockSts);
        fun("BDCS1_HoodAjarSts", BDCS1_HoodAjarSts);
        fun("BDCS6_FrontWiperSts", BDCS6_FrontWiperSts);
        fun("CDCS11_FCW_OnOffSet", CDCS11_FCW_OnOffSet);
        fun("CDCS11_AEB_OnOffSet", CDCS11_AEB_OnOffSet);
        fun("CDCS11_FCW_WarnTiming", CDCS11_FCW_WarnTiming);
        fun("CDCS5_FactoryReset", CDCS5_FactoryReset);
        fun("CDCS5_ResetAllSetup", CDCS5_ResetAllSetup);
        fun("DDCU1_FLDoorAjar", DDCU1_FLDoorAjar);
        fun("DDCU1_RLDoorAjar", DDCU1_RLDoorAjar);
        fun("EPS1_SteeringAngleValid", EPS1_SteeringAngleValid);
        fun("EPS1_SteerAngleSpdValid", EPS1_SteerAngleSpdValid);
        fun("EPS1_HSTWCalibrated", EPS1_HSTWCalibrated);
        fun("EPS1_SteeringAngle", EPS1_SteeringAngle);
        fun("EPS1_SteerAngleSpd", EPS1_SteerAngleSpd);
        fun("EPS2_ADAS_Available", EPS2_ADAS_Available);
        fun("EPS1_WarningLampRed", EPS1_WarningLampRed);
        fun("EPS1_WarningLampYellow", EPS1_WarningLampYellow);
        fun("ICU2_Odometer", ICU2_Odometer);
        fun("IDB1_BrakePedalApplied", IDB1_BrakePedalApplied);
        fun("IDB1_BrakePedalAppliedV", IDB1_BrakePedalAppliedV);
        fun("IDB1_FailedState", IDB1_FailedState);
        fun("IDB2_FLWhlPulCnt", IDB2_FLWhlPulCnt);
        fun("IDB2_FRWhlPulCnt", IDB2_FRWhlPulCnt);
        fun("IDB3_MasterCylPressure", IDB3_MasterCylPressure);
        fun("IDB3_MasterCylPressureInvalid", IDB3_MasterCylPressureInvalid);
        fun("IDB3_VehicleSpdValid", IDB3_VehicleSpdValid);
        fun("IDB3_VehicleSpd", IDB3_VehicleSpd);
        fun("IDB4_FLWhlVelocityValid", IDB4_FLWhlVelocityValid);
        fun("IDB4_FLWhlVelocity", IDB4_FLWhlVelocity);
        fun("IDB4_FRWhlVelocityValid", IDB4_FRWhlVelocityValid);
        fun("IDB4_FRWhlVelocity", IDB4_FRWhlVelocity);
        fun("IDB4_RRWhlDir", IDB4_RRWhlDir);
        fun("IDB4_RLWhlDir", IDB4_RLWhlDir);
        fun("IDB4_FRWhlDir", IDB4_FRWhlDir);
        fun("IDB4_FLWhlDir", IDB4_FLWhlDir);
        fun("IDB4_RRWhlVelocityValid", IDB4_RRWhlVelocityValid);
        fun("IDB4_RLWhlVelocityValid", IDB4_RLWhlVelocityValid);
        fun("IDB4_RLWhlVelocity", IDB4_RLWhlVelocity);
        fun("IDB4_RRWhlVelocity", IDB4_RRWhlVelocity);
        fun("IDB4_RLWhlPulCnt", IDB4_RLWhlPulCnt);
        fun("IDB4_RRWhlPulCnt", IDB4_RRWhlPulCnt);
        fun("IDB4_RLWhlPulCntValid", IDB4_RLWhlPulCntValid);
        fun("IDB4_RRWhlPulCntValid", IDB4_RRWhlPulCntValid);
        fun("IDB5_BrakeDiscTempSts", IDB5_BrakeDiscTempSts);
        fun("IDB5_VehicleStanstill", IDB5_VehicleStanstill);
        fun("IDB5_JerkActive", IDB5_JerkActive);
        fun("IDB5_Jerkfail", IDB5_Jerkfail);
        fun("IDB5_ADAS_PrefillSts", IDB5_ADAS_PrefillSts);
        fun("IDB5_DBSavailable", IDB5_DBSavailable);
        fun("IDB5_Prefillavailable", IDB5_Prefillavailable);
        fun("IDB5_ABAactive", IDB5_ABAactive);
        fun("IDB5_AEBactive", IDB5_AEBactive);
        fun("IDB5_AEB_Enable", IDB5_AEB_Enable);
        fun("IDB6_EPBStatus", IDB6_EPBStatus);
        fun("IDB6_EPBAvailable", IDB6_EPBAvailable);
        fun("IDB7_ESCFail", IDB7_ESCFail);
        fun("IDB7_ESCActive", IDB7_ESCActive);
        fun("IDB7_ABSActive", IDB7_ABSActive);
        fun("IDB7_EBD_Fail", IDB7_EBD_Fail);
        fun("IDB7_HBAActive", IDB7_HBAActive);
        fun("IDB7_HBAFail", IDB7_HBAFail);
        fun("IDB7_TCSActive", IDB7_TCSActive);
        fun("IDB7_TCSDisable", IDB7_TCSDisable);
        fun("IDB7_TCSFail", IDB7_TCSFail);
        fun("IDB7_ARPACTIVE", IDB7_ARPACTIVE);
        fun("IDB7_ARPFailure", IDB7_ARPFailure);
        fun("IDB7_ABSFail", IDB7_ABSFail);
        fun("ICU1_VehicleSpdDisplayValid", ICU1_VehicleSpdDisplayValid);
        fun("ICU1_VehicleSpdDisplay", ICU1_VehicleSpdDisplay);
        fun("VCU5_ActGear", VCU5_ActGear);
        fun("VCU5_ActGearValid", VCU5_ActGearValid);
        fun("VCU5_PwrTrainFailureLevel", VCU5_PwrTrainFailureLevel);
        fun("VCU5_READYLightSts", VCU5_READYLightSts);
        fun("VCU5_AccelPositionValid", VCU5_AccelPositionValid);
        fun("VCU5_AccelPosition", VCU5_AccelPosition);
        fun("PDCU1_FRDoorAjar", PDCU1_FRDoorAjar);
        fun("PDCU1_RRDoorAjar", PDCU1_RRDoorAjar);
        fun("CalendarYear", CalendarYear);
        fun("CalendarMonth", CalendarMonth);
        fun("CalendarDay", CalendarDay);
        fun("HourOfDay", HourOfDay);
        fun("MinuteOfHour", MinuteOfHour);
        fun("SecsOfMinute", SecsOfMinute);
        fun("TimeDspFmt", TimeDspFmt);
    }

    template<typename F>
    void enumerate_internal(F& fun) const
    {
        fun("ACU1_Driver_Buckle", ACU1_Driver_Buckle);
        fun("ACU2_LatAccSensorValueV", ACU2_LatAccSensorValueV);
        fun("ACU2_LatAccSensorValue", ACU2_LatAccSensorValue);
        fun("ACU2_VehicleDynYawRateV", ACU2_VehicleDynYawRateV);
        fun("ACU2_LongAccSensorValueV", ACU2_LongAccSensorValueV);
        fun("ACU2_LongAccSensorValue", ACU2_LongAccSensorValue);
        fun("ACU2_VehicleDynYawRat", ACU2_VehicleDynYawRat);
        fun("BDCS1_PowerMode", BDCS1_PowerMode);
        fun("BDCS1_LeftTurnLightSt", BDCS1_LeftTurnLightSt);
        fun("BDCS1_RightTurnLightSt", BDCS1_RightTurnLightSt);
        fun("BDCS1_HazardLampSt", BDCS1_HazardLampSt);
        fun("BDCS1_TrunkLockSts", BDCS1_TrunkLockSts);
        fun("BDCS1_HoodAjarSts", BDCS1_HoodAjarSts);
        fun("BDCS6_FrontWiperSts", BDCS6_FrontWiperSts);
        fun("CDCS11_FCW_OnOffSet", CDCS11_FCW_OnOffSet);
        fun("CDCS11_AEB_OnOffSet", CDCS11_AEB_OnOffSet);
        fun("CDCS11_FCW_WarnTiming", CDCS11_FCW_WarnTiming);
        fun("CDCS5_FactoryReset", CDCS5_FactoryReset);
        fun("CDCS5_ResetAllSetup", CDCS5_ResetAllSetup);
        fun("DDCU1_FLDoorAjar", DDCU1_FLDoorAjar);
        fun("DDCU1_RLDoorAjar", DDCU1_RLDoorAjar);
        fun("EPS1_SteeringAngleValid", EPS1_SteeringAngleValid);
        fun("EPS1_SteerAngleSpdValid", EPS1_SteerAngleSpdValid);
        fun("EPS1_HSTWCalibrated", EPS1_HSTWCalibrated);
        fun("EPS1_SteeringAngle", EPS1_SteeringAngle);
        fun("EPS1_SteerAngleSpd", EPS1_SteerAngleSpd);
        fun("EPS2_ADAS_Available", EPS2_ADAS_Available);
        fun("EPS1_WarningLampRed", EPS1_WarningLampRed);
        fun("EPS1_WarningLampYellow", EPS1_WarningLampYellow);
        fun("ICU2_Odometer", ICU2_Odometer);
        fun("IDB1_BrakePedalApplied", IDB1_BrakePedalApplied);
        fun("IDB1_BrakePedalAppliedV", IDB1_BrakePedalAppliedV);
        fun("IDB1_FailedState", IDB1_FailedState);
        fun("IDB2_FLWhlPulCnt", IDB2_FLWhlPulCnt);
        fun("IDB2_FRWhlPulCnt", IDB2_FRWhlPulCnt);
        fun("IDB3_MasterCylPressure", IDB3_MasterCylPressure);
        fun("IDB3_MasterCylPressureInvalid", IDB3_MasterCylPressureInvalid);
        fun("IDB3_VehicleSpdValid", IDB3_VehicleSpdValid);
        fun("IDB3_VehicleSpd", IDB3_VehicleSpd);
        fun("IDB4_FLWhlVelocityValid", IDB4_FLWhlVelocityValid);
        fun("IDB4_FLWhlVelocity", IDB4_FLWhlVelocity);
        fun("IDB4_FRWhlVelocityValid", IDB4_FRWhlVelocityValid);
        fun("IDB4_FRWhlVelocity", IDB4_FRWhlVelocity);
        fun("IDB4_RRWhlDir", IDB4_RRWhlDir);
        fun("IDB4_RLWhlDir", IDB4_RLWhlDir);
        fun("IDB4_FRWhlDir", IDB4_FRWhlDir);
        fun("IDB4_FLWhlDir", IDB4_FLWhlDir);
        fun("IDB4_RRWhlVelocityValid", IDB4_RRWhlVelocityValid);
        fun("IDB4_RLWhlVelocityValid", IDB4_RLWhlVelocityValid);
        fun("IDB4_RLWhlVelocity", IDB4_RLWhlVelocity);
        fun("IDB4_RRWhlVelocity", IDB4_RRWhlVelocity);
        fun("IDB4_RLWhlPulCnt", IDB4_RLWhlPulCnt);
        fun("IDB4_RRWhlPulCnt", IDB4_RRWhlPulCnt);
        fun("IDB4_RLWhlPulCntValid", IDB4_RLWhlPulCntValid);
        fun("IDB4_RRWhlPulCntValid", IDB4_RRWhlPulCntValid);
        fun("IDB5_BrakeDiscTempSts", IDB5_BrakeDiscTempSts);
        fun("IDB5_VehicleStanstill", IDB5_VehicleStanstill);
        fun("IDB5_JerkActive", IDB5_JerkActive);
        fun("IDB5_Jerkfail", IDB5_Jerkfail);
        fun("IDB5_ADAS_PrefillSts", IDB5_ADAS_PrefillSts);
        fun("IDB5_DBSavailable", IDB5_DBSavailable);
        fun("IDB5_Prefillavailable", IDB5_Prefillavailable);
        fun("IDB5_ABAactive", IDB5_ABAactive);
        fun("IDB5_AEBactive", IDB5_AEBactive);
        fun("IDB5_AEB_Enable", IDB5_AEB_Enable);
        fun("IDB6_EPBStatus", IDB6_EPBStatus);
        fun("IDB6_EPBAvailable", IDB6_EPBAvailable);
        fun("IDB7_ESCFail", IDB7_ESCFail);
        fun("IDB7_ESCActive", IDB7_ESCActive);
        fun("IDB7_ABSActive", IDB7_ABSActive);
        fun("IDB7_EBD_Fail", IDB7_EBD_Fail);
        fun("IDB7_HBAActive", IDB7_HBAActive);
        fun("IDB7_HBAFail", IDB7_HBAFail);
        fun("IDB7_TCSActive", IDB7_TCSActive);
        fun("IDB7_TCSDisable", IDB7_TCSDisable);
        fun("IDB7_TCSFail", IDB7_TCSFail);
        fun("IDB7_ARPACTIVE", IDB7_ARPACTIVE);
        fun("IDB7_ARPFailure", IDB7_ARPFailure);
        fun("IDB7_ABSFail", IDB7_ABSFail);
        fun("ICU1_VehicleSpdDisplayValid", ICU1_VehicleSpdDisplayValid);
        fun("ICU1_VehicleSpdDisplay", ICU1_VehicleSpdDisplay);
        fun("VCU5_ActGear", VCU5_ActGear);
        fun("VCU5_ActGearValid", VCU5_ActGearValid);
        fun("VCU5_PwrTrainFailureLevel", VCU5_PwrTrainFailureLevel);
        fun("VCU5_READYLightSts", VCU5_READYLightSts);
        fun("VCU5_AccelPositionValid", VCU5_AccelPositionValid);
        fun("VCU5_AccelPosition", VCU5_AccelPosition);
        fun("PDCU1_FRDoorAjar", PDCU1_FRDoorAjar);
        fun("PDCU1_RRDoorAjar", PDCU1_RRDoorAjar);
        fun("CalendarYear", CalendarYear);
        fun("CalendarMonth", CalendarMonth);
        fun("CalendarDay", CalendarDay);
        fun("HourOfDay", HourOfDay);
        fun("MinuteOfHour", MinuteOfHour);
        fun("SecsOfMinute", SecsOfMinute);
        fun("TimeDspFmt", TimeDspFmt);
    }

    bool operator==(const ::hozon::soc2mcu::HafCan3Bus_Rx& t) const
    {
        return (ACU1_Driver_Buckle == t.ACU1_Driver_Buckle) && (ACU2_LatAccSensorValueV == t.ACU2_LatAccSensorValueV) && (fabs(static_cast<double>(ACU2_LatAccSensorValue - t.ACU2_LatAccSensorValue)) < DBL_EPSILON) && (ACU2_VehicleDynYawRateV == t.ACU2_VehicleDynYawRateV) && (ACU2_LongAccSensorValueV == t.ACU2_LongAccSensorValueV) && (fabs(static_cast<double>(ACU2_LongAccSensorValue - t.ACU2_LongAccSensorValue)) < DBL_EPSILON) && (fabs(static_cast<double>(ACU2_VehicleDynYawRat - t.ACU2_VehicleDynYawRat)) < DBL_EPSILON) && (BDCS1_PowerMode == t.BDCS1_PowerMode) && (BDCS1_LeftTurnLightSt == t.BDCS1_LeftTurnLightSt) && (BDCS1_RightTurnLightSt == t.BDCS1_RightTurnLightSt) && (BDCS1_HazardLampSt == t.BDCS1_HazardLampSt) && (BDCS1_TrunkLockSts == t.BDCS1_TrunkLockSts) && (BDCS1_HoodAjarSts == t.BDCS1_HoodAjarSts) && (BDCS6_FrontWiperSts == t.BDCS6_FrontWiperSts) && (CDCS11_FCW_OnOffSet == t.CDCS11_FCW_OnOffSet) && (CDCS11_AEB_OnOffSet == t.CDCS11_AEB_OnOffSet) && (CDCS11_FCW_WarnTiming == t.CDCS11_FCW_WarnTiming) && (CDCS5_FactoryReset == t.CDCS5_FactoryReset) && (CDCS5_ResetAllSetup == t.CDCS5_ResetAllSetup) && (DDCU1_FLDoorAjar == t.DDCU1_FLDoorAjar) && (DDCU1_RLDoorAjar == t.DDCU1_RLDoorAjar) && (EPS1_SteeringAngleValid == t.EPS1_SteeringAngleValid) && (EPS1_SteerAngleSpdValid == t.EPS1_SteerAngleSpdValid) && (EPS1_HSTWCalibrated == t.EPS1_HSTWCalibrated) && (fabs(static_cast<double>(EPS1_SteeringAngle - t.EPS1_SteeringAngle)) < DBL_EPSILON) && (fabs(static_cast<double>(EPS1_SteerAngleSpd - t.EPS1_SteerAngleSpd)) < DBL_EPSILON) && (EPS2_ADAS_Available == t.EPS2_ADAS_Available) && (EPS1_WarningLampRed == t.EPS1_WarningLampRed) && (EPS1_WarningLampYellow == t.EPS1_WarningLampYellow) && (fabs(static_cast<double>(ICU2_Odometer - t.ICU2_Odometer)) < DBL_EPSILON) && (IDB1_BrakePedalApplied == t.IDB1_BrakePedalApplied) && (IDB1_BrakePedalAppliedV == t.IDB1_BrakePedalAppliedV) && (IDB1_FailedState == t.IDB1_FailedState) && (fabs(static_cast<double>(IDB2_FLWhlPulCnt - t.IDB2_FLWhlPulCnt)) < DBL_EPSILON) && (fabs(static_cast<double>(IDB2_FRWhlPulCnt - t.IDB2_FRWhlPulCnt)) < DBL_EPSILON) && (fabs(static_cast<double>(IDB3_MasterCylPressure - t.IDB3_MasterCylPressure)) < DBL_EPSILON) && (IDB3_MasterCylPressureInvalid == t.IDB3_MasterCylPressureInvalid) && (IDB3_VehicleSpdValid == t.IDB3_VehicleSpdValid) && (fabs(static_cast<double>(IDB3_VehicleSpd - t.IDB3_VehicleSpd)) < DBL_EPSILON) && (IDB4_FLWhlVelocityValid == t.IDB4_FLWhlVelocityValid) && (fabs(static_cast<double>(IDB4_FLWhlVelocity - t.IDB4_FLWhlVelocity)) < DBL_EPSILON) && (IDB4_FRWhlVelocityValid == t.IDB4_FRWhlVelocityValid) && (fabs(static_cast<double>(IDB4_FRWhlVelocity - t.IDB4_FRWhlVelocity)) < DBL_EPSILON) && (IDB4_RRWhlDir == t.IDB4_RRWhlDir) && (IDB4_RLWhlDir == t.IDB4_RLWhlDir) && (IDB4_FRWhlDir == t.IDB4_FRWhlDir) && (IDB4_FLWhlDir == t.IDB4_FLWhlDir) && (IDB4_RRWhlVelocityValid == t.IDB4_RRWhlVelocityValid) && (IDB4_RLWhlVelocityValid == t.IDB4_RLWhlVelocityValid) && (fabs(static_cast<double>(IDB4_RLWhlVelocity - t.IDB4_RLWhlVelocity)) < DBL_EPSILON) && (fabs(static_cast<double>(IDB4_RRWhlVelocity - t.IDB4_RRWhlVelocity)) < DBL_EPSILON) && (fabs(static_cast<double>(IDB4_RLWhlPulCnt - t.IDB4_RLWhlPulCnt)) < DBL_EPSILON) && (fabs(static_cast<double>(IDB4_RRWhlPulCnt - t.IDB4_RRWhlPulCnt)) < DBL_EPSILON) && (IDB4_RLWhlPulCntValid == t.IDB4_RLWhlPulCntValid) && (IDB4_RRWhlPulCntValid == t.IDB4_RRWhlPulCntValid) && (IDB5_BrakeDiscTempSts == t.IDB5_BrakeDiscTempSts) && (IDB5_VehicleStanstill == t.IDB5_VehicleStanstill) && (IDB5_JerkActive == t.IDB5_JerkActive) && (IDB5_Jerkfail == t.IDB5_Jerkfail) && (IDB5_ADAS_PrefillSts == t.IDB5_ADAS_PrefillSts) && (IDB5_DBSavailable == t.IDB5_DBSavailable) && (IDB5_Prefillavailable == t.IDB5_Prefillavailable) && (IDB5_ABAactive == t.IDB5_ABAactive) && (IDB5_AEBactive == t.IDB5_AEBactive) && (IDB5_AEB_Enable == t.IDB5_AEB_Enable) && (IDB6_EPBStatus == t.IDB6_EPBStatus) && (IDB6_EPBAvailable == t.IDB6_EPBAvailable) && (IDB7_ESCFail == t.IDB7_ESCFail) && (IDB7_ESCActive == t.IDB7_ESCActive) && (IDB7_ABSActive == t.IDB7_ABSActive) && (IDB7_EBD_Fail == t.IDB7_EBD_Fail) && (IDB7_HBAActive == t.IDB7_HBAActive) && (IDB7_HBAFail == t.IDB7_HBAFail) && (IDB7_TCSActive == t.IDB7_TCSActive) && (IDB7_TCSDisable == t.IDB7_TCSDisable) && (IDB7_TCSFail == t.IDB7_TCSFail) && (IDB7_ARPACTIVE == t.IDB7_ARPACTIVE) && (IDB7_ARPFailure == t.IDB7_ARPFailure) && (IDB7_ABSFail == t.IDB7_ABSFail) && (ICU1_VehicleSpdDisplayValid == t.ICU1_VehicleSpdDisplayValid) && (fabs(static_cast<double>(ICU1_VehicleSpdDisplay - t.ICU1_VehicleSpdDisplay)) < DBL_EPSILON) && (VCU5_ActGear == t.VCU5_ActGear) && (VCU5_ActGearValid == t.VCU5_ActGearValid) && (VCU5_PwrTrainFailureLevel == t.VCU5_PwrTrainFailureLevel) && (VCU5_READYLightSts == t.VCU5_READYLightSts) && (VCU5_AccelPositionValid == t.VCU5_AccelPositionValid) && (VCU5_AccelPosition == t.VCU5_AccelPosition) && (PDCU1_FRDoorAjar == t.PDCU1_FRDoorAjar) && (PDCU1_RRDoorAjar == t.PDCU1_RRDoorAjar) && (CalendarYear == t.CalendarYear) && (CalendarMonth == t.CalendarMonth) && (CalendarDay == t.CalendarDay) && (HourOfDay == t.HourOfDay) && (MinuteOfHour == t.MinuteOfHour) && (SecsOfMinute == t.SecsOfMinute) && (TimeDspFmt == t.TimeDspFmt);
    }
};
} // namespace soc2mcu
} // namespace hozon


#endif // HOZON_SOC2MCU_IMPL_TYPE_HAFCAN3BUS_RX_H
