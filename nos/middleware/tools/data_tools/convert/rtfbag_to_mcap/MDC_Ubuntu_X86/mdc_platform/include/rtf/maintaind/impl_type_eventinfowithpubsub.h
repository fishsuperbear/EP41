/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef RTF_MAINTAIND_IMPL_TYPE_EVENTINFOWITHPUBSUB_H
#define RTF_MAINTAIND_IMPL_TYPE_EVENTINFOWITHPUBSUB_H
#include "rtf/maintaind/impl_type_eventregisterinfo.h"
#include "rtf/stdtype/impl_type_boolean.h"
#include "rtf/basetype/impl_type_vectorstring.h"
#include "rtf/stdtype/impl_type_string.h"

namespace rtf {
namespace maintaind {
struct EventInfoWithPubSub {
    ::rtf::maintaind::EventRegisterInfo eventInfo_;
    ::rtf::basetype::VectorString subs_;
    ::rtf::stdtype::String pub_;
    ::rtf::stdtype::boolean pubOnLine_;
    static bool IsPlane() noexcept
    {
        return false;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun) noexcept
    {
        fun(eventInfo_);
        fun(subs_);
        fun(pub_);
        fun(pubOnLine_);
    }

    template<typename F>
    void enumerate(F& fun) const noexcept
    {
        fun(eventInfo_);
        fun(subs_);
        fun(pub_);
        fun(pubOnLine_);
    }

    bool operator == (const ::rtf::maintaind::EventInfoWithPubSub& t) const noexcept
    {
        return (eventInfo_ == t.eventInfo_) && (subs_ == t.subs_) && (pub_ == t.pub_) && (pubOnLine_ == t.pubOnLine_);
    }
};
} // namespace maintaind
} // namespace rtf


#endif // RTF_MAINTAIND_IMPL_TYPE_EVENTINFOWITHPUBSUB_H
