/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2021. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef RTF_MAINTAIND_IMPL_TYPE_LATENCYINDEX_H
#define RTF_MAINTAIND_IMPL_TYPE_LATENCYINDEX_H
#include "rtf/maintaind/latency/impl_type_latencydriver.h"
#include "rtf/stdtype/impl_type_uint16_t.h"
#include "rtf/stdtype/impl_type_string.h"

namespace rtf {
namespace maintaind {
struct LatencyIndex {
    ::rtf::maintaind::LatencyDriver driverVec_;
    ::rtf::stdtype::uint16_t serviceId_ = 0U;
    ::rtf::stdtype::uint16_t instanceId_ = 0U;
    ::rtf::stdtype::String topicName_;
    ::rtf::stdtype::uint16_t eventId_ = 0U;

    static bool IsPlane() noexcept
    {
        return false;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun) noexcept
    {
        fun(driverVec_);
        fun(serviceId_);
        fun(instanceId_);
        fun(topicName_);
        fun(eventId_);
    }

    template<typename F>
    void enumerate(F& fun) const noexcept
    {
        fun(driverVec_);
        fun(serviceId_);
        fun(instanceId_);
        fun(topicName_);
        fun(eventId_);
    }

    bool operator == (const ::rtf::maintaind::LatencyIndex& t) const noexcept
    {
        return (driverVec_ == t.driverVec_) && (serviceId_ == t.serviceId_) && (instanceId_ == t.instanceId_) &&
            (topicName_ == t.topicName_) && (eventId_ == t.eventId_);
    }
};
} // namespace maintaind
} // namespace rtf


#endif // RTF_MAINTAIND_IMPL_TYPE_LATENCYINDEX_H
