/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef RTF_MAINTAIND_IMPL_TYPE_DDSEVENTINFO_H
#define RTF_MAINTAIND_IMPL_TYPE_DDSEVENTINFO_H
#include "rtf/maintaind/dds/impl_type_vectortransportqos.h"
#include "rtf/stdtype/impl_type_string.h"
#include "rtf/stdtype/impl_type_uint32_t.h"
#include "rtf/maintaind/dds/impl_type_durabilityqos.h"
#include "rtf/stdtype/impl_type_uint16_t.h"
#include "rtf/maintaind/dds/impl_type_historyqos.h"
#include "rtf/maintaind/impl_type_ddsattributemap.h"
#include "rtf/maintaind/dds/impl_type_schedulemode.h"
#include "rtf/maintaind/e2e/impl_type_e2econfiginfo.h"
#include "rtf/maintaind/dds/impl_type_reliabilitykind.h"
#include "rtf/stdtype/impl_type_boolean.h"

namespace rtf {
namespace maintaind {
struct DDSEventInfo {
    ::rtf::stdtype::uint16_t serviceId_;
    ::rtf::stdtype::uint16_t instanceId_;
    ::rtf::stdtype::uint16_t domainId_;
    ::rtf::stdtype::String topicName_;
    ::rtf::stdtype::String qosProfile_;
    ::rtf::stdtype::uint32_t entityId_;
    ::rtf::stdtype::uint32_t historyDepth_;
    ::rtf::maintaind::DurabilityQos durabilityQos_;
    ::rtf::maintaind::HistoryQos historyQos_;
    ::rtf::maintaind::VectorTransportQos transportQos_;
    ::rtf::stdtype::uint32_t fragSize_;
    ::rtf::stdtype::uint32_t listSize_;
    ::rtf::stdtype::String instanceShortName_;
    ::rtf::maintaind::DDSAttributeMap attribute_;
    ::rtf::maintaind::ScheduleMode scheduleMode_;
    ::rtf::maintaind::E2EConfigInfo e2eConfig_;
    ::rtf::maintaind::ReliabilityKind reliabilityKind_;
    ::rtf::stdtype::boolean enableDirectProcess_;
    static bool IsPlane() noexcept { return false; }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun) noexcept
    {
        fun(serviceId_);
        fun(instanceId_);
        fun(domainId_);
        fun(topicName_);
        fun(qosProfile_);
        fun(entityId_);
        fun(historyDepth_);
        fun(durabilityQos_);
        fun(historyQos_);
        fun(transportQos_);
        fun(fragSize_);
        fun(listSize_);
        fun(instanceShortName_);
        fun(attribute_);
        fun(scheduleMode_);
        fun(e2eConfig_);
        fun(reliabilityKind_);
        fun(enableDirectProcess_);
    }

    bool operator == (const ::rtf::maintaind::DDSEventInfo& t) const noexcept
    {
        return (serviceId_ == t.serviceId_) && (instanceId_ == t.instanceId_) && (domainId_ == t.domainId_) &&
        (topicName_ == t.topicName_) && (qosProfile_ == t.qosProfile_) && (entityId_ == t.entityId_) &&
        (historyDepth_ == t.historyDepth_) && (durabilityQos_ == t.durabilityQos_) && (historyQos_ == t.historyQos_) &&
        (transportQos_ == t.transportQos_) && (fragSize_ == t.fragSize_) && (listSize_ == t.listSize_) &&
        (instanceShortName_ == t.instanceShortName_) && (attribute_ == t.attribute_) &&
        (scheduleMode_ == t.scheduleMode_) && (e2eConfig_ == t.e2eConfig_) &&
        (reliabilityKind_ == t.reliabilityKind_) && (enableDirectProcess_ == t.enableDirectProcess_);
    }
};
} // namespace maintaind
} // namespace rtf


#endif // RTF_MAINTAIND_IMPL_TYPE_DDSEVENTINFO_H
