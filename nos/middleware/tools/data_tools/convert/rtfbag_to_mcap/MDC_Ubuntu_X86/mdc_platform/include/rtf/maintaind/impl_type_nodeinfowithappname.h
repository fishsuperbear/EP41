/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef RTF_MAINTAIND_IMPL_TYPE_NODEINFOWITHAPPNAME_H
#define RTF_MAINTAIND_IMPL_TYPE_NODEINFOWITHAPPNAME_H
#include "rtf/stdtype/impl_type_int32_t.h"
#include "rtf/basetype/impl_type_vectorstring.h"

namespace rtf {
namespace maintaind {
struct NodeInfoWithAppName {
    ::rtf::basetype::VectorString serviceInstanceList_;
    ::rtf::basetype::VectorString eventPubList_;
    ::rtf::basetype::VectorString eventSubList_;
    ::rtf::basetype::VectorString methodList_;
    ::rtf::basetype::VectorString fieldList_;
    ::rtf::stdtype::int32_t pidNumber_;
    static bool IsPlane() noexcept
    {
        return false;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun) noexcept
    {
        fun(serviceInstanceList_);
        fun(eventPubList_);
        fun(eventSubList_);
        fun(methodList_);
        fun(fieldList_);
        fun(pidNumber_);
    }

    template<typename F>
    void enumerate(F& fun) const noexcept
    {
        fun(serviceInstanceList_);
        fun(eventPubList_);
        fun(eventSubList_);
        fun(methodList_);
        fun(fieldList_);
        fun(pidNumber_);
    }

    bool operator == (const ::rtf::maintaind::NodeInfoWithAppName& t) const noexcept
    {
        return (serviceInstanceList_ == t.serviceInstanceList_) && (eventPubList_ == t.eventPubList_) &&
        (eventSubList_ == t.eventSubList_) && (methodList_ == t.methodList_) && (fieldList_ == t.fieldList_) &&
        (pidNumber_ == t.pidNumber_);
    }
};
} // namespace maintaind
} // namespace rtf


#endif // RTF_MAINTAIND_IMPL_TYPE_NODEINFOWITHAPPNAME_H
