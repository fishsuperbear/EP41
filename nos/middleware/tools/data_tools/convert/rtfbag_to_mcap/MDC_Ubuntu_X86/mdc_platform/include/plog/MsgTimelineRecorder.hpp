/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 * Description: A recorder class used to record the timestamp of each stage
 */

#ifndef PLOG_MSGTIMELINERECORDER_HPP
#define PLOG_MSGTIMELINERECORDER_HPP

#include <memory>
#include <ctime>

#include "PLogDefsAndLimits.hpp"
#include "ProfileLogWriter.hpp"
#include "cPlog.h"


namespace rbs {
namespace plog {
class MsgTimelineRecorderImpl;

/**
 * A class to record the life timestamp of a msg, the relationships between the
 * records of one message in defferent moudle are like this:
 * @example
 * seq | Moudle   | MsgUID* | RelatedID | RelatedMoudle |   User GUID
 * ----+---------------+---------------+--------+-----------------------
 * 1   | CM_SEND  |   123   |    ---    |      ---      |      ---
 * 2   | DDS_SEND |   234   |    123    |    CM_SEND    | "DDS-GUID-123"
 * 3   | DDS_RECV |   345   |    ---    |      ---      | "DDS-GUID-123"
 * 4   | CM_RECV  |   456   |    345    |  SOMEIP_RECV  |      ---
 * @note *the msgUid is generated by the lib
 */
class MsgTimelineRecorder {
public:
    explicit MsgTimelineRecorder(std::unique_ptr<MsgTimelineRecorderImpl> impl);

    /**
     * @brief Record the msg uid relation
     * @param relatedMsgUid the related MsgUid, which is got by another moudle's recorder, calling GetMsgUid()
     * @param relatedMoudle the moudle that the uid is from
     * @return if success. return PlogReturnValue::OK
     */
    PlogReturnValue RecordRelatedMsgUid(PlogUid relatedMsgUid, MoudleID relatedMoudle);

    /**
     * @brief Record the user's msg guid, this is for the connection between different processes
     * @param userGuidRawData the guid, you can input by std::move,
     * the size shoudld <= USER_GUID_LEN_MAX, otherwise will be cut
     * @return if success. return PlogReturnValue::OK
     */
    PlogReturnValue RecordUserGuid(const rbs::plog::UserRawDataType& userGuidRawData);

    PlogReturnValue RecordUserGuidRaw(const char* cStr, size_t strLen);

    /**
     * @brief record the time at the stage
     * @param atStage the stage ID of the stage, the name of each stage is set
     * at the initialization of moudle's related log writer @see ProfileLogWriter::Init
     * @param timeStamp the time stamp in ns, which can be got
     * from clock_gettime(CLOCK_REALTIME, &t) @see ConvertSysTime2NsecU64()
     * @note or you can just input input rbs::plog::TIMESTAMP_CURRENT to let the lib calculated for you
     * @param userDefinedData the user defined data, it can be anything, but the
     * len should be <= USER_DEFINED_DATA_LEN_MAX
     * @return if success. return PlogReturnValue::OK
     */
    PlogReturnValue RecordTimeLine(StageID atStage, UnifiedTimestamp timeStamp, UserRawDataType userDefinedData);

    /**
     * @brief A faster version if you don't input userDefinedData
     * @see RecordTimeLine(StageID atStage, uint64_t timeStamp, UserRawDataType userDefinedData)
     */
    PlogReturnValue RecordTimeLine(StageID atStage, UnifiedTimestamp timeStamp);

    /**
     * @brief convert the sys time struct to u64 representing u64
     * @param sysTime got from 'clock_gettime(CLOCK_REALTIME, &t)'
     * @return
     */
    static inline UnifiedTimestamp ConvertSysTime2NsecU64(const struct timespec& sysTime)
    {
        /** convert the sys time to nsecs */
        return sysTime.tv_nsec + sysTime.tv_sec * 1'000'000'000UL;
    }

    /**
     * @return A uint64 timestamp in nanosecond, All timestamp shall be required from here
     * @details for ARM, this is obtained from ASM code, not from clock_gettime
     */
    static UnifiedTimestamp GetUnifiedPlogTimeStamp();

    /**
     * @brief get a uid of the record, for each process and each moudle, this id is unique
     * @return the uid of the record, if not vaild PLOG_UID_MAX is returned
     */
    PlogUid GetMsgUid() const;

    bool IsValid() const;

    MsgTimelineRecorder(const MsgTimelineRecorder&) = delete;
    MsgTimelineRecorder& operator=(const MsgTimelineRecorder&) = delete;

    MsgTimelineRecorder(MsgTimelineRecorder&& rec) noexcept;
    MsgTimelineRecorder& operator=(MsgTimelineRecorder&& rec) noexcept;

    ~MsgTimelineRecorder();

    static PlogRecorderHandle ConvertCppRecorderToCHandle(std::unique_ptr<MsgTimelineRecorder> pRec);

    static std::unique_ptr<MsgTimelineRecorder> ConvertFromCHandle(PlogRecorderHandle handle);

private:
    MsgTimelineRecorder() = default;

    void FreeImpl() noexcept;

    std::unique_ptr<MsgTimelineRecorderImpl> impl_;

    friend PlogReturnValue ProfileLogWriter::WriteMsgTimeLine(std::unique_ptr<MsgTimelineRecorder> recorder);
    friend PlogReturnValue ProfileLogWriter::WriteMsgTimeLine(MsgTimelineRecorder recorder);
    friend struct RecorderImplTaker;
};
}
}

#endif // PLOG_MSGTIMELINERECORDER_HPP
