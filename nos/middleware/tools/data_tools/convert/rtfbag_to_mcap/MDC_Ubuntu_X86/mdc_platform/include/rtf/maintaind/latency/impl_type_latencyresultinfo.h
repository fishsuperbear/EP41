/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2021. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef RTF_MAINTAIND_IMPL_TYPE_LATENCYRESULTINFO_H
#define RTF_MAINTAIND_IMPL_TYPE_LATENCYRESULTINFO_H
#include "rtf/maintaind/latency/impl_type_latencyresult.h"
#include "rtf/stdtype/impl_type_uint64_t.h"

namespace rtf {
namespace maintaind {
struct LatencyResultInfo {
    ::rtf::maintaind::LatencyResult latencyResult_;
    ::rtf::stdtype::uint64_t recordTime_ = 0U;

    static bool IsPlane() noexcept
    {
        return false;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun) noexcept
    {
        fun(latencyResult_);
        fun(recordTime_);
    }

    template<typename F>
    void enumerate(F& fun) const noexcept
    {
        fun(latencyResult_);
        fun(recordTime_);
    }

    bool operator == (const ::rtf::maintaind::LatencyResultInfo& t) const noexcept
    {
        return (latencyResult_ == t.latencyResult_) && (recordTime_ == t.recordTime_);
    }
};
} // namespace maintaind
} // namespace rtf


#endif // RTF_MAINTAIND_IMPL_TYPE_LATENCYRESULTINFO_H
