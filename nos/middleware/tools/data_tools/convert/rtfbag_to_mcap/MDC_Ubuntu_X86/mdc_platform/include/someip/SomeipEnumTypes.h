/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2019-2021. All rights reserved.
 */

#ifndef SOMEIP_ENUM_TYPES_H
#define SOMEIP_ENUM_TYPES_H

#include <cstdint>

namespace Someip {
enum class AppState : uint8_t {
    APP_REGISTERED = 0x0,
    APP_DEREGISTERED = 0x1
};

enum class SubscriptionType : uint8_t {
    RELIABLE_AND_UNRELIABLE = 0x00,
    UNRELIABLE_FIRST = 0x01,
    RELIABLE_FIRST = 0x02,
    UNRELIABLE = 0x03,
    RELIABLE = 0x04,
};

enum class MessageType : uint8_t {
    REQUEST = 0x00,
    REQUEST_NO_RETURN = 0x01,
    NOTIFICATION = 0x02,
    RESPONSE = 0x80,
    ERROR = 0x81,
    UNKNOWN = 0xFF
};

enum class ErrorCode : uint8_t {
    OK = 0x00,
    NOT_OK = 0x01,
    UNKNOWN_SERVICE = 0x02,
    UNKNOWN_METHOD = 0x03,
    NOT_READY = 0x04,
    NOT_REACHABLE = 0x05,
    TIMEOUT = 0x06,
    WRONG_PROTOCOL_VERSION = 0x07,
    WRONG_INTERFACE_VERSION = 0x08,
    MALFORMED_MESSAGE = 0x09,
    WRONG_MESSAGE_TYPE = 0xA,
    UNKNOWN = 0xFF
};

enum class DiagnosisType : uint8_t {
    DATABUS_SERVICE_NOT_AVAILABLE = 0x01,
    DATABUS_SERVICE_RECEIVED_ERROR_VALUE,
    DATABUS_SERVICE_IS_NOT_PLAUSIBLE,
    UNKNOWN
};

enum class DiagnosisCounterType : uint8_t {
    INVALID_PROTOCOL_VERSION = 0x00,
    INVALID_INTERFACE_VERSION,
    INVALID_SERVICE_ID,
    INVALID_METHOD_ID,
    INVALID_MESSAGES,
    INVALID_SD_MESSAGES,
    INVALID_SUBSCRIBE,
    SERVICE_IDENTIFICATION,
    RESET_ALL,
    UNKNOWN
};

enum class ResetDiagnosisCounterType : uint16_t {
    RESET_INVALID_PROTOCOL_VERSION = 0xb11e,
    RESET_INVALID_INTERFACE_VERSION = 0xb11d,
    RESET_INVALID_SERVICE_ID = 0xb11c,
    RESET_INVALID_METHOD_ID = 0xb11b,
    RESET_INVALID_MESSAGES = 0xb11a,
    RESET_INVALID_SD_MESSAGES = 0xb119,
    RESET_INVALID_SUBSCRIBE = 0xb118,
    RESET_SERVICE_IDENTIFICATION = 0x0f05,
    ALL = 0xffff
};

enum class FaultsReportType : uint8_t {
    FAULT_OK = 0x00,
    FAULT_CONFIG_HANDLE,
    FAULT_NODE_CREATE,
    FAULT_CLIENT_REGIST,
    FAULT_SD_UNAVAILABLE,
    FAULT_SERVICE_OFFERED,
    FAULT_QUEUE_MESSAGE_NUM_EXCEED,
    FAULT_SERVICE_UNSUB,
    FAULT_EVENTGROUP_UNFOUND,
    FAULT_AUTHID_ERROR,
    FAULT_APP_UNREGIST,
    FAULT_SD_PORT,
    FAULT_SD_ADDRESS,
    FAULT_SD_METHOD,
    FAULT_SD_SUSPEND_MODE,
    FAULT_SD_PROTOCOL_VERSION,
    FAULT_SD_INTERFACE_VERSION,
    FAULT_SD_MESSAGE_TYPE,
    FAULT_SD_MESSAGE_RETURN_CODE,
    FAULT_INVALID_REMOTE_SERVICE,
    FAULT_NOT_IN_WHITELIST,
    FAULT_PORT,
    FAULT_ADDRESS,
    FAULT_METHOD,
    FAULT_MESSAGE_TYPE,
    FAULT_RETURN_CODE,
    FAULT_PROTOCOL_VERSION,
    FAULT_INTERFACE_VERSION,
    FAULT_INSTANCE_ID,
    FAULT_SERVICE_ID,
    FAULT_REQUEST_MESSAGE,
    FAULT_SAME_SUBNET,
    FAULT_UNFOUND_MESSAGE_CALLBACK,
    FAULT_UNFOUND_NOTIFY_CALLBACK
};

enum class SomeipErrnoCode : uint8_t {
    ERRNO_OK = 0x00,
    APP_UNINIT = 0x01,
    APP_START_FAIL = 0x02,
    APP_START_PREVIOUS = 0x03,
    EFAULT_ARG = 0x04,
    INVALID_ARG = 0x05,
    CONFIG_LOAD_FAIL = 0x06,
    CONFIG_INFO_MISSING = 0x07,
    CONFIG_HANDLE_ERROR = 0x08,
    NODE_CREATE_FAIL = 0x09,
    NODE_UNFOUND = 0x0a,
    INIT_FAIL = 0x0b,
    CLIENT_REGIST_PREVIOUS = 0x0c,
    SD_UNAVAILABLE = 0x0d,
    SERVICE_UNFOUND = 0x0e,
    SERVICE_OFFERED_PREVIOUS = 0x0f,
    SERVICE_NUM_EXCEED = 0x10,
    ENTRY_NUM_EXCEED = 0x11,
    EVENT_UNPROVIDE = 0x12,
    EVENT_INVALID = 0x13,
    EVENT_NUM_EXCEED = 0x14,
    EVENT_UNFOUND = 0x15,
    EVENTGROUP_NUM_EXCEED = 0x16,
    INVALID_MESSAGE = 0x17,
    MESSAGE_TYPE_MISMATCH = 0x18,
    QUEUE_MESSAGE_NUM_EXCEED = 0x19,
    SERVICE_UNSUB = 0x1a,
    EVENTGROUP_UNFOUND = 0x1b,
    AUTHID_ERROR = 0x1c,
    APP_UNREGIST = 0x1d,
    FEATURE_UNSUPPORT = 0x1e,
    SERVICE_FILTER_RECORDS_EXCEEDS = 0x1f,
    ADDRESS_NOT_SPECIFIED = 0x20,
    STD_EXCEPTION = 0x21,
    TYPE_CAST_FAIL = 0x22,
    WAKEUP_WRITE_FAILED = 0x23,
    ERRNO_MAX = 0xff
};

enum class FilterAction : uint8_t {
    IGNORE = 0,
    ACCEPT = 1
};

enum class ConnStatus : std::int32_t {
    CONN_OK,
    CONN_SSL_OK,
    CONN_FAIL,
    CONN_SSL_FAIL
};

enum class SdFindBehavior : uint8_t {
    EXACT_OR_ANY_MINOR_VERSION,
    MINIMUM_MINOR_VERSION,
    LEGACY
};

enum class ThreadType : uint8_t {
    IO = 0,
    CONTROL = 1,
    OTHER = 2
};

enum class StatisticsType : uint8_t {
    SEND_PKT_LOSS = 0x00,
    SEND_BYTES_LOSS = 0x01,
    RECV_PKT_LOSS = 0x02,
    RECV_BYTES_LOSS = 0x03
};
}

#endif
