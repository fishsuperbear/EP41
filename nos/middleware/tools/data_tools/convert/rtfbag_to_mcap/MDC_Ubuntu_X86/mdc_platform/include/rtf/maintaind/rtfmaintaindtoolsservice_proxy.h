/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef RTF_MAINTAIND_RTFMAINTAINDTOOLSSERVICE_PROXY_H
#define RTF_MAINTAIND_RTFMAINTAINDTOOLSSERVICE_PROXY_H

#include "rtf/maintaind/rtfmaintaindtoolsservice_proxy_common.h"

namespace rtf {
namespace maintaind {
namespace proxy {
class RTFMaintaindToolsServiceProxy {
private:
	std::unique_ptr<ara::com::internal::proxy::ProxyAdapter> proxyAdapter;
public:
    using HandleType = vrtf::vcc::api::types::HandleType;

    virtual ~RTFMaintaindToolsServiceProxy()
    {
    }

    explicit RTFMaintaindToolsServiceProxy(const vrtf::vcc::api::types::HandleType &handle)
        : proxyAdapter(std::make_unique<ara::com::internal::proxy::ProxyAdapter>(
            ::rtf::maintaind::RTFMaintaindToolsService::ServiceIdentifier, handle)),
          QueryAllDataType(proxyAdapter->GetProxy(), methods::QueryAllDataTypeId),
          QueryDataType(proxyAdapter->GetProxy(), methods::QueryDataTypeId),
          QueryDataTypeRefList(proxyAdapter->GetProxy(), methods::QueryDataTypeRefListId),
          QueryEventInfo(proxyAdapter->GetProxy(), methods::QueryEventInfoId),
          QueryEventShow(proxyAdapter->GetProxy(), methods::QueryEventShowId),
          QueryLatencyResult(proxyAdapter->GetProxy(), methods::QueryLatencyResultId),
          QueryLatencyStatus(proxyAdapter->GetProxy(), methods::QueryLatencyStatusId),
          QueryMethodInfo(proxyAdapter->GetProxy(), methods::QueryMethodInfoId),
          QueryMethodType(proxyAdapter->GetProxy(), methods::QueryMethodTypeId),
          QueryNodeInfo(proxyAdapter->GetProxy(), methods::QueryNodeInfoId),
          QuerySubNodeEventInfo(proxyAdapter->GetProxy(), methods::QuerySubNodeEventInfoId),
          SwitchLatencyMode(proxyAdapter->GetProxy(), methods::SwitchLatencyModeId){
            bool result = true;
            result = result && ((proxyAdapter->InitializeMethod<methods::QueryAllDataType::Output>(
                methods::QueryAllDataTypeId)).HasValue());
            result = result && ((proxyAdapter->InitializeMethod<methods::QueryDataType::Output>(
                methods::QueryDataTypeId)).HasValue());
            result = result && ((proxyAdapter->InitializeMethod<methods::QueryDataTypeRefList::Output>(
                methods::QueryDataTypeRefListId)).HasValue());
            result = result && ((proxyAdapter->InitializeMethod<methods::QueryEventInfo::Output>(
                methods::QueryEventInfoId)).HasValue());
            result = result && ((proxyAdapter->InitializeMethod<methods::QueryEventShow::Output>(
                methods::QueryEventShowId)).HasValue());
            result = result && ((proxyAdapter->InitializeMethod<methods::QueryLatencyResult::Output>(
                methods::QueryLatencyResultId)).HasValue());
            result = result && ((proxyAdapter->InitializeMethod<methods::QueryLatencyStatus::Output>(
                methods::QueryLatencyStatusId)).HasValue());
            result = result && ((proxyAdapter->InitializeMethod<methods::QueryMethodInfo::Output>(
                methods::QueryMethodInfoId)).HasValue());
            result = result && ((proxyAdapter->InitializeMethod<methods::QueryMethodType::Output>(
                methods::QueryMethodTypeId)).HasValue());
            result = result && ((proxyAdapter->InitializeMethod<methods::QueryNodeInfo::Output>(
                methods::QueryNodeInfoId)).HasValue());
            result = result && ((proxyAdapter->InitializeMethod<methods::QuerySubNodeEventInfo::Output>(
                methods::QuerySubNodeEventInfoId)).HasValue());
            result = result && ((proxyAdapter->InitializeMethod<methods::SwitchLatencyMode::Output>(
                methods::SwitchLatencyModeId)).HasValue());
            if (result == false) {
#ifndef NOT_SUPPORT_EXCEPTIONS
            ara::core::ErrorCode errorcode(ara::com::ComErrc::kNetworkBindingFailure);
            throw ara::com::ComException(std::move(errorcode));
#else
            std::cerr << "Error: Not support exception, create proxy failed!"<< std::endl;
#endif
            }
        }

    RTFMaintaindToolsServiceProxy(const RTFMaintaindToolsServiceProxy&) = delete;
    RTFMaintaindToolsServiceProxy& operator=(const RTFMaintaindToolsServiceProxy&) = delete;

    RTFMaintaindToolsServiceProxy(RTFMaintaindToolsServiceProxy&& other) = default;
    RTFMaintaindToolsServiceProxy& operator=(RTFMaintaindToolsServiceProxy&& other) = default;

    static ara::com::FindServiceHandle StartFindService(
        ara::com::FindServiceHandler<ara::com::internal::proxy::ProxyAdapter::HandleType> handler,
        ara::com::InstanceIdentifier instance)
    {
        return ara::com::internal::proxy::ProxyAdapter::StartFindService(
            handler, ::rtf::maintaind::RTFMaintaindToolsService::ServiceIdentifier, instance);
    }

    static ara::com::FindServiceHandle StartFindService(
        ara::com::FindServiceHandler<ara::com::internal::proxy::ProxyAdapter::HandleType> handler,
        ara::core::InstanceSpecifier specifier)
    {
        return ara::com::internal::proxy::ProxyAdapter::StartFindService(
            handler, ::rtf::maintaind::RTFMaintaindToolsService::ServiceIdentifier, specifier);
    }

    static ara::com::ServiceHandleContainer<ara::com::internal::proxy::ProxyAdapter::HandleType> FindService(
        ara::com::InstanceIdentifier instance)
    {
        return ara::com::internal::proxy::ProxyAdapter::FindService(
            ::rtf::maintaind::RTFMaintaindToolsService::ServiceIdentifier, instance);
    }

    static ara::com::ServiceHandleContainer<ara::com::internal::proxy::ProxyAdapter::HandleType> FindService(
        ara::core::InstanceSpecifier specifier)
    {
        return ara::com::internal::proxy::ProxyAdapter::FindService(
            ::rtf::maintaind::RTFMaintaindToolsService::ServiceIdentifier, specifier);
    }

    static void StopFindService(const ara::com::FindServiceHandle& handle)
    {
        ara::com::internal::proxy::ProxyAdapter::StopFindService(handle);
    }

    HandleType GetHandle() const
    {
        return proxyAdapter->GetHandle();
    }
    methods::QueryAllDataType QueryAllDataType;
    methods::QueryDataType QueryDataType;
    methods::QueryDataTypeRefList QueryDataTypeRefList;
    methods::QueryEventInfo QueryEventInfo;
    methods::QueryEventShow QueryEventShow;
    methods::QueryLatencyResult QueryLatencyResult;
    methods::QueryLatencyStatus QueryLatencyStatus;
    methods::QueryMethodInfo QueryMethodInfo;
    methods::QueryMethodType QueryMethodType;
    methods::QueryNodeInfo QueryNodeInfo;
    methods::QuerySubNodeEventInfo QuerySubNodeEventInfo;
    methods::SwitchLatencyMode SwitchLatencyMode;
};
} // namespace proxy
} // namespace maintaind
} // namespace rtf

#endif // RTF_MAINTAIND_RTFMAINTAINDTOOLSSERVICE_PROXY_H
