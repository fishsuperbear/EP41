/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef RTF_MAINTAIND_IMPL_TYPE_EVENTREGISTERINFO_H
#define RTF_MAINTAIND_IMPL_TYPE_EVENTREGISTERINFO_H
#include "rtf/stdtype/impl_type_string.h"
#include "rtf/maintaind/impl_type_eventmap.h"
#include "rtf/stdtype/impl_type_int32_t.h"
#include "rtf/maintaind/impl_type_serializeconfig.h"

namespace rtf {
namespace maintaind {
struct EventRegisterInfo {
    ::rtf::stdtype::String shortName_;
    ::rtf::stdtype::String appName_;
    ::rtf::maintaind::EventMap eventMap_;
    ::rtf::stdtype::String type_;
    ::rtf::stdtype::String eventType_;
    ::rtf::stdtype::int32_t nodePid_ = 0;
    ::rtf::maintaind::SerializeConfig serializeConfig_;
    ::rtf::stdtype::String domainName_;
    bool isOnline_ = false;

    static bool IsPlane() noexcept
    {
        return false;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun) noexcept
    {
        fun(shortName_);
        fun(appName_);
        fun(eventMap_);
        fun(type_);
        fun(eventType_);
        fun(nodePid_);
        fun(serializeConfig_);
        fun(domainName_);
        fun(isOnline_);
    }

    bool operator == (const ::rtf::maintaind::EventRegisterInfo& t) const noexcept
    {
        return (shortName_ == t.shortName_) && (appName_ == t.appName_) && (eventMap_ == t.eventMap_) &&
            (type_ == t.type_) && (eventType_ == t.eventType_) && (nodePid_ == t.nodePid_) &&
            (serializeConfig_ == t.serializeConfig_) && (domainName_ == t.domainName_) && (isOnline_ == t.isOnline_);
    }
};
} // namespace maintaind
} // namespace rtf


#endif // RTF_MAINTAIND_IMPL_TYPE_EVENTREGISTERINFO_H
