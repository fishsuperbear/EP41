/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef RTF_MAINTAIND_IMPL_TYPE_DDSMETHODINFO_H
#define RTF_MAINTAIND_IMPL_TYPE_DDSMETHODINFO_H
#include "rtf/stdtype/impl_type_string.h"
#include "rtf/stdtype/impl_type_uint16_t.h"
#include "rtf/stdtype/impl_type_uint32_t.h"
#include "rtf/maintaind/dds/impl_type_durabilityqos.h"
#include "rtf/maintaind/dds/impl_type_historyqos.h"
#include "rtf/maintaind/dds/impl_type_vectortransportqos.h"
#include "rtf/maintaind/e2e/impl_type_e2econfiginfo.h"
#include "rtf/maintaind/dds/impl_type_reliabilitykind.h"

namespace rtf {
namespace maintaind {
struct DDSMethodInfo {
    ::rtf::stdtype::String methodName_;
    ::rtf::stdtype::String instanceShortName_;
    ::rtf::stdtype::String requestTopicName_;
    ::rtf::stdtype::String replyTopicName_;
    ::rtf::stdtype::uint16_t domainId_;
    ::rtf::stdtype::uint32_t readerDepth_;
    ::rtf::stdtype::uint32_t writerDepth_;
    ::rtf::maintaind::DurabilityQos requestDurabilityQos_;
    ::rtf::maintaind::DurabilityQos replyDurabilityQos_;
    ::rtf::maintaind::HistoryQos requestHistoryQos_;
    ::rtf::maintaind::HistoryQos replyHistoryQos_;
    ::rtf::maintaind::VectorTransportQos transportQos_;
    ::rtf::stdtype::uint32_t requestFragSize_;
    ::rtf::stdtype::uint32_t requestListSize_;
    ::rtf::stdtype::uint32_t replyFragSize_;
    ::rtf::stdtype::uint32_t replyListSize_;
    ::rtf::maintaind::E2EConfigInfo e2eConfig_;
    ::rtf::maintaind::ReliabilityKind reliabilityKind_;
    static bool IsPlane() noexcept { return false; }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun) noexcept
    {
        fun(methodName_);
        fun(instanceShortName_);
        fun(requestTopicName_);
        fun(replyTopicName_);
        fun(domainId_);
        fun(readerDepth_);
        fun(writerDepth_);
        fun(requestDurabilityQos_);
        fun(replyDurabilityQos_);
        fun(requestHistoryQos_);
        fun(replyHistoryQos_);
        fun(transportQos_);
        fun(requestFragSize_);
        fun(requestListSize_);
        fun(replyFragSize_);
        fun(replyListSize_);
        fun(e2eConfig_);
        fun(reliabilityKind_);
    }

    bool operator == (const ::rtf::maintaind::DDSMethodInfo& t) const noexcept
    {
        return (methodName_ == t.methodName_) && (instanceShortName_ == t.instanceShortName_) &&
            (requestTopicName_ == t.requestTopicName_) && (replyTopicName_ == t.replyTopicName_) &&
            (domainId_ == t.domainId_) && (readerDepth_ == t.readerDepth_) &&
            (writerDepth_ == t.writerDepth_) && (requestDurabilityQos_ == t.requestDurabilityQos_) &&
            (replyDurabilityQos_ == t.replyDurabilityQos_) && (requestHistoryQos_ == t.requestHistoryQos_) &&
            (replyHistoryQos_ == t.replyHistoryQos_) && (transportQos_ == t.transportQos_) &&
            (requestFragSize_ == t.requestFragSize_) && (requestListSize_ == t.requestListSize_) &&
            (replyFragSize_ == t.replyFragSize_) && (replyListSize_ == t.replyListSize_) &&
            (e2eConfig_ == t.e2eConfig_) && (reliabilityKind_ == t.reliabilityKind_);
    }
};
} // namespace maintaind
} // namespace rtf


#endif // RTF_MAINTAIND_IMPL_TYPE_DDSMETHODINFO_H
