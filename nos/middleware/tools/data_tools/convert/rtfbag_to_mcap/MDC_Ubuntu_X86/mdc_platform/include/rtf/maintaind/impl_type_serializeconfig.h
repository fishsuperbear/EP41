/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef RTF_MAINTAIND_IMPL_TYPE_SERIALIZECONFIG_H
#define RTF_MAINTAIND_IMPL_TYPE_SERIALIZECONFIG_H
#include "rtf/maintaind/impl_type_serializationtype.h"
#include "rtf/maintaind/impl_type_structserializationpolicy.h"
#include "rtf/stdtype/impl_type_string.h"

namespace rtf {
namespace maintaind {
struct SerializeConfig {
    ::rtf::maintaind::SerializationType type;
    ::rtf::maintaind::StructSerializationPolicy structPolicy;
    ::rtf::stdtype::String placeHolder;

    static bool IsPlane() noexcept
    {
        return false;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun) noexcept
    {
        fun(type);
        fun(structPolicy);
        fun(placeHolder);
    }

    template<typename F>
    void enumerate(F& fun) const noexcept
    {
        fun(type);
        fun(structPolicy);
        fun(placeHolder);
    }

    bool operator == (const ::rtf::maintaind::SerializeConfig& t) const noexcept
    {
        return (type == t.type) && (structPolicy == t.structPolicy) && (placeHolder == t.placeHolder);
    }
};
} // namespace maintaind
} // namespace rtf


#endif // RTF_MAINTAIND_IMPL_TYPE_SERIALIZECONFIG_H
