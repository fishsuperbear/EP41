/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef RTF_MAINTAIND_IMPL_TYPE_NODEINFO_H
#define RTF_MAINTAIND_IMPL_TYPE_NODEINFO_H
#include "rtf/maintaind/impl_type_nodeinfowithappname.h"
#include "rtf/stdtype/impl_type_string.h"

namespace rtf {
namespace maintaind {
struct NodeInfo {
    ::rtf::stdtype::String appName_;
    ::rtf::maintaind::NodeInfoWithAppName nodeInfoWithAppName;
    static bool IsPlane() noexcept
    {
        return false;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun) noexcept
    {
        fun(appName_);
        fun(nodeInfoWithAppName);
    }

    template<typename F>
    void enumerate(F& fun) const noexcept
    {
        fun(appName_);
        fun(nodeInfoWithAppName);
    }

    bool operator == (const ::rtf::maintaind::NodeInfo& t) const noexcept
    {
        return (appName_ == t.appName_) && (nodeInfoWithAppName == t.nodeInfoWithAppName);
    }
};
} // namespace maintaind
} // namespace rtf


#endif // RTF_MAINTAIND_IMPL_TYPE_NODEINFO_H
