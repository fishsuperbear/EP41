/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2021. All rights reserved.
 * Generated by VRTF CM-Generator
 */

#ifndef RTF_MAINTAIND_IMPL_TYPE_LATENCYRESULT_H
#define RTF_MAINTAIND_IMPL_TYPE_LATENCYRESULT_H
#include "rtf/stdtype/impl_type_uint64_t.h"

namespace rtf {
namespace maintaind {
struct LatencyResult {
    ::rtf::stdtype::uint64_t avgTime_ = 0U;
    ::rtf::stdtype::uint64_t maxTime_ = 0U;
    ::rtf::stdtype::uint64_t minTime_ = 0U;

    static bool IsPlane() noexcept
    {
        return true;
    }

    using IsEnumerableTag = void;
    template<typename F>
    void enumerate(F& fun) noexcept
    {
        fun(avgTime_);
        fun(maxTime_);
        fun(minTime_);
    }

    template<typename F>
    void enumerate(F& fun) const noexcept
    {
        fun(avgTime_);
        fun(maxTime_);
        fun(minTime_);
    }

    bool operator == (const ::rtf::maintaind::LatencyResult& t) const noexcept
    {
        return (avgTime_ == t.avgTime_) && (maxTime_ == t.maxTime_) && (minTime_ == t.minTime_);
    }
};
} // namespace maintaind
} // namespace rtf


#endif // RTF_MAINTAIND_IMPL_TYPE_LATENCYRESULT_H
