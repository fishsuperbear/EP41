// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/per_key_value.proto

#include "proto/per_key_value.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fper_5fkey_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValueStorageData_proto_2fper_5fkey_5fvalue_2eproto;
namespace hozon {
namespace netaos {
namespace per {
namespace proto {
class KeyValueStorageData_FieldsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValueStorageData_FieldsEntry_DoNotUse> _instance;
} _KeyValueStorageData_FieldsEntry_DoNotUse_default_instance_;
class KeyValueStorageDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValueStorageData> _instance;
} _KeyValueStorageData_default_instance_;
class ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Value> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 int_value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value_;
  float float_value_;
  double double_value_;
  bool bool_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nested_message_;
  const ::hozon::netaos::per::proto::KeyValueStorageData* nested_kvs_;
} _Value_default_instance_;
class TestSubMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestSubMessage> _instance;
} _TestSubMessage_default_instance_;
}  // namespace proto
}  // namespace per
}  // namespace netaos
}  // namespace hozon
static void InitDefaultsscc_info_KeyValueStorageData_proto_2fper_5fkey_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hozon::netaos::per::proto::_KeyValueStorageData_FieldsEntry_DoNotUse_default_instance_;
    new (ptr) ::hozon::netaos::per::proto::KeyValueStorageData_FieldsEntry_DoNotUse();
  }
  {
    void* ptr = &::hozon::netaos::per::proto::_KeyValueStorageData_default_instance_;
    new (ptr) ::hozon::netaos::per::proto::KeyValueStorageData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::hozon::netaos::per::proto::_Value_default_instance_;
    new (ptr) ::hozon::netaos::per::proto::Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hozon::netaos::per::proto::KeyValueStorageData_FieldsEntry_DoNotUse::InitAsDefaultInstance();
  ::hozon::netaos::per::proto::KeyValueStorageData::InitAsDefaultInstance();
  ::hozon::netaos::per::proto::Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValueStorageData_proto_2fper_5fkey_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyValueStorageData_proto_2fper_5fkey_5fvalue_2eproto}, {}};

static void InitDefaultsscc_info_TestSubMessage_proto_2fper_5fkey_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hozon::netaos::per::proto::_TestSubMessage_default_instance_;
    new (ptr) ::hozon::netaos::per::proto::TestSubMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hozon::netaos::per::proto::TestSubMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestSubMessage_proto_2fper_5fkey_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestSubMessage_proto_2fper_5fkey_5fvalue_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fper_5fkey_5fvalue_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fper_5fkey_5fvalue_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fper_5fkey_5fvalue_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fper_5fkey_5fvalue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::KeyValueStorageData_FieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::KeyValueStorageData_FieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::KeyValueStorageData_FieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::KeyValueStorageData_FieldsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::KeyValueStorageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::KeyValueStorageData, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::hozon::netaos::per::proto::ValueDefaultTypeInternal, int_value_),
  offsetof(::hozon::netaos::per::proto::ValueDefaultTypeInternal, uint64_value_),
  offsetof(::hozon::netaos::per::proto::ValueDefaultTypeInternal, float_value_),
  offsetof(::hozon::netaos::per::proto::ValueDefaultTypeInternal, double_value_),
  offsetof(::hozon::netaos::per::proto::ValueDefaultTypeInternal, bool_value_),
  offsetof(::hozon::netaos::per::proto::ValueDefaultTypeInternal, string_value_),
  offsetof(::hozon::netaos::per::proto::ValueDefaultTypeInternal, nested_message_),
  offsetof(::hozon::netaos::per::proto::ValueDefaultTypeInternal, nested_kvs_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::Value, vec_int_val_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::Value, vec_float_val_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::Value, vec_double_val_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::Value, vec_bool_val_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::Value, vec_string_val_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::Value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::TestSubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::TestSubMessage, string_value_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::TestSubMessage, int_value_),
  PROTOBUF_FIELD_OFFSET(::hozon::netaos::per::proto::TestSubMessage, bool_value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hozon::netaos::per::proto::KeyValueStorageData_FieldsEntry_DoNotUse)},
  { 9, -1, sizeof(::hozon::netaos::per::proto::KeyValueStorageData)},
  { 15, -1, sizeof(::hozon::netaos::per::proto::Value)},
  { 34, -1, sizeof(::hozon::netaos::per::proto::TestSubMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hozon::netaos::per::proto::_KeyValueStorageData_FieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hozon::netaos::per::proto::_KeyValueStorageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hozon::netaos::per::proto::_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hozon::netaos::per::proto::_TestSubMessage_default_instance_),
};

const char descriptor_table_protodef_proto_2fper_5fkey_5fvalue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031proto/per_key_value.proto\022\026hozon.netao"
  "s.per.proto\032 google/protobuf/descriptor."
  "proto\"\254\001\n\023KeyValueStorageData\022G\n\006fields\030"
  "\001 \003(\01327.hozon.netaos.per.proto.KeyValueS"
  "torageData.FieldsEntry\032L\n\013FieldsEntry\022\013\n"
  "\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.hozon.netaos"
  ".per.proto.Value:\0028\001\"\351\002\n\005Value\022\023\n\tint_va"
  "lue\030\001 \001(\005H\000\022\026\n\014uint64_value\030\002 \001(\004H\000\022\025\n\013f"
  "loat_value\030\003 \001(\002H\000\022\026\n\014double_value\030\004 \001(\001"
  "H\000\022\024\n\nbool_value\030\005 \001(\010H\000\022\026\n\014string_value"
  "\030\006 \001(\tH\000\022\030\n\016nested_message\030\007 \001(\014H\000\022A\n\nne"
  "sted_kvs\030\010 \001(\0132+.hozon.netaos.per.proto."
  "KeyValueStorageDataH\000\022\023\n\013vec_int_val\030\t \003"
  "(\005\022\025\n\rvec_float_val\030\n \003(\002\022\026\n\016vec_double_"
  "val\030\013 \003(\001\022\024\n\014vec_bool_val\030\014 \003(\010\022\026\n\016vec_s"
  "tring_val\030\r \003(\tB\007\n\005value\"M\n\016TestSubMessa"
  "ge\022\024\n\014string_value\030\001 \001(\t\022\021\n\tint_value\030\002 "
  "\001(\005\022\022\n\nbool_value\030\003 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fper_5fkey_5fvalue_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fper_5fkey_5fvalue_2eproto_sccs[2] = {
  &scc_info_KeyValueStorageData_proto_2fper_5fkey_5fvalue_2eproto.base,
  &scc_info_TestSubMessage_proto_2fper_5fkey_5fvalue_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fper_5fkey_5fvalue_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fper_5fkey_5fvalue_2eproto = {
  false, false, descriptor_table_protodef_proto_2fper_5fkey_5fvalue_2eproto, "proto/per_key_value.proto", 711,
  &descriptor_table_proto_2fper_5fkey_5fvalue_2eproto_once, descriptor_table_proto_2fper_5fkey_5fvalue_2eproto_sccs, descriptor_table_proto_2fper_5fkey_5fvalue_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_proto_2fper_5fkey_5fvalue_2eproto::offsets,
  file_level_metadata_proto_2fper_5fkey_5fvalue_2eproto, 4, file_level_enum_descriptors_proto_2fper_5fkey_5fvalue_2eproto, file_level_service_descriptors_proto_2fper_5fkey_5fvalue_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fper_5fkey_5fvalue_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fper_5fkey_5fvalue_2eproto)), true);
namespace hozon {
namespace netaos {
namespace per {
namespace proto {

// ===================================================================

KeyValueStorageData_FieldsEntry_DoNotUse::KeyValueStorageData_FieldsEntry_DoNotUse() {}
KeyValueStorageData_FieldsEntry_DoNotUse::KeyValueStorageData_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void KeyValueStorageData_FieldsEntry_DoNotUse::MergeFrom(const KeyValueStorageData_FieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata KeyValueStorageData_FieldsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void KeyValueStorageData_FieldsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void KeyValueStorageData::InitAsDefaultInstance() {
}
class KeyValueStorageData::_Internal {
 public:
};

KeyValueStorageData::KeyValueStorageData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hozon.netaos.per.proto.KeyValueStorageData)
}
KeyValueStorageData::KeyValueStorageData(const KeyValueStorageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fields_.MergeFrom(from.fields_);
  // @@protoc_insertion_point(copy_constructor:hozon.netaos.per.proto.KeyValueStorageData)
}

void KeyValueStorageData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValueStorageData_proto_2fper_5fkey_5fvalue_2eproto.base);
}

KeyValueStorageData::~KeyValueStorageData() {
  // @@protoc_insertion_point(destructor:hozon.netaos.per.proto.KeyValueStorageData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyValueStorageData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyValueStorageData::ArenaDtor(void* object) {
  KeyValueStorageData* _this = reinterpret_cast< KeyValueStorageData* >(object);
  (void)_this;
}
void KeyValueStorageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValueStorageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValueStorageData& KeyValueStorageData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValueStorageData_proto_2fper_5fkey_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void KeyValueStorageData::Clear() {
// @@protoc_insertion_point(message_clear_start:hozon.netaos.per.proto.KeyValueStorageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValueStorageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .hozon.netaos.per.proto.Value> fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValueStorageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hozon.netaos.per.proto.KeyValueStorageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .hozon.netaos.per.proto.Value> fields = 1;
  if (!this->_internal_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::hozon::netaos::per::proto::Value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "hozon.netaos.per.proto.KeyValueStorageData.FieldsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::hozon::netaos::per::proto::Value >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::hozon::netaos::per::proto::Value >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = KeyValueStorageData_FieldsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::hozon::netaos::per::proto::Value >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it) {
        target = KeyValueStorageData_FieldsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hozon.netaos.per.proto.KeyValueStorageData)
  return target;
}

size_t KeyValueStorageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hozon.netaos.per.proto.KeyValueStorageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .hozon.netaos.per.proto.Value> fields = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::hozon::netaos::per::proto::Value >::const_iterator
      it = this->_internal_fields().begin();
      it != this->_internal_fields().end(); ++it) {
    total_size += KeyValueStorageData_FieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValueStorageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hozon.netaos.per.proto.KeyValueStorageData)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValueStorageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValueStorageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hozon.netaos.per.proto.KeyValueStorageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hozon.netaos.per.proto.KeyValueStorageData)
    MergeFrom(*source);
  }
}

void KeyValueStorageData::MergeFrom(const KeyValueStorageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hozon.netaos.per.proto.KeyValueStorageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void KeyValueStorageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hozon.netaos.per.proto.KeyValueStorageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValueStorageData::CopyFrom(const KeyValueStorageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hozon.netaos.per.proto.KeyValueStorageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueStorageData::IsInitialized() const {
  return true;
}

void KeyValueStorageData::InternalSwap(KeyValueStorageData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.Swap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValueStorageData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Value::InitAsDefaultInstance() {
  ::hozon::netaos::per::proto::_Value_default_instance_.int_value_ = 0;
  ::hozon::netaos::per::proto::_Value_default_instance_.uint64_value_ = PROTOBUF_ULONGLONG(0);
  ::hozon::netaos::per::proto::_Value_default_instance_.float_value_ = 0;
  ::hozon::netaos::per::proto::_Value_default_instance_.double_value_ = 0;
  ::hozon::netaos::per::proto::_Value_default_instance_.bool_value_ = false;
  ::hozon::netaos::per::proto::_Value_default_instance_.string_value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::hozon::netaos::per::proto::_Value_default_instance_.nested_message_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::hozon::netaos::per::proto::_Value_default_instance_.nested_kvs_ = const_cast< ::hozon::netaos::per::proto::KeyValueStorageData*>(
      ::hozon::netaos::per::proto::KeyValueStorageData::internal_default_instance());
}
class Value::_Internal {
 public:
  static const ::hozon::netaos::per::proto::KeyValueStorageData& nested_kvs(const Value* msg);
};

const ::hozon::netaos::per::proto::KeyValueStorageData&
Value::_Internal::nested_kvs(const Value* msg) {
  return *msg->value_.nested_kvs_;
}
void Value::set_allocated_nested_kvs(::hozon::netaos::per::proto::KeyValueStorageData* nested_kvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (nested_kvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nested_kvs);
    if (message_arena != submessage_arena) {
      nested_kvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_kvs, submessage_arena);
    }
    set_has_nested_kvs();
    value_.nested_kvs_ = nested_kvs;
  }
  // @@protoc_insertion_point(field_set_allocated:hozon.netaos.per.proto.Value.nested_kvs)
}
Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vec_int_val_(arena),
  vec_float_val_(arena),
  vec_double_val_(arena),
  vec_bool_val_(arena),
  vec_string_val_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hozon.netaos.per.proto.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vec_int_val_(from.vec_int_val_),
      vec_float_val_(from.vec_float_val_),
      vec_double_val_(from.vec_double_val_),
      vec_bool_val_(from.vec_bool_val_),
      vec_string_val_(from.vec_string_val_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kUint64Value: {
      _internal_set_uint64_value(from._internal_uint64_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kNestedMessage: {
      _internal_set_nested_message(from._internal_nested_message());
      break;
    }
    case kNestedKvs: {
      _internal_mutable_nested_kvs()->::hozon::netaos::per::proto::KeyValueStorageData::MergeFrom(from._internal_nested_kvs());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:hozon.netaos.per.proto.Value)
}

void Value::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValueStorageData_proto_2fper_5fkey_5fvalue_2eproto.base);
  clear_has_value();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:hozon.netaos.per.proto.Value)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Value::ArenaDtor(void* object) {
  Value* _this = reinterpret_cast< Value* >(object);
  (void)_this;
}
void Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Value& Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValueStorageData_proto_2fper_5fkey_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:hozon.netaos.per.proto.Value)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kUint64Value: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kNestedMessage: {
      value_.nested_message_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kNestedKvs: {
      if (GetArena() == nullptr) {
        delete value_.nested_kvs_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:hozon.netaos.per.proto.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vec_int_val_.Clear();
  vec_float_val_.Clear();
  vec_double_val_.Clear();
  vec_bool_val_.Clear();
  vec_string_val_.Clear();
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 int_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uint64_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double double_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool bool_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.per.proto.Value.string_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nested_message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_nested_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .hozon.netaos.per.proto.KeyValueStorageData nested_kvs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_kvs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 vec_int_val = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vec_int_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_vec_int_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float vec_float_val = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vec_float_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          _internal_add_vec_float_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double vec_double_val = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vec_double_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89) {
          _internal_add_vec_double_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated bool vec_bool_val = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_vec_bool_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_vec_bool_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string vec_string_val = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vec_string_val();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.per.proto.Value.vec_string_val"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hozon.netaos.per.proto.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 int_value = 1;
  if (_internal_has_int_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_int_value(), target);
  }

  // uint64 uint64_value = 2;
  if (_internal_has_uint64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uint64_value(), target);
  }

  // float float_value = 3;
  if (_internal_has_float_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_float_value(), target);
  }

  // double double_value = 4;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_value(), target);
  }

  // bool bool_value = 5;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bool_value(), target);
  }

  // string string_value = 6;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.per.proto.Value.string_value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_string_value(), target);
  }

  // bytes nested_message = 7;
  if (_internal_has_nested_message()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_nested_message(), target);
  }

  // .hozon.netaos.per.proto.KeyValueStorageData nested_kvs = 8;
  if (_internal_has_nested_kvs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::nested_kvs(this), target, stream);
  }

  // repeated int32 vec_int_val = 9;
  {
    int byte_size = _vec_int_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_vec_int_val(), byte_size, target);
    }
  }

  // repeated float vec_float_val = 10;
  if (this->_internal_vec_float_val_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_vec_float_val(), target);
  }

  // repeated double vec_double_val = 11;
  if (this->_internal_vec_double_val_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_vec_double_val(), target);
  }

  // repeated bool vec_bool_val = 12;
  if (this->_internal_vec_bool_val_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_vec_bool_val(), target);
  }

  // repeated string vec_string_val = 13;
  for (int i = 0, n = this->_internal_vec_string_val_size(); i < n; i++) {
    const auto& s = this->_internal_vec_string_val(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.per.proto.Value.vec_string_val");
    target = stream->WriteString(13, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hozon.netaos.per.proto.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hozon.netaos.per.proto.Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vec_int_val = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vec_int_val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_int_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float vec_float_val = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vec_float_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_float_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double vec_double_val = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vec_double_val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_double_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool vec_bool_val = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vec_bool_val_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vec_bool_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string vec_string_val = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(vec_string_val_.size());
  for (int i = 0, n = vec_string_val_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      vec_string_val_.Get(i));
  }

  switch (value_case()) {
    // int32 int_value = 1;
    case kIntValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int_value());
      break;
    }
    // uint64 uint64_value = 2;
    case kUint64Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64_value());
      break;
    }
    // float float_value = 3;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bool bool_value = 5;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // string string_value = 6;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bytes nested_message = 7;
    case kNestedMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_nested_message());
      break;
    }
    // .hozon.netaos.per.proto.KeyValueStorageData nested_kvs = 8;
    case kNestedKvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.nested_kvs_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hozon.netaos.per.proto.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hozon.netaos.per.proto.Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hozon.netaos.per.proto.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hozon.netaos.per.proto.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_int_val_.MergeFrom(from.vec_int_val_);
  vec_float_val_.MergeFrom(from.vec_float_val_);
  vec_double_val_.MergeFrom(from.vec_double_val_);
  vec_bool_val_.MergeFrom(from.vec_bool_val_);
  vec_string_val_.MergeFrom(from.vec_string_val_);
  switch (from.value_case()) {
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kUint64Value: {
      _internal_set_uint64_value(from._internal_uint64_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kNestedMessage: {
      _internal_set_nested_message(from._internal_nested_message());
      break;
    }
    case kNestedKvs: {
      _internal_mutable_nested_kvs()->::hozon::netaos::per::proto::KeyValueStorageData::MergeFrom(from._internal_nested_kvs());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hozon.netaos.per.proto.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hozon.netaos.per.proto.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vec_int_val_.InternalSwap(&other->vec_int_val_);
  vec_float_val_.InternalSwap(&other->vec_float_val_);
  vec_double_val_.InternalSwap(&other->vec_double_val_);
  vec_bool_val_.InternalSwap(&other->vec_bool_val_);
  vec_string_val_.InternalSwap(&other->vec_string_val_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestSubMessage::InitAsDefaultInstance() {
}
class TestSubMessage::_Internal {
 public:
};

TestSubMessage::TestSubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hozon.netaos.per.proto.TestSubMessage)
}
TestSubMessage::TestSubMessage(const TestSubMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_string_value().empty()) {
    string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_string_value(),
      GetArena());
  }
  ::memcpy(&int_value_, &from.int_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&bool_value_) -
    reinterpret_cast<char*>(&int_value_)) + sizeof(bool_value_));
  // @@protoc_insertion_point(copy_constructor:hozon.netaos.per.proto.TestSubMessage)
}

void TestSubMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestSubMessage_proto_2fper_5fkey_5fvalue_2eproto.base);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&int_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bool_value_) -
      reinterpret_cast<char*>(&int_value_)) + sizeof(bool_value_));
}

TestSubMessage::~TestSubMessage() {
  // @@protoc_insertion_point(destructor:hozon.netaos.per.proto.TestSubMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestSubMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestSubMessage::ArenaDtor(void* object) {
  TestSubMessage* _this = reinterpret_cast< TestSubMessage* >(object);
  (void)_this;
}
void TestSubMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestSubMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestSubMessage& TestSubMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestSubMessage_proto_2fper_5fkey_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void TestSubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hozon.netaos.per.proto.TestSubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&int_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bool_value_) -
      reinterpret_cast<char*>(&int_value_)) + sizeof(bool_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestSubMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hozon.netaos.per.proto.TestSubMessage.string_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestSubMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hozon.netaos.per.proto.TestSubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (this->string_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hozon.netaos.per.proto.TestSubMessage.string_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_value(), target);
  }

  // int32 int_value = 2;
  if (this->int_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_int_value(), target);
  }

  // bool bool_value = 3;
  if (this->bool_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bool_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hozon.netaos.per.proto.TestSubMessage)
  return target;
}

size_t TestSubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hozon.netaos.per.proto.TestSubMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string string_value = 1;
  if (this->string_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_value());
  }

  // int32 int_value = 2;
  if (this->int_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int_value());
  }

  // bool bool_value = 3;
  if (this->bool_value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestSubMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hozon.netaos.per.proto.TestSubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestSubMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestSubMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hozon.netaos.per.proto.TestSubMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hozon.netaos.per.proto.TestSubMessage)
    MergeFrom(*source);
  }
}

void TestSubMessage::MergeFrom(const TestSubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hozon.netaos.per.proto.TestSubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.string_value().size() > 0) {
    _internal_set_string_value(from._internal_string_value());
  }
  if (from.int_value() != 0) {
    _internal_set_int_value(from._internal_int_value());
  }
  if (from.bool_value() != 0) {
    _internal_set_bool_value(from._internal_bool_value());
  }
}

void TestSubMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hozon.netaos.per.proto.TestSubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestSubMessage::CopyFrom(const TestSubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hozon.netaos.per.proto.TestSubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestSubMessage::IsInitialized() const {
  return true;
}

void TestSubMessage::InternalSwap(TestSubMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  string_value_.Swap(&other->string_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestSubMessage, bool_value_)
      + sizeof(TestSubMessage::bool_value_)
      - PROTOBUF_FIELD_OFFSET(TestSubMessage, int_value_)>(
          reinterpret_cast<char*>(&int_value_),
          reinterpret_cast<char*>(&other->int_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestSubMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace per
}  // namespace netaos
}  // namespace hozon
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hozon::netaos::per::proto::KeyValueStorageData_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::hozon::netaos::per::proto::KeyValueStorageData_FieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hozon::netaos::per::proto::KeyValueStorageData_FieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::hozon::netaos::per::proto::KeyValueStorageData* Arena::CreateMaybeMessage< ::hozon::netaos::per::proto::KeyValueStorageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hozon::netaos::per::proto::KeyValueStorageData >(arena);
}
template<> PROTOBUF_NOINLINE ::hozon::netaos::per::proto::Value* Arena::CreateMaybeMessage< ::hozon::netaos::per::proto::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hozon::netaos::per::proto::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::hozon::netaos::per::proto::TestSubMessage* Arena::CreateMaybeMessage< ::hozon::netaos::per::proto::TestSubMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hozon::netaos::per::proto::TestSubMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
