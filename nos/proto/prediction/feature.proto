syntax = "proto2";

package hozon.prediction;

import "proto/common/types.proto";
import "proto/common/pnc_point.proto";
import "proto/map/map_lane.proto";
import "proto/perception/perception_obstacle.proto";
import "proto/prediction/lane_graph.proto";
import "proto/prediction/vector_net.proto";

message Lane {
  // Features of all possible current lanes.
  repeated LaneFeature current_lane_feature = 1;

  // Features of the most possible current lane.
  optional LaneFeature lane_feature = 2;

  // Features of all nearby lanes.
  repeated LaneFeature nearby_lane_feature = 3;

  // Lane graph
  optional LaneGraph lane_graph = 4;
  optional LaneGraph lane_graph_ordered = 5;

  // For modeling
  optional double label_update_time_delta = 26;
}

message LaneFeature {
  optional string lane_id = 1;
  optional uint32 lane_turn_type = 2;
  optional double lane_s = 3;
  optional double lane_l = 4;
  optional double angle_diff = 5;
  optional double dist_to_left_boundary = 6;
  optional double dist_to_right_boundary = 7;
  optional double lane_heading = 8;
  optional hozon.hdmap.Lane.LaneType lane_type = 9;
  optional hozon.common.Point3D lane_point = 10;
  optional double poly_min_l = 11;
  optional double poly_max_l = 12;
}

message JunctionExit {
  optional string exit_lane_id = 1;
  optional hozon.common.Point3D exit_position = 2;
  optional double exit_heading = 3;
  optional double exit_width = 4;
}

message JunctionFeature {
  optional string junction_id = 1;
  optional double junction_range = 2;
  optional LaneFeature enter_lane = 3;
  repeated JunctionExit junction_exit = 4;
  repeated double junction_mlp_feature = 5;
  repeated int32 junction_mlp_label = 6;  // dim is number of masks, i.e. 12
  repeated double junction_mlp_probability = 7;
  repeated string start_lane_id = 8;
}

// estimated obstacle intent
message ObstacleIntent {
  enum Type {
    UNKNOWN = 0;
    STOP = 1;
    STATIONARY = 2;
    MOVING = 3;
    CHANGE_LANE = 4;
    LOW_ACCELERATION = 5;
    HIGH_ACCELERATION = 6;
    LOW_DECELERATION = 7;
    HIGH_DECELERATION = 8;
    CROSSING = 9;
  }
  optional Type type = 1 [default = UNKNOWN];
}

message ObstaclePriority {
  enum Priority {
    CAUTION = 1;
    NORMAL = 2;
    IGNORE = 3;
  }
  optional Priority priority = 25 [default = NORMAL];
}

message Trajectory {
  optional double probability = 1;  // probability of this trajectory
  repeated hozon.common.TrajectoryPoint trajectory_point = 2;
}

// next id = 37
message Feature {
  // Obstacle ID
  optional int32 id = 1;

  // Obstacle features
  repeated hozon.common.Point3D polygon_point = 30;
  optional hozon.common.Point3D position = 2;
  optional hozon.common.Point3D raw_position = 27;
  optional hozon.common.Point3D velocity = 3;
  optional hozon.common.Point3D raw_velocity = 28;  // from perception
  optional hozon.common.Point3D acceleration = 4;
  optional double velocity_heading = 5;
  optional double speed = 6;
  optional double acc = 7;
  optional double theta = 8;
  optional double length = 9;
  optional double width = 10;
  optional double height = 11;
  optional double tracking_time = 12;
  optional double timestamp = 13;

  // Obstacle type-specific features
  optional Lane lane = 14;
  optional JunctionFeature junction_feature = 26;

  // Obstacle tracked features
  optional hozon.common.Point3D t_position = 16;
  optional hozon.common.Point3D t_velocity = 17;
  optional double t_velocity_heading = 18;
  optional double t_speed = 19;
  optional hozon.common.Point3D t_acceleration = 20 ;
  optional double t_acc = 21 ;

  optional bool is_still = 22 [default = false];
  optional hozon.perception.PerceptionObstacle.Type type = 23;
  optional hozon.perception.PerceptionObstacle.SubType sub_type = 46;
  optional double label_update_time_delta = 24;

  optional ObstaclePriority priority = 25;

  optional bool is_near_junction = 29 [default = false];

  // Obstacle ground-truth labels:
  optional Trajectory future_trajectory_points = 31;

  // Obstacle short-term predicted trajectory points
  repeated hozon.common.TrajectoryPoint
      short_term_predicted_trajectory_points = 32;

  // Obstacle predicted trajectories
  repeated Trajectory predicted_trajectory = 33;

  // ADC trajectory at the same frame
  repeated hozon.common.TrajectoryPoint adc_trajectory_point = 34;

  // Surrounding lanes
  repeated string surrounding_lane_id = 35;
  repeated string within_lane_id = 36;

  //vector_net map
  optional VectorNetFeature vector_net_feature = 37;
  repeated Goal2D goals_2d = 38;

  optional ObstacleIntent intent = 39;
  repeated Goal2D goals_2d_sample = 40;

  optional hozon.common.Point3D position_flu = 41;
  optional double theta_flu = 42;  // heading in the forward-left-up coordinate system.
  optional hozon.common.Point3D velocity_flu = 43;  //  forward-left-up obstacle velocity.
  optional hozon.common.Point3D acceleration_flu = 44;  // forward-left-up obstacle acceleration
  optional SensorFeatrue sensor_feature = 45;
}

message SensorFeatrue{
  optional perception.DetectSensor curr_detect_sensor = 1;
  optional bool is_ignore_by_sensor = 2 [default = false];
  optional string ignore_reason = 3 ;
}

message ObstacleHistory {
  repeated Feature feature = 1;
  optional bool is_trainable = 2 [default = false];
}

message FrameEnv {
  optional double timestamp = 1;
  optional ObstacleHistory ego_history = 2;
  repeated ObstacleHistory obstacles_history = 3;
}
