syntax = "proto2";

package hozon.routing;

import "proto/common/header.proto";
import "proto/common/types.proto";
import "proto/common/error_code.proto";
import "proto/map/map_parking_space.proto";
import "proto/perception/perception_parking_lot.proto";

enum LaneWaypointType {
  NORMAL = 0;
  ODD_START = 1;
  ODD_END = 2;
  ROUTE_BREAK = 3;
};

message LaneWaypoint {
  optional string id = 1;
  optional double s = 2;
  optional hozon.common.PointENU pose = 3;
  optional double heading = 4;
  optional LaneWaypointType type = 5 [default = NORMAL];

  enum ODDType {
    ABNOMAL = 1; // 道路构成不满足,服务道路、门前道路、交叉点、转向专用道路为非ODD

    SPECIAL_AREA = 2; // 收费站、检查站等

    CONSTRUCTION = 3; // 施工、被借用、禁止通行等

    TUNNEL = 4; //隧道内分叉：隧道有多个出口

    CURVATYRE = 5; // 曲率超限：曲率半径大于50米，连续长度超过50米

    LON_SLOPE = 6; // 道路纵坡超限：纵坡超过17%，连续长度100米

    SPECIAL_LANE = 7; // 特殊车道：路口车道，海关监管车道,避险车道引道,潮汐车道,掉头车道

    LANEWIDTH = 8; //车道宽度异常：车道宽度超过6米，连续长度超过100米，将对应路段设置为非ODD；当车道宽度小于2.5米，连续长度超过50米，将对应路段设置为非ODD；

    NO_SEPARATE_AREA = 9; 
    /*无物理防护区域：道路通行方向左侧道路边界不为以下类型且连续长度超过50米：防护栏(其他)，
    隧道墙，保护墙，护轨，新泽西护栏，栅栏，离散型护栏，防护网，索式防护栏，
    路缘石，遮棚，施工边界，其他，导流线，墩，高架桥覆盖*/

    LANE_LINE_INDISTINCT = 10; // 车道线模糊：重铺未画线、现势性、不清晰、有遮挡且连续长度超过200米

    TRAFFIC_LIGHT = 11; 
    /* 交通灯："交通灯作用关联路段位置前后100米设置为非ODD，包括以下交通灯类型：机动车信号灯，指示直行方向信号灯，指示左转方向信号灯，
    指示右转方向信号灯，指示掉头方向信号灯，指示直行+左转方向信号灯，指示直行+右转方向信号灯，指示直行+掉头方向信号灯，非机动车信号灯，
    人行横道信号灯，倒计时器信号灯，铁路道口信号灯，指示左转+右转方向信号灯，其它指示方向信号灯*/

    ROAD_END = 12; // 断头路：地图确实或实际为断头路

    LAYER_ODD = 13;

    UNKONWN = 100; // 未知类型
  };

  optional ODDType odd_type= 6;
}
 
message LaneSegment {
  optional string id = 1;
  optional double start_s = 2;
  optional double end_s = 3;
}

message ParkingInfo {
  optional string parking_space_id = 1;
  optional hozon.common.PointENU parking_point = 2;
  repeated hozon.common.PointENU parking_outlet_points = 3;  
  repeated hozon.common.PointENU self_defined_parking_slot_points = 4;
  repeated hozon.common.PointENU wheel_mask_point = 5;
  optional hozon.perception.ParkingLotOut.ParkType park_type = 6;
}

message RoutingRequest {
  optional hozon.common.Header header = 1;
  // at least two points. The first is start point, the end is final point.
  // The routing must go through each point in waypoint.
  repeated LaneWaypoint waypoint = 2;
  repeated LaneSegment blacklisted_lane = 3;
  repeated string blacklisted_road = 4;
  optional bool broadcast = 5 [default = true];
  optional hozon.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
  optional ParkingInfo parking_info = 7;
}

message Measurement {
  optional double distance = 1;
  repeated bytes info = 100;
}

enum ChangeLaneType {
  FORWARD = 0;
  LEFT = 1;
  RIGHT = 2;
};

message PerceptionChangeLaneType {
  optional string id = 1;
  optional ChangeLaneType change_lane_type = 3 [default = FORWARD];
}

message PerceptionChangeLaneTypes {
  repeated PerceptionChangeLaneType per_change_lane_type = 1;
}


message Passage {
  repeated LaneSegment segment = 1;
  optional bool can_exit = 2;
  optional ChangeLaneType change_lane_type = 3 [default = FORWARD];
}

message RoadSegment {
  optional string id = 1;
  repeated Passage passage = 2;
}

message RoutingResponse {
  optional hozon.common.Header header = 1;
  repeated RoadSegment road = 2;
  optional Measurement measurement = 3;
  optional RoutingRequest routing_request = 4;

  // the map version which is used to build road graph
  optional bytes map_version = 5;
  optional hozon.common.StatusPb status = 6;
  optional string ehp_reason = 10;

  repeated string origin_response = 12;
}
