cmake_minimum_required(VERSION 3.10)

project(test)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC --std=c++14 -O3 -Wall")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--as-needed")
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-command-line-argument")
#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-command-line-argument")

if (${BUILD_TYPE} MATCHES "release")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
elseif (${BUILD_TYPE} MATCHES "debug")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
else()
    message(FATAL_ERROR "unsupported build type ${BUILD_TYPE}")
endif()

add_definitions(-DBUILD_TYPE="${BUILD_TYPE}")
add_definitions(-DTARGET_PLATFORM="${TARGET_PLATFORM}")
if (${TARGET_PLATFORM} MATCHES "x86_2004")
    add_definitions(-DBUILD_FOR_X86=1)
elseif (${TARGET_PLATFORM} MATCHES "mdc")
    add_definitions(-DBUILD_FOR_MDC=1)
elseif (${TARGET_PLATFORM} MATCHES "mdc-llvm")
    add_definitions(-DBUILD_FOR_MDC=1)
elseif (${TARGET_PLATFORM} MATCHES "j5")
    add_definitions(-DBUILD_FOR_J5=1)
elseif (${TARGET_PLATFORM} MATCHES "orin")
    add_definitions(-DBUILD_FOR_ORIN=1)
endif()

set(PRJ_ROOT_DIR  ${CMAKE_SOURCE_DIR}/..)
set(NETA_MIDDLEWARE_DIR ${PRJ_ROOT_DIR}/middleware)
set(NETA_THIRDPARTY_DIR ${PRJ_ROOT_DIR}/netaos_thirdparty)


# include("${PRJ_ROOT_DIR}/output/${TARGET_PLATFORM}/lib/cmake/netaos/neta_codec-config.cmake")
set(CMAKE_FIND_ROOT_PATH "${PRJ_ROOT_DIR}/output/${TARGET_PLATFORM}/lib/cmake;${CMAKE_FIND_ROOT_PATH}")
find_package(netaos CONFIG REQUIRED)

option(ENABLE_SOMEIP "Enable someip complier")
set(ENABLE_SOMEIP OFF)
# set(ENABLE_SOMEIP ON)

link_directories(
    ${PRJ_ROOT_DIR}/netaos_thirdparty/${TARGET_PLATFORM}/protobuf/lib/
    ${PRJ_ROOT_DIR}/netaos_thirdparty/${TARGET_PLATFORM}/ffmpeg/lib/
)

# add_subdirectory(can-utils)
add_subdirectory(helloworld)
add_subdirectory(idl_test)
add_subdirectory(event_test)
# 此模块mdc-llvm编不过，请解决后放开
# add_subdirectory(cm_typelookup_test)
add_subdirectory(method_test)
add_subdirectory(json_test)
add_subdirectory(hz_log_test)
add_subdirectory(doip_client_test)
add_subdirectory(crypto_client_test)
add_subdirectory(doip_server_test)
if(ENABLE_SOMEIP)
    # 此模块mdc-llvm编不过，请解决后放开
    # add_subdirectory(someip)
    add_subdirectory(someip_diag)
endif()
if (${BUILD_WITH_IDL} MATCHES "true")
    # add_subdirectory(latency)
endif()
add_subdirectory(docan_test)
add_subdirectory(phm_test)
add_subdirectory(file_to_bin_test)
add_subdirectory(adf_test)
# add_subdirectory(dl_test)
add_subdirectory(sm_test)
add_subdirectory(em_test)
# add_subdirectory(diag_test)
add_subdirectory(sample)
add_subdirectory(bag_sample)
add_subdirectory(auto_test)
add_subdirectory(crc_test)
add_subdirectory(proto_cm_event_test)
add_subdirectory(unit_test)
add_subdirectory(per_test)
add_subdirectory(diag_ipc_test)
# add_subdirectory(codec_test) //编不过
add_subdirectory(cfg_test)
# add_subdirectory(orin_presentation)
add_subdirectory(e2e_sample)
add_subdirectory(zmq_test)
add_subdirectory(log_server_test)
# add_subdirectory(system_monitor_test)
add_subdirectory(https_test)
add_subdirectory(cmd_upgrade_test)
add_subdirectory(adf_lite_test)
# add_subdirectory(demo)
# add_subdirectory(compress_test)
add_subdirectory(pointcloud_test)
add_subdirectory(dr_proto_pub_test)
add_subdirectory(sensor_trans_test)
add_subdirectory(camera_test)
add_subdirectory(cm_freqchecker_tool)
add_subdirectory(trans_pcd_test)
add_subdirectory(lidar_test)
add_subdirectory(cm_event_test)
add_subdirectory(state_machine_test)
add_subdirectory(extwdg_test)