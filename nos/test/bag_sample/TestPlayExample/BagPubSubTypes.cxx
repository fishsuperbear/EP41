// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BagPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "BagPubSubTypes.h"

using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;
using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;

BagPubSubType::BagPubSubType(std::string type_name)
{
    std::cout << "new BagPubSubType" << std::endl;

    setName(type_name.c_str());
    auto type_size = TestWorld::getMaxCdrSerializedSize();
    type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4); /* possible submessage alignment */
    m_typeSize = static_cast<uint32_t>(type_size) + 4; /*encapsulation*/
    // m_isGetKeyDefined = Bag::isKeyDefined();
    // size_t keyLength = Bag::getKeyMaxCdrSerializedSize() > 16 ?
    //         Bag::getKeyMaxCdrSerializedSize() : 16;
    // m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
    // memset(m_keyBuffer, 0, keyLength);
    fid = fopen("./test_data/binary.dat","rb");
    if(fid == NULL)
    {
        printf("读取文件出错");
        return;
    }
    std::cout<< "new BagPubSubTypes ok." << std::endl;
}

BagPubSubType::~BagPubSubType()
{
    if(fid != NULL)
    {
        fclose(fid);
    }

    // if (m_keyBuffer != nullptr)
    // {
    //     free(m_keyBuffer);
    // }
}


//采用C模式读二进制文件
// void BagPubSubType::DataRead_CMode(SerializedPayload_t* payload)
// {
//     std::cout << "DataRead_CMode start" << std::endl;
//     //将文件中的位置指针重新定位到文件开头
//     //rewind(fp);
//     std::cout << "开始读取序列化数据:" << std::endl;
//     fread(&(payload->encapsulation), sizeof(uint16_t) ,1 , fid);
//     fread(&(payload->length), sizeof(uint32_t), 1 ,fid);
//     fread(payload->data, sizeof(unsigned char), payload->length ,fid);
//     fread(&(payload->max_size), sizeof(uint32_t), 1 ,fid);
//     fread(&(payload->pos), sizeof(uint32_t), 1 ,fid);
// }

bool BagPubSubType::serialize(
        void* data,
        SerializedPayload_t* payload)
{
    std::cout << "BagPubSubType::serialize start" << std::endl;
    TestWorld* p_type = static_cast<TestWorld*>(data);
    payload->copy(&(p_type->m_payload),true);

    // payload->encapsulation = p_type->m_payload.encapsulation;
    // payload->encapsulation = p_type->m_payload.encapsulation;
    // payload->length = p_type->m_payload.length;


    //DataRead_CMode(payload);


    // Bag* p_type = static_cast<Bag*>(data);

    // // Object that manages the raw buffer.
    // eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);
    // // Object that serializes the data.
    // eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);
    // payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // // Serialize encapsulation
    // ser.serialize_encapsulation();

    // try
    // {
    //     // Serialize the object.
    //     p_type->serialize(ser);
    // }
    // catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
    // {
    //     return false;
    // }

    // // Get the serialized length
    // payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());
    return true;
}



//采用C模式写二进制文件
void DataWrite_CMode(SerializedPayload_t* payload)
{
    std::cout << "开始记录序列化数据:" << std::endl;
    //准备数据
    // double pos[200];
    // for(int i = 0; i < 200; i ++ )
    //     pos[i] = i ;
    //写出数据DataWrite_CMode
    std::cout << "DataWrite_CMode start" << std::endl;
    FILE *fid;
    fid = fopen("binary.dat","ab");
    if(fid == NULL)
    {
        printf("写出文件出错");
        return;
    }
    fwrite(&(payload->encapsulation), sizeof(uint16_t), 1 ,fid);
    fwrite(&(payload->length), sizeof(uint32_t), 1 ,fid);
    fwrite(payload->data, sizeof(unsigned char), payload->length ,fid);
    fwrite(&(payload->max_size), sizeof(uint32_t), 1 ,fid);
    fwrite(&(payload->pos), sizeof(uint32_t), 1 ,fid);
    fclose(fid);
}

bool BagPubSubType::deserialize(
        SerializedPayload_t* payload,
        void* data)
{
    std::cout << "BagPubSubType::deserialize start" << std::endl;
    //DataWrite_CMode(payload);
    // try
    // {
    //     //Convert DATA to pointer of your type
    //     Bag* p_type = static_cast<Bag*>(data);

    //     // Object that manages the raw buffer.
    //     eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);

    //     // Object that deserializes the data.
    //     eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);

    //     // Deserialize encapsulation.
    //     deser.read_encapsulation();
    //     payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    //     // Deserialize the object.
    //     p_type->deserialize(deser);
    // }
    // catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
    // {
    //     return false;
    // }

    return true;
}

//这个需要保留,返回消息序列化数据的长度
std::function<uint32_t()> BagPubSubType::getSerializedSizeProvider(
        void* data)
{
    return [data]() -> uint32_t
           {
               return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<TestWorld*>(data))) +
                      4u /*encapsulation*/;
           };
    return 0;
}

void* BagPubSubType::createData()
{
    //return reinterpret_cast<void*>(new Bag());
    return nullptr;
}

void BagPubSubType::deleteData(
        void* data)
{
    //delete(reinterpret_cast<Bag*>(data));
    return;
}

bool BagPubSubType::getKey(
        void* data,
        InstanceHandle_t* handle,
        bool force_md5)
{
    // std::cout << "BagPubSubType::getKey start" << std::endl;
    // if (!m_isGetKeyDefined)
    // {
    //     return false;
    // }

    // Bag* p_type = static_cast<Bag*>(data);

    // // Object that manages the raw buffer.
    // eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),
    //         Bag::getKeyMaxCdrSerializedSize());

    // // Object that serializes the data.
    // eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);
    // p_type->serializeKey(ser);
    // if (force_md5 || Bag::getKeyMaxCdrSerializedSize() > 16)
    // {
    //     m_md5.init();
    //     m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
    //     m_md5.finalize();
    //     for (uint8_t i = 0; i < 16; ++i)
    //     {
    //         handle->value[i] = m_md5.digest[i];
    //     }
    // }
    // else
    // {
    //     for (uint8_t i = 0; i < 16; ++i)
    //     {
    //         handle->value[i] = m_keyBuffer[i];
    //     }
    // }
    return true;
}