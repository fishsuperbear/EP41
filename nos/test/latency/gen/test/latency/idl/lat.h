// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file lat.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_LAT_H_
#define _FAST_DDS_GENERATED_LAT_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(LAT_SOURCE)
#define LAT_DllAPI __declspec( dllexport )
#else
#define LAT_DllAPI __declspec( dllimport )
#endif // LAT_SOURCE
#else
#define LAT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define LAT_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



/*!
 * @brief This class represents the structure Lat defined by the user in the IDL file.
 * @ingroup lat
 */
class Lat
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Lat();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Lat();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Lat that will be copied.
     */
    eProsima_user_DllExport Lat(
            const Lat& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Lat that will be copied.
     */
    eProsima_user_DllExport Lat(
            Lat&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Lat that will be copied.
     */
    eProsima_user_DllExport Lat& operator =(
            const Lat& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Lat that will be copied.
     */
    eProsima_user_DllExport Lat& operator =(
            Lat&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Lat object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Lat& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Lat object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Lat& x) const;

    /*!
     * @brief This function sets a value in member timestamp_us
     * @param _timestamp_us New value for member timestamp_us
     */
    eProsima_user_DllExport void timestamp_us(
            double _timestamp_us);

    /*!
     * @brief This function returns the value of member timestamp_us
     * @return Value of member timestamp_us
     */
    eProsima_user_DllExport double timestamp_us() const;

    /*!
     * @brief This function returns a reference to member timestamp_us
     * @return Reference to member timestamp_us
     */
    eProsima_user_DllExport double& timestamp_us();


    /*!
     * @brief This function sets a value in member seq
     * @param _seq New value for member seq
     */
    eProsima_user_DllExport void seq(
            int32_t _seq);

    /*!
     * @brief This function returns the value of member seq
     * @return Value of member seq
     */
    eProsima_user_DllExport int32_t seq() const;

    /*!
     * @brief This function returns a reference to member seq
     * @return Reference to member seq
     */
    eProsima_user_DllExport int32_t& seq();

private:

    double m_timestamp_us{0.0};
    int32_t m_seq{0};

};
/*!
 * @brief This class represents the structure LatVar defined by the user in the IDL file.
 * @ingroup lat
 */
class LatVar
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LatVar();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LatVar();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LatVar that will be copied.
     */
    eProsima_user_DllExport LatVar(
            const LatVar& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LatVar that will be copied.
     */
    eProsima_user_DllExport LatVar(
            LatVar&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LatVar that will be copied.
     */
    eProsima_user_DllExport LatVar& operator =(
            const LatVar& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LatVar that will be copied.
     */
    eProsima_user_DllExport LatVar& operator =(
            LatVar&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x LatVar object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LatVar& x) const;

    /*!
     * @brief Comparison operator.
     * @param x LatVar object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LatVar& x) const;

    /*!
     * @brief This function copies the value in member lat
     * @param _lat New value to be copied in member lat
     */
    eProsima_user_DllExport void lat(
            const Lat& _lat);

    /*!
     * @brief This function moves the value in member lat
     * @param _lat New value to be moved in member lat
     */
    eProsima_user_DllExport void lat(
            Lat&& _lat);

    /*!
     * @brief This function returns a constant reference to member lat
     * @return Constant reference to member lat
     */
    eProsima_user_DllExport const Lat& lat() const;

    /*!
     * @brief This function returns a reference to member lat
     * @return Reference to member lat
     */
    eProsima_user_DllExport Lat& lat();


    /*!
     * @brief This function copies the value in member payload
     * @param _payload New value to be copied in member payload
     */
    eProsima_user_DllExport void payload(
            const std::vector<uint8_t>& _payload);

    /*!
     * @brief This function moves the value in member payload
     * @param _payload New value to be moved in member payload
     */
    eProsima_user_DllExport void payload(
            std::vector<uint8_t>&& _payload);

    /*!
     * @brief This function returns a constant reference to member payload
     * @return Constant reference to member payload
     */
    eProsima_user_DllExport const std::vector<uint8_t>& payload() const;

    /*!
     * @brief This function returns a reference to member payload
     * @return Reference to member payload
     */
    eProsima_user_DllExport std::vector<uint8_t>& payload();

private:

    Lat m_lat;
    std::vector<uint8_t> m_payload;

};
/*!
 * @brief This class represents the structure Lat1K defined by the user in the IDL file.
 * @ingroup lat
 */
class Lat1K
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Lat1K();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Lat1K();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Lat1K that will be copied.
     */
    eProsima_user_DllExport Lat1K(
            const Lat1K& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Lat1K that will be copied.
     */
    eProsima_user_DllExport Lat1K(
            Lat1K&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Lat1K that will be copied.
     */
    eProsima_user_DllExport Lat1K& operator =(
            const Lat1K& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Lat1K that will be copied.
     */
    eProsima_user_DllExport Lat1K& operator =(
            Lat1K&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Lat1K object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Lat1K& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Lat1K object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Lat1K& x) const;

    /*!
     * @brief This function copies the value in member lat
     * @param _lat New value to be copied in member lat
     */
    eProsima_user_DllExport void lat(
            const Lat& _lat);

    /*!
     * @brief This function moves the value in member lat
     * @param _lat New value to be moved in member lat
     */
    eProsima_user_DllExport void lat(
            Lat&& _lat);

    /*!
     * @brief This function returns a constant reference to member lat
     * @return Constant reference to member lat
     */
    eProsima_user_DllExport const Lat& lat() const;

    /*!
     * @brief This function returns a reference to member lat
     * @return Reference to member lat
     */
    eProsima_user_DllExport Lat& lat();


    /*!
     * @brief This function copies the value in member payload
     * @param _payload New value to be copied in member payload
     */
    eProsima_user_DllExport void payload(
            const std::array<uint8_t, 1024>& _payload);

    /*!
     * @brief This function moves the value in member payload
     * @param _payload New value to be moved in member payload
     */
    eProsima_user_DllExport void payload(
            std::array<uint8_t, 1024>&& _payload);

    /*!
     * @brief This function returns a constant reference to member payload
     * @return Constant reference to member payload
     */
    eProsima_user_DllExport const std::array<uint8_t, 1024>& payload() const;

    /*!
     * @brief This function returns a reference to member payload
     * @return Reference to member payload
     */
    eProsima_user_DllExport std::array<uint8_t, 1024>& payload();

private:

    Lat m_lat;
    std::array<uint8_t, 1024> m_payload{0};

};
/*!
 * @brief This class represents the structure Lat10K defined by the user in the IDL file.
 * @ingroup lat
 */
class Lat10K
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Lat10K();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Lat10K();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Lat10K that will be copied.
     */
    eProsima_user_DllExport Lat10K(
            const Lat10K& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Lat10K that will be copied.
     */
    eProsima_user_DllExport Lat10K(
            Lat10K&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Lat10K that will be copied.
     */
    eProsima_user_DllExport Lat10K& operator =(
            const Lat10K& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Lat10K that will be copied.
     */
    eProsima_user_DllExport Lat10K& operator =(
            Lat10K&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Lat10K object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Lat10K& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Lat10K object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Lat10K& x) const;

    /*!
     * @brief This function copies the value in member lat
     * @param _lat New value to be copied in member lat
     */
    eProsima_user_DllExport void lat(
            const Lat& _lat);

    /*!
     * @brief This function moves the value in member lat
     * @param _lat New value to be moved in member lat
     */
    eProsima_user_DllExport void lat(
            Lat&& _lat);

    /*!
     * @brief This function returns a constant reference to member lat
     * @return Constant reference to member lat
     */
    eProsima_user_DllExport const Lat& lat() const;

    /*!
     * @brief This function returns a reference to member lat
     * @return Reference to member lat
     */
    eProsima_user_DllExport Lat& lat();


    /*!
     * @brief This function copies the value in member payload
     * @param _payload New value to be copied in member payload
     */
    eProsima_user_DllExport void payload(
            const std::array<uint8_t, 10240>& _payload);

    /*!
     * @brief This function moves the value in member payload
     * @param _payload New value to be moved in member payload
     */
    eProsima_user_DllExport void payload(
            std::array<uint8_t, 10240>&& _payload);

    /*!
     * @brief This function returns a constant reference to member payload
     * @return Constant reference to member payload
     */
    eProsima_user_DllExport const std::array<uint8_t, 10240>& payload() const;

    /*!
     * @brief This function returns a reference to member payload
     * @return Reference to member payload
     */
    eProsima_user_DllExport std::array<uint8_t, 10240>& payload();

private:

    Lat m_lat;
    std::array<uint8_t, 10240> m_payload{0};

};
/*!
 * @brief This class represents the structure Lat100K defined by the user in the IDL file.
 * @ingroup lat
 */
class Lat100K
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Lat100K();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Lat100K();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Lat100K that will be copied.
     */
    eProsima_user_DllExport Lat100K(
            const Lat100K& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Lat100K that will be copied.
     */
    eProsima_user_DllExport Lat100K(
            Lat100K&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Lat100K that will be copied.
     */
    eProsima_user_DllExport Lat100K& operator =(
            const Lat100K& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Lat100K that will be copied.
     */
    eProsima_user_DllExport Lat100K& operator =(
            Lat100K&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Lat100K object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Lat100K& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Lat100K object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Lat100K& x) const;

    /*!
     * @brief This function copies the value in member lat
     * @param _lat New value to be copied in member lat
     */
    eProsima_user_DllExport void lat(
            const Lat& _lat);

    /*!
     * @brief This function moves the value in member lat
     * @param _lat New value to be moved in member lat
     */
    eProsima_user_DllExport void lat(
            Lat&& _lat);

    /*!
     * @brief This function returns a constant reference to member lat
     * @return Constant reference to member lat
     */
    eProsima_user_DllExport const Lat& lat() const;

    /*!
     * @brief This function returns a reference to member lat
     * @return Reference to member lat
     */
    eProsima_user_DllExport Lat& lat();


    /*!
     * @brief This function copies the value in member payload
     * @param _payload New value to be copied in member payload
     */
    eProsima_user_DllExport void payload(
            const std::array<uint8_t, 102400>& _payload);

    /*!
     * @brief This function moves the value in member payload
     * @param _payload New value to be moved in member payload
     */
    eProsima_user_DllExport void payload(
            std::array<uint8_t, 102400>&& _payload);

    /*!
     * @brief This function returns a constant reference to member payload
     * @return Constant reference to member payload
     */
    eProsima_user_DllExport const std::array<uint8_t, 102400>& payload() const;

    /*!
     * @brief This function returns a reference to member payload
     * @return Reference to member payload
     */
    eProsima_user_DllExport std::array<uint8_t, 102400>& payload();

private:

    Lat m_lat;
    std::array<uint8_t, 102400> m_payload{0};

};
/*!
 * @brief This class represents the structure Lat200K defined by the user in the IDL file.
 * @ingroup lat
 */
class Lat200K
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Lat200K();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Lat200K();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Lat200K that will be copied.
     */
    eProsima_user_DllExport Lat200K(
            const Lat200K& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Lat200K that will be copied.
     */
    eProsima_user_DllExport Lat200K(
            Lat200K&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Lat200K that will be copied.
     */
    eProsima_user_DllExport Lat200K& operator =(
            const Lat200K& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Lat200K that will be copied.
     */
    eProsima_user_DllExport Lat200K& operator =(
            Lat200K&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Lat200K object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Lat200K& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Lat200K object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Lat200K& x) const;

    /*!
     * @brief This function copies the value in member lat
     * @param _lat New value to be copied in member lat
     */
    eProsima_user_DllExport void lat(
            const Lat& _lat);

    /*!
     * @brief This function moves the value in member lat
     * @param _lat New value to be moved in member lat
     */
    eProsima_user_DllExport void lat(
            Lat&& _lat);

    /*!
     * @brief This function returns a constant reference to member lat
     * @return Constant reference to member lat
     */
    eProsima_user_DllExport const Lat& lat() const;

    /*!
     * @brief This function returns a reference to member lat
     * @return Reference to member lat
     */
    eProsima_user_DllExport Lat& lat();


    /*!
     * @brief This function copies the value in member payload
     * @param _payload New value to be copied in member payload
     */
    eProsima_user_DllExport void payload(
            const std::array<uint8_t, 204800>& _payload);

    /*!
     * @brief This function moves the value in member payload
     * @param _payload New value to be moved in member payload
     */
    eProsima_user_DllExport void payload(
            std::array<uint8_t, 204800>&& _payload);

    /*!
     * @brief This function returns a constant reference to member payload
     * @return Constant reference to member payload
     */
    eProsima_user_DllExport const std::array<uint8_t, 204800>& payload() const;

    /*!
     * @brief This function returns a reference to member payload
     * @return Reference to member payload
     */
    eProsima_user_DllExport std::array<uint8_t, 204800>& payload();

private:

    Lat m_lat;
    std::array<uint8_t, 204800> m_payload{0};

};
/*!
 * @brief This class represents the structure Lat500K defined by the user in the IDL file.
 * @ingroup lat
 */
class Lat500K
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Lat500K();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Lat500K();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Lat500K that will be copied.
     */
    eProsima_user_DllExport Lat500K(
            const Lat500K& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Lat500K that will be copied.
     */
    eProsima_user_DllExport Lat500K(
            Lat500K&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Lat500K that will be copied.
     */
    eProsima_user_DllExport Lat500K& operator =(
            const Lat500K& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Lat500K that will be copied.
     */
    eProsima_user_DllExport Lat500K& operator =(
            Lat500K&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Lat500K object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Lat500K& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Lat500K object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Lat500K& x) const;

    /*!
     * @brief This function copies the value in member lat
     * @param _lat New value to be copied in member lat
     */
    eProsima_user_DllExport void lat(
            const Lat& _lat);

    /*!
     * @brief This function moves the value in member lat
     * @param _lat New value to be moved in member lat
     */
    eProsima_user_DllExport void lat(
            Lat&& _lat);

    /*!
     * @brief This function returns a constant reference to member lat
     * @return Constant reference to member lat
     */
    eProsima_user_DllExport const Lat& lat() const;

    /*!
     * @brief This function returns a reference to member lat
     * @return Reference to member lat
     */
    eProsima_user_DllExport Lat& lat();


    /*!
     * @brief This function copies the value in member payload
     * @param _payload New value to be copied in member payload
     */
    eProsima_user_DllExport void payload(
            const std::array<uint8_t, 512000>& _payload);

    /*!
     * @brief This function moves the value in member payload
     * @param _payload New value to be moved in member payload
     */
    eProsima_user_DllExport void payload(
            std::array<uint8_t, 512000>&& _payload);

    /*!
     * @brief This function returns a constant reference to member payload
     * @return Constant reference to member payload
     */
    eProsima_user_DllExport const std::array<uint8_t, 512000>& payload() const;

    /*!
     * @brief This function returns a reference to member payload
     * @return Reference to member payload
     */
    eProsima_user_DllExport std::array<uint8_t, 512000>& payload();

private:

    Lat m_lat;
    std::array<uint8_t, 512000> m_payload{0};

};
/*!
 * @brief This class represents the structure Lat1000K defined by the user in the IDL file.
 * @ingroup lat
 */
class Lat1000K
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Lat1000K();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Lat1000K();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Lat1000K that will be copied.
     */
    eProsima_user_DllExport Lat1000K(
            const Lat1000K& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Lat1000K that will be copied.
     */
    eProsima_user_DllExport Lat1000K(
            Lat1000K&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Lat1000K that will be copied.
     */
    eProsima_user_DllExport Lat1000K& operator =(
            const Lat1000K& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Lat1000K that will be copied.
     */
    eProsima_user_DllExport Lat1000K& operator =(
            Lat1000K&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Lat1000K object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Lat1000K& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Lat1000K object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Lat1000K& x) const;

    /*!
     * @brief This function copies the value in member lat
     * @param _lat New value to be copied in member lat
     */
    eProsima_user_DllExport void lat(
            const Lat& _lat);

    /*!
     * @brief This function moves the value in member lat
     * @param _lat New value to be moved in member lat
     */
    eProsima_user_DllExport void lat(
            Lat&& _lat);

    /*!
     * @brief This function returns a constant reference to member lat
     * @return Constant reference to member lat
     */
    eProsima_user_DllExport const Lat& lat() const;

    /*!
     * @brief This function returns a reference to member lat
     * @return Reference to member lat
     */
    eProsima_user_DllExport Lat& lat();


    /*!
     * @brief This function copies the value in member payload
     * @param _payload New value to be copied in member payload
     */
    eProsima_user_DllExport void payload(
            const std::array<uint8_t, 1024000>& _payload);

    /*!
     * @brief This function moves the value in member payload
     * @param _payload New value to be moved in member payload
     */
    eProsima_user_DllExport void payload(
            std::array<uint8_t, 1024000>&& _payload);

    /*!
     * @brief This function returns a constant reference to member payload
     * @return Constant reference to member payload
     */
    eProsima_user_DllExport const std::array<uint8_t, 1024000>& payload() const;

    /*!
     * @brief This function returns a reference to member payload
     * @return Reference to member payload
     */
    eProsima_user_DllExport std::array<uint8_t, 1024000>& payload();

private:

    Lat m_lat;
    std::array<uint8_t, 1024000> m_payload{0};

};
/*!
 * @brief This class represents the structure Lat16m defined by the user in the IDL file.
 * @ingroup lat
 */
class Lat16m
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Lat16m();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Lat16m();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Lat16m that will be copied.
     */
    eProsima_user_DllExport Lat16m(
            const Lat16m& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Lat16m that will be copied.
     */
    eProsima_user_DllExport Lat16m(
            Lat16m&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Lat16m that will be copied.
     */
    eProsima_user_DllExport Lat16m& operator =(
            const Lat16m& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Lat16m that will be copied.
     */
    eProsima_user_DllExport Lat16m& operator =(
            Lat16m&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Lat16m object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Lat16m& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Lat16m object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Lat16m& x) const;

    /*!
     * @brief This function copies the value in member lat
     * @param _lat New value to be copied in member lat
     */
    eProsima_user_DllExport void lat(
            const Lat& _lat);

    /*!
     * @brief This function moves the value in member lat
     * @param _lat New value to be moved in member lat
     */
    eProsima_user_DllExport void lat(
            Lat&& _lat);

    /*!
     * @brief This function returns a constant reference to member lat
     * @return Constant reference to member lat
     */
    eProsima_user_DllExport const Lat& lat() const;

    /*!
     * @brief This function returns a reference to member lat
     * @return Reference to member lat
     */
    eProsima_user_DllExport Lat& lat();


    /*!
     * @brief This function copies the value in member payload
     * @param _payload New value to be copied in member payload
     */
    eProsima_user_DllExport void payload(
            const std::array<uint8_t, 16777216>& _payload);

    /*!
     * @brief This function moves the value in member payload
     * @param _payload New value to be moved in member payload
     */
    eProsima_user_DllExport void payload(
            std::array<uint8_t, 16777216>&& _payload);

    /*!
     * @brief This function returns a constant reference to member payload
     * @return Constant reference to member payload
     */
    eProsima_user_DllExport const std::array<uint8_t, 16777216>& payload() const;

    /*!
     * @brief This function returns a reference to member payload
     * @return Reference to member payload
     */
    eProsima_user_DllExport std::array<uint8_t, 16777216>& payload();

private:

    Lat m_lat;
    std::array<uint8_t, 16777216> m_payload{0};

};

#endif // _FAST_DDS_GENERATED_LAT_H_

