/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_DO_SOME_IP_HPP_
#define V1_COMMONAPI_DO_SOME_IP_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <vector>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

class DoSomeIP {
public:
    virtual ~DoSomeIP() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    typedef std::vector< uint8_t> my_array;
    
    struct TargetAddressType : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            kPhysical = 0,
            kFunctional = 1
        };
    
        TargetAddressType()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::kPhysical)) {}
        TargetAddressType(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::kPhysical):
                case static_cast< uint8_t>(Literal::kFunctional):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const TargetAddressType &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const TargetAddressType &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const TargetAddressType &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const TargetAddressType &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const TargetAddressType &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const TargetAddressType &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::kPhysical): return "kPhysical";
            case static_cast< uint8_t>(Literal::kFunctional): return "kFunctional";
            default: return "UNDEFINED";
            }
        }
    };
    struct DoSomeIPReqUdsMessage : CommonAPI::Struct< uint16_t, uint16_t, TargetAddressType, my_array> {
    
        DoSomeIPReqUdsMessage()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = TargetAddressType();
            std::get< 3>(values_) = my_array();
        }
        DoSomeIPReqUdsMessage(const uint16_t &_udsSa, const uint16_t &_udsTa, const TargetAddressType &_taType, const my_array &_udsData)
        {
            std::get< 0>(values_) = _udsSa;
            std::get< 1>(values_) = _udsTa;
            std::get< 2>(values_) = _taType;
            std::get< 3>(values_) = _udsData;
        }
        inline const uint16_t &getUdsSa() const { return std::get< 0>(values_); }
        inline void setUdsSa(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint16_t &getUdsTa() const { return std::get< 1>(values_); }
        inline void setUdsTa(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline const TargetAddressType &getTaType() const { return std::get< 2>(values_); }
        inline void setTaType(const TargetAddressType &_value) { std::get< 2>(values_) = _value; }
        inline const my_array &getUdsData() const { return std::get< 3>(values_); }
        inline void setUdsData(const my_array &_value) { std::get< 3>(values_) = _value; }
        inline bool operator==(const DoSomeIPReqUdsMessage& _other) const {
        return (getUdsSa() == _other.getUdsSa() && getUdsTa() == _other.getUdsTa() && getTaType() == _other.getTaType() && getUdsData() == _other.getUdsData());
        }
        inline bool operator!=(const DoSomeIPReqUdsMessage &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct DoSomeIPRespUdsMessage : CommonAPI::Struct< uint16_t, uint16_t, uint32_t, TargetAddressType, my_array> {
    
        DoSomeIPRespUdsMessage()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0ul;
            std::get< 3>(values_) = TargetAddressType();
            std::get< 4>(values_) = my_array();
        }
        DoSomeIPRespUdsMessage(const uint16_t &_udsSa, const uint16_t &_udsTa, const uint32_t &_result, const TargetAddressType &_taType, const my_array &_udsData)
        {
            std::get< 0>(values_) = _udsSa;
            std::get< 1>(values_) = _udsTa;
            std::get< 2>(values_) = _result;
            std::get< 3>(values_) = _taType;
            std::get< 4>(values_) = _udsData;
        }
        inline const uint16_t &getUdsSa() const { return std::get< 0>(values_); }
        inline void setUdsSa(const uint16_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint16_t &getUdsTa() const { return std::get< 1>(values_); }
        inline void setUdsTa(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint32_t &getResult() const { return std::get< 2>(values_); }
        inline void setResult(const uint32_t &_value) { std::get< 2>(values_) = _value; }
        inline const TargetAddressType &getTaType() const { return std::get< 3>(values_); }
        inline void setTaType(const TargetAddressType &_value) { std::get< 3>(values_) = _value; }
        inline const my_array &getUdsData() const { return std::get< 4>(values_); }
        inline void setUdsData(const my_array &_value) { std::get< 4>(values_) = _value; }
        inline bool operator==(const DoSomeIPRespUdsMessage& _other) const {
        return (getUdsSa() == _other.getUdsSa() && getUdsTa() == _other.getUdsTa() && getResult() == _other.getResult() && getTaType() == _other.getTaType() && getUdsData() == _other.getUdsData());
        }
        inline bool operator!=(const DoSomeIPRespUdsMessage &_other) const {
            return !((*this) == _other);
        }
    
    };
    
    struct stdErrorTypeEnum : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            OK = 0,
            NOT_OK = 1
        };
    
        stdErrorTypeEnum()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::OK)) {}
        stdErrorTypeEnum(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::OK):
                case static_cast< uint8_t>(Literal::NOT_OK):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const stdErrorTypeEnum &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const stdErrorTypeEnum &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const stdErrorTypeEnum &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const stdErrorTypeEnum &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const stdErrorTypeEnum &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const stdErrorTypeEnum &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::OK): return "OK";
            case static_cast< uint8_t>(Literal::NOT_OK): return "NOT_OK";
            default: return "UNDEFINED";
            }
        }
    };
};

const char* DoSomeIP::getInterface() {
    return ("commonapi.DoSomeIP:v1_0");
}

CommonAPI::Version DoSomeIP::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace commonapi
} // namespace v1

namespace CommonAPI {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_DO_SOME_IP_HPP_
